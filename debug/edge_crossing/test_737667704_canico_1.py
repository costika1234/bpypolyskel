import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((2.5120503902435303, -2.504688262939453, 0.0)),
    Vector((4.377340793609619, -0.7681035399436951, 0.0)),
    Vector((13.900647163391113, -9.573466300964355, 0.0)),
    Vector((11.801024436950684, -11.744199752807617, 0.0)),
    Vector((14.266213417053223, -14.193224906921387, 0.0)),
    Vector((15.869050979614258, -12.612485885620117, 0.0)),
    Vector((20.105804443359375, -16.408472061157227, 0.0)),
    Vector((18.27800750732422, -18.18958854675293, 0.0)),
    Vector((20.90254783630371, -20.794458389282227, 0.0)),
    Vector((22.795957565307617, -19.057870864868164, 0.0)),
    Vector((25.158044815063477, -21.273122787475586, 0.0)),
    Vector((24.24883270263672, -22.108020782470703, 0.0)),
    Vector((25.78606414794922, -23.621963500976562, 0.0)),
    Vector((28.944873809814453, -20.827835083007812, 0.0)),
    Vector((0.571772038936615, 8.671788215637207, 0.0)),
    Vector((-2.39019513130188, 5.944460868835449, 0.0)),
    Vector((1.8184237480163574, 1.7811120748519897, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((2.5120503902435303, -2.504688262939453, 3.129413366317749)),
    Vector((4.377340793609619, -0.7681035399436951, 3.129413366317749)),
    Vector((13.900647163391113, -9.573466300964355, 3.129413366317749)),
    Vector((11.801024436950684, -11.744199752807617, 3.129413366317749)),
    Vector((14.266213417053223, -14.193224906921387, 3.129413366317749)),
    Vector((15.869050979614258, -12.612485885620117, 3.129413366317749)),
    Vector((20.105804443359375, -16.408472061157227, 3.129413366317749)),
    Vector((18.27800750732422, -18.18958854675293, 3.129413366317749)),
    Vector((20.90254783630371, -20.794458389282227, 3.129413366317749)),
    Vector((22.795957565307617, -19.057870864868164, 3.129413366317749)),
    Vector((25.158044815063477, -21.273122787475586, 3.129413366317749)),
    Vector((24.24883270263672, -22.108020782470703, 3.129413366317749)),
    Vector((25.78606414794922, -23.621963500976562, 3.129413366317749)),
    Vector((28.944873809814453, -20.827835083007812, 3.129413366317749)),
    Vector((0.571772038936615, 8.671788215637207, 3.129413366317749)),
    Vector((-2.39019513130188, 5.944460868835449, 3.129413366317749)),
    Vector((1.8184237480163574, 1.7811120748519897, 3.129413366317749)),
    Vector((0.0, 0.0, 3.129413366317749))
]
unitVectors = [
    Vector((0.7319067120552063, 0.6814048886299133, 0.0)),
    Vector((0.7342414259910583, -0.6788884401321411, 0.0)),
    Vector((-0.695235550403595, -0.7187820076942444, 0.0)),
    Vector((0.7094287276268005, -0.7047771215438843, 0.0)),
    Vector((0.711997926235199, 0.7021815180778503, 0.0)),
    Vector((0.7447863221168518, -0.6673030853271484, 0.0)),
    Vector((-0.7161931395530701, -0.6979021430015564, 0.0)),
    Vector((0.7097615599632263, -0.704442024230957, 0.0)),
    Vector((0.7369675636291504, 0.675927996635437, 0.0)),
    Vector((0.729414701461792, -0.6840717792510986, 0.0)),
    Vector((-0.7365672588348389, -0.6763642430305481, 0.0)),
    Vector((0.7124832272529602, -0.7016892433166504, 0.0)),
    Vector((0.7490204572677612, 0.6625468730926514, 0.0)),
    Vector((-0.6932113170623779, 0.7207344174385071, 0.0)),
    Vector((-0.7356441617012024, -0.6773682236671448, 0.0)),
    Vector((0.7109200358390808, -0.7032729387283325, 0.0)),
    Vector((-0.7143980264663696, -0.6997395157814026, 0.0)),
    Vector((0.7081437110900879, -0.7060683369636536, 0.0))
]
holesInfo = None
firstVertIndex = 18
numPolygonVerts = 18
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
