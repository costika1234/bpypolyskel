import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.3070506155490875, -0.6345210671424866, 0.0)),
    Vector((-0.4848167896270752, -1.0352712869644165, 0.0)),
    Vector((0.8969114422798157, -3.81825852394104, 0.0)),
    Vector((1.696859359741211, -3.417508125305176, 0.0)),
    Vector((3.353318929672241, -6.723696231842041, 0.0)),
    Vector((11.037665367126465, -2.8720338344573975, 0.0)),
    Vector((10.011466979980469, -0.8014928698539734, 0.0)),
    Vector((10.811413764953613, -0.4118734300136566, 0.0)),
    Vector((8.791338920593262, 3.629021167755127, 0.0)),
    Vector((7.991391658782959, 3.2282700538635254, 0.0)),
    Vector((6.246049404144287, 6.723700046539307, 0.0)),
    Vector((7.054075717926025, 7.124451160430908, 0.0)),
    Vector((5.042085647583008, 11.1653470993042, 0.0)),
    Vector((4.24213981628418, 10.753463745117188, 0.0)),
    Vector((3.20786452293396, 12.824006080627441, 0.0)),
    Vector((-4.484548568725586, 8.961220741271973, 0.0)),
    Vector((-2.8200149536132812, 5.643898963928223, 0.0)),
    Vector((-3.628042459487915, 5.2431488037109375, 0.0)),
    Vector((-2.238236427307129, 2.4601612091064453, 0.0)),
    Vector((-1.4382890462875366, 2.8609111309051514, 0.0)),
    Vector((-1.0261950492858887, 2.059410572052002, 0.0)),
    Vector((-1.8342227935791016, 1.6475287675857544, 0.0)),
    Vector((-0.7999476194381714, -0.41188207268714905, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((0.3070506155490875, -0.6345210671424866, 16.421672821044922)),
    Vector((-0.4848167896270752, -1.0352712869644165, 16.421672821044922)),
    Vector((0.8969114422798157, -3.81825852394104, 16.421672821044922)),
    Vector((1.696859359741211, -3.417508125305176, 16.421672821044922)),
    Vector((3.353318929672241, -6.723696231842041, 16.421672821044922)),
    Vector((11.037665367126465, -2.8720338344573975, 16.421672821044922)),
    Vector((10.011466979980469, -0.8014928698539734, 16.421672821044922)),
    Vector((10.811413764953613, -0.4118734300136566, 16.421672821044922)),
    Vector((8.791338920593262, 3.629021167755127, 16.421672821044922)),
    Vector((7.991391658782959, 3.2282700538635254, 16.421672821044922)),
    Vector((6.246049404144287, 6.723700046539307, 16.421672821044922)),
    Vector((7.054075717926025, 7.124451160430908, 16.421672821044922)),
    Vector((5.042085647583008, 11.1653470993042, 16.421672821044922)),
    Vector((4.24213981628418, 10.753463745117188, 16.421672821044922)),
    Vector((3.20786452293396, 12.824006080627441, 16.421672821044922)),
    Vector((-4.484548568725586, 8.961220741271973, 16.421672821044922)),
    Vector((-2.8200149536132812, 5.643898963928223, 16.421672821044922)),
    Vector((-3.628042459487915, 5.2431488037109375, 16.421672821044922)),
    Vector((-2.238236427307129, 2.4601612091064453, 16.421672821044922)),
    Vector((-1.4382890462875366, 2.8609111309051514, 16.421672821044922)),
    Vector((-1.0261950492858887, 2.059410572052002, 16.421672821044922)),
    Vector((-1.8342227935791016, 1.6475287675857544, 16.421672821044922)),
    Vector((-0.7999476194381714, -0.41188207268714905, 16.421672821044922)),
    Vector((0.0, 0.0, 16.421672821044922))
]
unitVectors = [
    Vector((-0.8922458291053772, -0.4515499770641327, 0.0)),
    Vector((0.44469746947288513, -0.8956807851791382, 0.0)),
    Vector((0.894079864025116, 0.4479077160358429, 0.0)),
    Vector((0.44794154167175293, -0.894062876701355, 0.0)),
    Vector((0.8939852118492126, 0.4480965733528137, 0.0)),
    Vector((-0.4440702497959137, 0.8959920406341553, 0.0)),
    Vector((0.8990333676338196, 0.4378802180290222, 0.0)),
    Vector((-0.4471476376056671, 0.894460141658783, 0.0)),
    Vector((-0.8940792679786682, -0.4479086101055145, 0.0)),
    Vector((-0.4467276930809021, 0.8946700096130371, 0.0)),
    Vector((0.8958691954612732, 0.44431793689727783, 0.0)),
    Vector((-0.4457140266895294, 0.8951753377914429, 0.0)),
    Vector((-0.8890695571899414, -0.4577721655368805, 0.0)),
    Vector((-0.4468693137168884, 0.894599199295044, 0.0)),
    Vector((-0.8936554789543152, -0.4487537443637848, 0.0)),
    Vector((0.4484789967536926, -0.8937933444976807, 0.0)),
    Vector((-0.8958698511123657, -0.4443165361881256, 0.0)),
    Vector((0.4467794895172119, -0.8946440815925598, 0.0)),
    Vector((0.8940799236297607, 0.44790753722190857, 0.0)),
    Vector((0.4572547674179077, -0.8893358111381531, 0.0)),
    Vector((-0.8909302353858948, -0.4541402757167816, 0.0)),
    Vector((0.4487992823123932, -0.8936326503753662, 0.0)),
    Vector((0.8890705704689026, 0.4577702581882477, 0.0)),
    Vector((0.4355888366699219, -0.9001457095146179, 0.0))
]
holesInfo = None
firstVertIndex = 24
numPolygonVerts = 24
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
