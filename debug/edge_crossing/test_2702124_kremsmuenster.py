import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-6.919851779937744, -2.8943026065826416, 0.0)),
    Vector((0.8035982251167297, -20.98372459411621, 0.0)),
    Vector((23.386157989501953, -11.276617050170898, 0.0)),
    Vector((44.34701156616211, -58.78765106201172, 0.0)),
    Vector((114.7435073852539, -25.546674728393555, 0.0)),
    Vector((89.22089385986328, 32.717491149902344, 0.0)),
    Vector((9.777077674865723, -0.6122488379478455, 0.0)),
    Vector((8.013626098632812, 3.361854314804077, 0.0)),
    Vector((-6.919851779937744, -2.8943026065826416, 5.8783464431762695)),
    Vector((0.8035982251167297, -20.98372459411621, 5.8783464431762695)),
    Vector((23.386157989501953, -11.276617050170898, 5.8783464431762695)),
    Vector((44.34701156616211, -58.78765106201172, 5.8783464431762695)),
    Vector((114.7435073852539, -25.546674728393555, 5.8783464431762695)),
    Vector((89.22089385986328, 32.717491149902344, 5.8783464431762695)),
    Vector((9.777077674865723, -0.6122488379478455, 5.8783464431762695)),
    Vector((8.013626098632812, 3.361854314804077, 5.8783464431762695)),
    Vector((86.71383666992188, 3.0730738639831543, 0.0)),
    Vector((97.01215362548828, -20.248193740844727, 0.0)),
    Vector((51.63136672973633, -40.84288787841797, 0.0)),
    Vector((40.894187927246094, -16.207971572875977, 0.0)),
    Vector((86.71383666992188, 3.0730738639831543, 5.8783464431762695)),
    Vector((97.01215362548828, -20.248193740844727, 5.8783464431762695)),
    Vector((51.63136672973633, -40.84288787841797, 5.8783464431762695)),
    Vector((40.894187927246094, -16.207971572875977, 5.8783464431762695)),
    Vector((13.110516548156738, -3.3952295780181885, 0.0)),
    Vector((18.6910343170166, -1.0686366558074951, 0.0)),
    Vector((21.540847778320312, -7.8702473640441895, 0.0)),
    Vector((15.96032428741455, -10.207975387573242, 0.0)),
    Vector((13.110516548156738, -3.3952295780181885, 5.8783464431762695)),
    Vector((18.6910343170166, -1.0686366558074951, 5.8783464431762695)),
    Vector((21.540847778320312, -7.8702473640441895, 5.8783464431762695)),
    Vector((15.96032428741455, -10.207975387573242, 5.8783464431762695)),
    Vector((22.96942901611328, 0.8683380484580994, 0.0)),
    Vector((29.561872482299805, 3.595695734024048, 0.0)),
    Vector((32.56051254272461, -3.628922939300537, 0.0)),
    Vector((25.968061447143555, -6.367415904998779, 0.0)),
    Vector((22.96942901611328, 0.8683380484580994, 5.8783464431762695)),
    Vector((29.561872482299805, 3.595695734024048, 5.8783464431762695)),
    Vector((32.56051254272461, -3.628922939300537, 5.8783464431762695)),
    Vector((25.968061447143555, -6.367415904998779, 5.8783464431762695)),
    Vector((33.066429138183594, 5.120791912078857, 0.0)),
    Vector((50.51478576660156, 12.122915267944336, 0.0)),
    Vector((53.45392608642578, 4.7869873046875, 0.0)),
    Vector((36.00554656982422, -2.204012870788574, 0.0)),
    Vector((33.066429138183594, 5.120791912078857, 5.8783464431762695)),
    Vector((50.51478576660156, 12.122915267944336, 5.8783464431762695)),
    Vector((53.45392608642578, 4.7869873046875, 5.8783464431762695)),
    Vector((36.00554656982422, -2.204012870788574, 5.8783464431762695)),
    Vector((54.05653762817383, 13.436517715454102, 0.0)),
    Vector((60.34388732910156, 15.963532447814941, 0.0)),
    Vector((63.253273010253906, 8.716665267944336, 0.0)),
    Vector((56.973358154296875, 6.1896467208862305, 0.0)),
    Vector((54.05653762817383, 13.436517715454102, 5.8783464431762695)),
    Vector((60.34388732910156, 15.963532447814941, 5.8783464431762695)),
    Vector((63.253273010253906, 8.716665267944336, 5.8783464431762695)),
    Vector((56.973358154296875, 6.1896467208862305, 5.8783464431762695)),
    Vector((64.68922424316406, 17.822614669799805, 0.0)),
    Vector((71.06584930419922, 20.41643524169922, 0.0)),
    Vector((74.01988983154297, 13.147310256958008, 0.0)),
    Vector((67.65069580078125, 10.553486824035645, 0.0)),
    Vector((64.68922424316406, 17.822614669799805, 5.8783464431762695)),
    Vector((71.06584930419922, 20.41643524169922, 5.8783464431762695)),
    Vector((74.01988983154297, 13.147310256958008, 5.8783464431762695)),
    Vector((67.65069580078125, 10.553486824035645, 5.8783464431762695))
]
unitVectors = [
    Vector((0.3926664888858795, -0.9196809530258179, 0.0)),
    Vector((0.9187192916870117, 0.3949112594127655, 0.0)),
    Vector((0.40364184975624084, -0.9149169921875, 0.0)),
    Vector((0.9042576551437378, 0.4269872307777405, 0.0)),
    Vector((-0.4012415409088135, 0.9159722328186035, 0.0)),
    Vector((-0.9221339821815491, -0.38687068223953247, 0.0)),
    Vector((-0.40559741854667664, 0.9140517711639404, 0.0)),
    Vector((-0.9223324060440063, -0.3863973617553711, 0.0)),
    Vector((0.40395286679267883, -0.9147799015045166, 0.0)),
    Vector((-0.9106152653694153, -0.41325512528419495, 0.0)),
    Vector((-0.3995504379272461, 0.9167112112045288, 0.0)),
    Vector((0.9217177033424377, 0.38786157965660095, 0.0)),
    Vector((0.9229961037635803, 0.3848094940185547, 0.0)),
    Vector((0.3864412009716034, -0.922313928604126, 0.0)),
    Vector((-0.9223411679267883, -0.38637644052505493, 0.0)),
    Vector((-0.3859030604362488, 0.9225392937660217, 0.0)),
    Vector((0.9240440726280212, 0.3822859823703766, 0.0)),
    Vector((0.3833494782447815, -0.923603355884552, 0.0)),
    Vector((-0.9234921932220459, -0.3836170732975006, 0.0)),
    Vector((-0.3828452527523041, 0.9238124489784241, 0.0)),
    Vector((0.9280582666397095, 0.37243497371673584, 0.0)),
    Vector((0.37191087007522583, -0.9282684922218323, 0.0)),
    Vector((-0.9282628297805786, -0.37192481756210327, 0.0)),
    Vector((-0.3723948895931244, 0.9280744791030884, 0.0)),
    Vector((0.9278610348701477, 0.37292635440826416, 0.0)),
    Vector((0.37256482243537903, -0.9280061721801758, 0.0)),
    Vector((-0.9277079105377197, -0.37330684065818787, 0.0)),
    Vector((-0.37338417768478394, 0.9276768565177917, 0.0)),
    Vector((0.9262984991073608, 0.3767905533313751, 0.0)),
    Vector((0.3764818608760834, -0.9264239072799683, 0.0)),
    Vector((-0.9261448979377747, -0.37716802954673767, 0.0)),
    Vector((-0.3772941529750824, 0.9260934591293335, 0.0))
]
holesInfo = [
    (20, 4),
    (28, 4),
    (36, 4),
    (44, 4),
    (52, 4),
    (60, 4)
]
firstVertIndex = 8
numPolygonVerts = 8
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
