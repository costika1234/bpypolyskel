import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-6.884493827819824, -7.013123035430908, 0.0)),
    Vector((2.6068222522735596, -16.542076110839844, 0.0)),
    Vector((6.322926044464111, -12.746077537536621, 0.0)),
    Vector((6.565582752227783, -13.024375915527344, 0.0)),
    Vector((7.134091854095459, -13.313806533813477, 0.0)),
    Vector((7.751131534576416, -13.336069107055664, 0.0)),
    Vector((8.361238479614258, -13.2470121383667, 0.0)),
    Vector((9.040675163269043, -12.890789031982422, 0.0)),
    Vector((9.442790031433105, -12.49003791809082, 0.0)),
    Vector((9.678512573242188, -11.955703735351562, 0.0)),
    Vector((9.7409086227417, -11.354578971862793, 0.0)),
    Vector((9.664644241333008, -10.764585494995117, 0.0)),
    Vector((9.11693286895752, -9.94082260131836, 0.0)),
    Vector((9.574512481689453, -9.495543479919434, 0.0)),
    Vector((6.9676899909973145, -7.001991271972656, 0.0)),
    Vector((8.090838432312012, -5.977850437164307, 0.0)),
    Vector((3.8200929164886475, -1.6920548677444458, 0.0)),
    Vector((2.7801406383514404, -2.7273268699645996, 0.0)),
    Vector((0.0, 0.0, 5.85263204574585)),
    Vector((-6.884493827819824, -7.013123035430908, 5.85263204574585)),
    Vector((2.6068222522735596, -16.542076110839844, 5.85263204574585)),
    Vector((6.322926044464111, -12.746077537536621, 5.85263204574585)),
    Vector((6.565582752227783, -13.024375915527344, 5.85263204574585)),
    Vector((7.134091854095459, -13.313806533813477, 5.85263204574585)),
    Vector((7.751131534576416, -13.336069107055664, 5.85263204574585)),
    Vector((8.361238479614258, -13.2470121383667, 5.85263204574585)),
    Vector((9.040675163269043, -12.890789031982422, 5.85263204574585)),
    Vector((9.442790031433105, -12.49003791809082, 5.85263204574585)),
    Vector((9.678512573242188, -11.955703735351562, 5.85263204574585)),
    Vector((9.7409086227417, -11.354578971862793, 5.85263204574585)),
    Vector((9.664644241333008, -10.764585494995117, 5.85263204574585)),
    Vector((9.11693286895752, -9.94082260131836, 5.85263204574585)),
    Vector((9.574512481689453, -9.495543479919434, 5.85263204574585)),
    Vector((6.9676899909973145, -7.001991271972656, 5.85263204574585)),
    Vector((8.090838432312012, -5.977850437164307, 5.85263204574585)),
    Vector((3.8200929164886475, -1.6920548677444458, 5.85263204574585)),
    Vector((2.7801406383514404, -2.7273268699645996, 5.85263204574585))
]
unitVectors = [
    Vector((-0.7005321383476257, -0.7136207818984985, 0.0)),
    Vector((0.7057061791419983, -0.7085046768188477, 0.0)),
    Vector((0.6995468139648438, 0.7145867943763733, 0.0)),
    Vector((0.6571930646896362, -0.7537223100662231, 0.0)),
    Vector((0.8911581635475159, -0.4536927342414856, 0.0)),
    Vector((0.9993497133255005, -0.03605618327856064, 0.0)),
    Vector((0.9895137548446655, 0.1444387584924698, 0.0)),
    Vector((0.8856558799743652, 0.4643421471118927, 0.0)),
    Vector((0.7083069086074829, 0.7059047222137451, 0.0)),
    Vector((0.4036214053630829, 0.9149261116981506, 0.0)),
    Vector((0.10324414074420929, 0.9946560859680176, 0.0)),
    Vector((-0.12819652259349823, 0.9917488098144531, 0.0)),
    Vector((-0.5536752939224243, 0.8327326774597168, 0.0)),
    Vector((0.7166738510131836, 0.6974084973335266, 0.0)),
    Vector((-0.7226322293281555, 0.6912327408790588, 0.0)),
    Vector((0.7389250993728638, 0.6737874746322632, 0.0)),
    Vector((-0.7058619856834412, 0.7083494663238525, 0.0)),
    Vector((-0.7086997032165527, -0.7055102586746216, 0.0)),
    Vector((-0.7138547897338867, 0.7002938389778137, 0.0))
]
holesInfo = None
firstVertIndex = 19
numPolygonVerts = 19
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
