from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.11268272250890732, 1.4582853317260742, 0.0)),
    Vector((-0.5121942758560181, 2.8609108924865723, 0.0)),
    Vector((-1.1678029298782349, 4.16334867477417, 0.0)),
    Vector((-2.069265127182007, 5.309939384460449, 0.0)),
    Vector((-3.1858489513397217, 6.256155014038086, 0.0)),
    Vector((-4.456091403961182, 6.968599319458008, 0.0)),
    Vector((-5.839016437530518, 7.413877010345459, 0.0)),
    Vector((-7.283404350280762, 7.591987609863281, 0.0)),
    Vector((-8.738036155700684, 7.4695353507995605, 0.0)),
    Vector((-10.141448974609375, 7.079916000366211, 0.0)),
    Vector((-11.442421913146973, 6.411998271942139, 0.0)),
    Vector((-12.589736938476562, 5.51030969619751, 0.0)),
    Vector((-13.532173156738281, 4.40824556350708, 0.0)),
    Vector((-14.249244689941406, 3.128070831298828, 0.0)),
    Vector((-14.699974060058594, 1.747708797454834, 0.0)),
    Vector((-14.87411880493164, 0.3005552589893341, 0.0)),
    Vector((-14.751190185546875, -1.157729983329773, 0.0)),
    Vector((-14.361921310424805, -2.5603551864624023, 0.0)),
    Vector((-13.696067810058594, -3.862792491912842, 0.0)),
    Vector((-12.794605255126953, -4.998250484466553, 0.0)),
    Vector((-11.688265800476074, -5.944465160369873, 0.0)),
    Vector((-10.418024063110352, -6.656908988952637, 0.0)),
    Vector((-9.024856567382812, -7.113317966461182, 0.0)),
    Vector((-7.580469608306885, -7.280296802520752, 0.0)),
    Vector((-6.1258392333984375, -7.168976306915283, 0.0)),
    Vector((-4.722427845001221, -6.77935791015625, 0.0)),
    Vector((-3.4214556217193604, -6.111440658569336, 0.0)),
    Vector((-2.2843852043151855, -5.209752559661865, 0.0)),
    Vector((-1.3317043781280518, -4.096557140350342, 0.0)),
    Vector((-0.6248767375946045, -2.827515125274658, 0.0)),
    Vector((-0.17414599657058716, -1.4471533298492432, 0.0)),
    Vector((0.0, 0.0, 11.0)),
    Vector((-0.11268272250890732, 1.4582853317260742, 11.0)),
    Vector((-0.5121942758560181, 2.8609108924865723, 11.0)),
    Vector((-1.1678029298782349, 4.16334867477417, 11.0)),
    Vector((-2.069265127182007, 5.309939384460449, 11.0)),
    Vector((-3.1858489513397217, 6.256155014038086, 11.0)),
    Vector((-4.456091403961182, 6.968599319458008, 11.0)),
    Vector((-5.839016437530518, 7.413877010345459, 11.0)),
    Vector((-7.283404350280762, 7.591987609863281, 11.0)),
    Vector((-8.738036155700684, 7.4695353507995605, 11.0)),
    Vector((-10.141448974609375, 7.079916000366211, 11.0)),
    Vector((-11.442421913146973, 6.411998271942139, 11.0)),
    Vector((-12.589736938476562, 5.51030969619751, 11.0)),
    Vector((-13.532173156738281, 4.40824556350708, 11.0)),
    Vector((-14.249244689941406, 3.128070831298828, 11.0)),
    Vector((-14.699974060058594, 1.747708797454834, 11.0)),
    Vector((-14.87411880493164, 0.3005552589893341, 11.0)),
    Vector((-14.751190185546875, -1.157729983329773, 11.0)),
    Vector((-14.361921310424805, -2.5603551864624023, 11.0)),
    Vector((-13.696067810058594, -3.862792491912842, 11.0)),
    Vector((-12.794605255126953, -4.998250484466553, 11.0)),
    Vector((-11.688265800476074, -5.944465160369873, 11.0)),
    Vector((-10.418024063110352, -6.656908988952637, 11.0)),
    Vector((-9.024856567382812, -7.113317966461182, 11.0)),
    Vector((-7.580469608306885, -7.280296802520752, 11.0)),
    Vector((-6.1258392333984375, -7.168976306915283, 11.0)),
    Vector((-4.722427845001221, -6.77935791015625, 11.0)),
    Vector((-3.4214556217193604, -6.111440658569336, 11.0)),
    Vector((-2.2843852043151855, -5.209752559661865, 11.0)),
    Vector((-1.3317043781280518, -4.096557140350342, 11.0)),
    Vector((-0.6248767375946045, -2.827515125274658, 11.0)),
    Vector((-0.17414599657058716, -1.4471533298492432, 11.0))
]
unitVectors = [
    Vector((-0.07704103738069534, 0.9970278739929199, 0.0)),
    Vector((-0.27393585443496704, 0.9617480039596558, 0.0)),
    Vector((-0.44962042570114136, 0.8932197690010071, 0.0)),
    Vector((-0.6180629134178162, 0.786128580570221, 0.0)),
    Vector((-0.7629097104072571, 0.6465050578117371, 0.0)),
    Vector((-0.8721813559532166, 0.489182710647583, 0.0)),
    Vector((-0.9518747925758362, 0.3064870536327362, 0.0)),
    Vector((-0.9924826622009277, 0.1223851814866066, 0.0)),
    Vector((-0.9964755177497864, -0.08388423174619675, 0.0)),
    Vector((-0.9635564088821411, -0.2675051987171173, 0.0)),
    Vector((-0.8896085023880005, -0.45672380924224854, 0.0)),
    Vector((-0.7862429022789001, -0.6179176568984985, 0.0)),
    Vector((-0.6499202251434326, -0.7600023746490479, 0.0)),
    Vector((-0.4886934459209442, -0.8724555373191833, 0.0)),
    Vector((-0.3104011118412018, -0.9506056904792786, 0.0)),
    Vector((-0.11947412043809891, -0.9928373098373413, 0.0)),
    Vector((0.08399877697229385, -0.9964658617973328, 0.0)),
    Vector((0.2674211263656616, -0.9635797142982483, 0.0)),
    Vector((0.45519959926605225, -0.8903894424438477, 0.0)),
    Vector((0.6217870712280273, -0.7831863164901733, 0.0)),
    Vector((0.7599608898162842, -0.6499688029289246, 0.0)),
    Vector((0.8721813559532166, -0.48918265104293823, 0.0)),
    Vector((0.9503037333488464, -0.31132447719573975, 0.0)),
    Vector((0.9933840036392212, -0.11484048515558243, 0.0)),
    Vector((0.9970844984054565, 0.07630525529384613, 0.0)),
    Vector((0.9635565280914307, 0.26750484108924866, 0.0)),
    Vector((0.8896085619926453, 0.45672374963760376, 0.0)),
    Vector((0.7835400700569153, 0.6213412284851074, 0.0)),
    Vector((0.6502062678337097, 0.7597577571868896, 0.0)),
    Vector((0.48659178614616394, 0.8736294507980347, 0.0)),
    Vector((0.3104020059108734, 0.9506053924560547, 0.0)),
    Vector((0.11947499215602875, 0.9928372502326965, 0.0))
]
holesInfo = None
firstVertIndex = 32
numPolygonVerts = 32

bpypolyskel.debugOutputs["skeleton"] = 1


faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


# the number of vertices in a face
for face in faces:
    assert len(face) >= 3


# duplications of vertex indices
for face in faces:
    assert len(face) == len(set(face))


# edge crossing
assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
