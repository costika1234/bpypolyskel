import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-15.902865409851074, 18.77961540222168, 0.0)),
    Vector((-41.909053802490234, -3.5843679904937744, 0.0)),
    Vector((-26.039827346801758, -22.375171661376953, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-15.902865409851074, 18.77961540222168, 18.587318420410156)),
    Vector((-41.909053802490234, -3.5843679904937744, 18.587318420410156)),
    Vector((-26.039827346801758, -22.375171661376953, 18.587318420410156)),
    Vector((0.0, 0.0, 18.587318420410156)),
    Vector((-9.64932632446289, 4.4639177322387695, 0.0)),
    Vector((-12.271795272827148, 2.248663902282715, 0.0)),
    Vector((-15.600300788879395, 6.178248405456543, 0.0)),
    Vector((-12.977832794189453, 8.404632568359375, 0.0)),
    Vector((-9.64932632446289, 4.4639177322387695, 18.587318420410156)),
    Vector((-12.271795272827148, 2.248663902282715, 18.587318420410156)),
    Vector((-15.600300788879395, 6.178248405456543, 18.587318420410156)),
    Vector((-12.977832794189453, 8.404632568359375, 18.587318420410156)),
    Vector((-31.183855056762695, -9.06134033203125, 0.0)),
    Vector((-34.075279235839844, -5.410048007965088, 0.0)),
    Vector((-31.22585678100586, -3.161407232284546, 0.0)),
    Vector((-28.33443260192871, -6.8126983642578125, 0.0)),
    Vector((-31.183855056762695, -9.06134033203125, 18.587318420410156)),
    Vector((-34.075279235839844, -5.410048007965088, 18.587318420410156)),
    Vector((-31.22585678100586, -3.161407232284546, 18.587318420410156)),
    Vector((-28.33443260192871, -6.8126983642578125, 18.587318420410156)),
    Vector((-29.662494659423828, -10.720006942749023, 0.0)),
    Vector((-27.073637008666992, -8.44909954071045, 0.0)),
    Vector((-23.8712100982666, -12.089258193969727, 0.0)),
    Vector((-26.460067749023438, -14.360166549682617, 0.0)),
    Vector((-29.662494659423828, -10.720006942749023, 18.587318420410156)),
    Vector((-27.073637008666992, -8.44909954071045, 18.587318420410156)),
    Vector((-23.8712100982666, -12.089258193969727, 18.587318420410156)),
    Vector((-26.460067749023438, -14.360166549682617, 18.587318420410156)),
    Vector((-14.608491897583008, -3.9852232933044434, 0.0)),
    Vector((-17.315019607543945, -6.367454528808594, 0.0)),
    Vector((-19.945884704589844, -3.372953414916992, 0.0)),
    Vector((-23.232383728027344, -6.2672505378723145, 0.0)),
    Vector((-25.56065559387207, -3.6289708614349365, 0.0)),
    Vector((-22.27415657043457, -0.734674870967865, 0.0)),
    Vector((-25.05631446838379, 2.415675640106201, 0.0)),
    Vector((-22.366600036621094, 4.77564001083374, 0.0)),
    Vector((-14.608491897583008, -3.9852232933044434, 18.587318420410156)),
    Vector((-17.315019607543945, -6.367454528808594, 18.587318420410156)),
    Vector((-19.945884704589844, -3.372953414916992, 18.587318420410156)),
    Vector((-23.232383728027344, -6.2672505378723145, 18.587318420410156)),
    Vector((-25.56065559387207, -3.6289708614349365, 18.587318420410156)),
    Vector((-22.27415657043457, -0.734674870967865, 18.587318420410156)),
    Vector((-25.05631446838379, 2.415675640106201, 18.587318420410156)),
    Vector((-22.366600036621094, 4.77564001083374, 18.587318420410156))
]
unitVectors = [
    Vector((-0.758204460144043, -0.652016818523407, 0.0)),
    Vector((0.6452149152755737, -0.7640011310577393, 0.0)),
    Vector((0.7584598660469055, 0.6517197489738464, 0.0)),
    Vector((-0.6462363600730896, 0.7631373405456543, 0.0)),
    Vector((-0.7639259099960327, -0.6453040242195129, 0.0)),
    Vector((-0.6463350653648376, 0.7630536556243896, 0.0)),
    Vector((0.7623284459114075, 0.6471903324127197, 0.0)),
    Vector((0.6452704071998596, -0.763954222202301, 0.0)),
    Vector((-0.620810866355896, 0.7839603424072266, 0.0)),
    Vector((0.7850037217140198, 0.619490921497345, 0.0)),
    Vector((0.6208109855651855, -0.7839602828025818, 0.0)),
    Vector((-0.7850035429000854, -0.6194911599159241, 0.0)),
    Vector((0.7517620325088501, 0.6594344973564148, 0.0)),
    Vector((0.6605218052864075, -0.7508068680763245, 0.0)),
    Vector((-0.7517619132995605, -0.6594346165657043, 0.0)),
    Vector((-0.6605217456817627, 0.750806987285614, 0.0)),
    Vector((-0.7506465315818787, -0.6607039570808411, 0.0)),
    Vector((-0.6600202918052673, 0.751247763633728, 0.0)),
    Vector((-0.7504668235778809, -0.6609081029891968, 0.0)),
    Vector((-0.6616820693016052, 0.7497845888137817, 0.0)),
    Vector((0.7504668831825256, 0.6609079241752625, 0.0)),
    Vector((-0.6619476079940796, 0.7495501637458801, 0.0)),
    Vector((0.7516806721687317, 0.6595271229743958, 0.0)),
    Vector((0.662962794303894, -0.7486523985862732, 0.0))
]
holesInfo = [
    (12, 4),
    (20, 4),
    (28, 4),
    (40, 8)
]
firstVertIndex = 4
numPolygonVerts = 4
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
