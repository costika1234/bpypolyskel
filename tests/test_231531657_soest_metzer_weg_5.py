import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-4.934004783630371, -3.0056238174438477, 0.0)),
    Vector((-4.165878772735596, -4.274666786193848, 0.0)),
    Vector((-4.532642364501953, -4.797868251800537, 0.0)),
    Vector((-4.989367485046387, -5.677291393280029, 0.0)),
    Vector((-5.300771713256836, -6.501055717468262, 0.0)),
    Vector((-5.515294551849365, -7.347083568572998, 0.0)),
    Vector((-5.646777629852295, -8.916687965393066, 0.0)),
    Vector((-5.536057472229004, -9.996487617492676, 0.0)),
    Vector((-5.356136798858643, -10.809120178222656, 0.0)),
    Vector((-5.0239739418029785, -11.755335807800293, 0.0)),
    Vector((-4.504969120025635, -12.72381591796875, 0.0)),
    Vector((-4.020564556121826, -13.402865409851074, 0.0)),
    Vector((-3.46695876121521, -14.026254653930664, 0.0)),
    Vector((-2.9617934226989746, -14.482665061950684, 0.0)),
    Vector((-2.2144253253936768, -15.028130531311035, 0.0)),
    Vector((-1.58469820022583, -15.384353637695312, 0.0)),
    Vector((1.4393759965896606, -13.536449432373047, 0.0)),
    Vector((2.733431577682495, -15.673783302307129, 0.0)),
    Vector((9.21061897277832, -11.72193431854248, 0.0)),
    Vector((7.134592056274414, -8.25990104675293, 0.0)),
    Vector((5.570657253265381, -9.21725082397461, 0.0)),
    Vector((0.0, 0.0, 6.369760513305664)),
    Vector((-4.934004783630371, -3.0056238174438477, 6.369760513305664)),
    Vector((-4.165878772735596, -4.274666786193848, 6.369760513305664)),
    Vector((-4.532642364501953, -4.797868251800537, 6.369760513305664)),
    Vector((-4.989367485046387, -5.677291393280029, 6.369760513305664)),
    Vector((-5.300771713256836, -6.501055717468262, 6.369760513305664)),
    Vector((-5.515294551849365, -7.347083568572998, 6.369760513305664)),
    Vector((-5.646777629852295, -8.916687965393066, 6.369760513305664)),
    Vector((-5.536057472229004, -9.996487617492676, 6.369760513305664)),
    Vector((-5.356136798858643, -10.809120178222656, 6.369760513305664)),
    Vector((-5.0239739418029785, -11.755335807800293, 6.369760513305664)),
    Vector((-4.504969120025635, -12.72381591796875, 6.369760513305664)),
    Vector((-4.020564556121826, -13.402865409851074, 6.369760513305664)),
    Vector((-3.46695876121521, -14.026254653930664, 6.369760513305664)),
    Vector((-2.9617934226989746, -14.482665061950684, 6.369760513305664)),
    Vector((-2.2144253253936768, -15.028130531311035, 6.369760513305664)),
    Vector((-1.58469820022583, -15.384353637695312, 6.369760513305664)),
    Vector((1.4393759965896606, -13.536449432373047, 6.369760513305664)),
    Vector((2.733431577682495, -15.673783302307129, 6.369760513305664)),
    Vector((9.21061897277832, -11.72193431854248, 6.369760513305664)),
    Vector((7.134592056274414, -8.25990104675293, 6.369760513305664)),
    Vector((5.570657253265381, -9.21725082397461, 6.369760513305664)),
]
unitVectors = [
    Vector((-0.8540204763412476, -0.520239531993866, 0.0)),
    Vector((0.5178130865097046, -0.8554938435554504, 0.0)),
    Vector((-0.5740110874176025, -0.8188474774360657, 0.0)),
    Vector((-0.46089601516723633, -0.8874541521072388, 0.0)),
    Vector((-0.35360363125801086, -0.935395359992981, 0.0)),
    Vector((-0.2457864135503769, -0.9693240523338318, 0.0)),
    Vector((-0.08347593247890472, -0.9965099096298218, 0.0)),
    Vector((0.10200285166501999, -0.9947839975357056, 0.0)),
    Vector((0.21616975963115692, -0.976355791091919, 0.0)),
    Vector((0.33122745156288147, -0.9435509443283081, 0.0)),
    Vector((0.4723460078239441, -0.8814132213592529, 0.0)),
    Vector((0.580737292766571, -0.8140909671783447, 0.0)),
    Vector((0.6640166640281677, -0.7477176785469055, 0.0)),
    Vector((0.7420061826705933, -0.6703930497169495, 0.0)),
    Vector((0.8077453374862671, -0.5895317196846008, 0.0)),
    Vector((0.8703908920288086, -0.4923614263534546, 0.0)),
    Vector((0.8532995581626892, 0.5214210152626038, 0.0)),
    Vector((0.5179216861724854, -0.8554280996322632, 0.0)),
    Vector((0.8536587953567505, 0.5208326578140259, 0.0)),
    Vector((-0.5142784118652344, 0.857623279094696, 0.0)),
    Vector((-0.8528904914855957, -0.5220898389816284, 0.0)),
    Vector((-0.5172449946403503, 0.8558374047279358, 0.0)),
]
holesInfo = None
firstVertIndex = 22
numPolygonVerts = 22
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
