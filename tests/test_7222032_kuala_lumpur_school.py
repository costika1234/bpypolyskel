import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.06669734418392181, 11.18760871887207, 0.0)),
    Vector((-2.8791019916534424, 11.19874095916748, 0.0)),
    Vector((-2.8568694591522217, 14.527194023132324, 0.0)),
    Vector((-100.9575424194336, 15.094965934753418, 0.0)),
    Vector((-101.0464859008789, 0.41192469000816345, 0.0)),
    Vector((-79.40319061279297, 0.28945696353912354, 0.0)),
    Vector((-79.71448516845703, -53.555782318115234, 0.0)),
    Vector((-98.00067901611328, -53.4444465637207, 0.0)),
    Vector((-98.10073852539062, -70.587646484375, 0.0)),
    Vector((-58.08230972290039, -70.82144927978516, 0.0)),
    Vector((-58.21571350097656, -95.11135864257812, 0.0)),
    Vector((-45.74330139160156, -95.17815399169922, 0.0)),
    Vector((-45.68771743774414, -87.00730895996094, 0.0)),
    Vector((-33.571022033691406, -87.07410430908203, 0.0)),
    Vector((-33.48208999633789, -71.75653839111328, 0.0)),
    Vector((-9.39321517944336, -71.90126037597656, 0.0)),
    Vector((-9.382099151611328, -69.02921295166016, 0.0)),
    Vector((-6.569692611694336, -69.04034423828125, 0.0)),
    Vector((-6.491878032684326, -55.61521911621094, 0.0)),
    Vector((-21.33204460144043, -55.526161193847656, 0.0)),
    Vector((-20.99854850769043, 0.12245327979326248, 0.0)),
    Vector((0.0, 0.0, 14.865955352783203)),
    Vector((0.06669734418392181, 11.18760871887207, 14.865955352783203)),
    Vector((-2.8791019916534424, 11.19874095916748, 14.865955352783203)),
    Vector((-2.8568694591522217, 14.527194023132324, 14.865955352783203)),
    Vector((-100.9575424194336, 15.094965934753418, 14.865955352783203)),
    Vector((-101.0464859008789, 0.41192469000816345, 14.865955352783203)),
    Vector((-79.40319061279297, 0.28945696353912354, 14.865955352783203)),
    Vector((-79.71448516845703, -53.555782318115234, 14.865955352783203)),
    Vector((-98.00067901611328, -53.4444465637207, 14.865955352783203)),
    Vector((-98.10073852539062, -70.587646484375, 14.865955352783203)),
    Vector((-58.08230972290039, -70.82144927978516, 14.865955352783203)),
    Vector((-58.21571350097656, -95.11135864257812, 14.865955352783203)),
    Vector((-45.74330139160156, -95.17815399169922, 14.865955352783203)),
    Vector((-45.68771743774414, -87.00730895996094, 14.865955352783203)),
    Vector((-33.571022033691406, -87.07410430908203, 14.865955352783203)),
    Vector((-33.48208999633789, -71.75653839111328, 14.865955352783203)),
    Vector((-9.39321517944336, -71.90126037597656, 14.865955352783203)),
    Vector((-9.382099151611328, -69.02921295166016, 14.865955352783203)),
    Vector((-6.569692611694336, -69.04034423828125, 14.865955352783203)),
    Vector((-6.491878032684326, -55.61521911621094, 14.865955352783203)),
    Vector((-21.33204460144043, -55.526161193847656, 14.865955352783203)),
    Vector((-20.99854850769043, 0.12245327979326248, 14.865955352783203)),
    Vector((-67.275390625, -1.05751633644104, 0.0)),
    Vector((-57.259674072265625, -1.124313235282898, 0.0)),
    Vector((-57.293025970458984, -6.601232051849365, 0.0)),
    Vector((-45.543174743652344, -6.6791605949401855, 0.0)),
    Vector((-45.509822845458984, -0.7458319664001465, 0.0)),
    Vector((-33.42648696899414, -0.8237595558166504, 0.0)),
    Vector((-34.004547119140625, -56.57255935668945, 0.0)),
    Vector((-67.7756576538086, -56.294246673583984, 0.0)),
    Vector((-67.275390625, -1.05751633644104, 14.865955352783203)),
    Vector((-57.259674072265625, -1.124313235282898, 14.865955352783203)),
    Vector((-57.293025970458984, -6.601232051849365, 14.865955352783203)),
    Vector((-45.543174743652344, -6.6791605949401855, 14.865955352783203)),
    Vector((-45.509822845458984, -0.7458319664001465, 14.865955352783203)),
    Vector((-33.42648696899414, -0.8237595558166504, 14.865955352783203)),
    Vector((-34.004547119140625, -56.57255935668945, 14.865955352783203)),
    Vector((-67.7756576538086, -56.294246673583984, 14.865955352783203))
]
unitVectors = [
    Vector((0.005961609538644552, 0.9999821782112122, 0.0)),
    Vector((-0.999992847442627, 0.0037789950147271156, 0.0)),
    Vector((0.006679390091449022, 0.9999776482582092, 0.0)),
    Vector((-0.9999833106994629, 0.005787549074739218, 0.0)),
    Vector((-0.006057454273104668, -0.999981701374054, 0.0)),
    Vector((0.9999839067459106, -0.0056583695113658905, 0.0)),
    Vector((-0.005781186278909445, -0.9999833106994629, 0.0)),
    Vector((-0.9999814033508301, 0.006088401190936565, 0.0)),
    Vector((-0.005836588330566883, -0.9999829530715942, 0.0)),
    Vector((0.9999829530715942, -0.005842278245836496, 0.0)),
    Vector((-0.005492065101861954, -0.9999849200248718, 0.0)),
    Vector((0.9999856352806091, -0.005355370696634054, 0.0)),
    Vector((0.0068025607615709305, 0.9999768733978271, 0.0)),
    Vector((0.9999848008155823, -0.005512586794793606, 0.0)),
    Vector((0.005805788096040487, 0.9999831914901733, 0.0)),
    Vector((0.9999819993972778, -0.0060077267698943615, 0.0)),
    Vector((0.0038703903555870056, 0.9999925494194031, 0.0)),
    Vector((0.9999921321868896, -0.003957890905439854, 0.0)),
    Vector((0.00579609302803874, 0.9999831914901733, 0.0)),
    Vector((-0.9999819993972778, 0.0060010324232280254, 0.0)),
    Vector((0.005992783699184656, 0.9999819993972778, 0.0)),
    Vector((0.999983012676239, -0.0058314125053584576, 0.0)),
    Vector((0.9999778270721436, -0.006669060327112675, 0.0)),
    Vector((-0.006089423783123493, -0.9999814033508301, 0.0)),
    Vector((0.9999780058860779, -0.006632154807448387, 0.0)),
    Vector((0.005621022544801235, 0.9999842643737793, 0.0)),
    Vector((0.9999792575836182, -0.006449044682085514, 0.0)),
    Vector((-0.010368458926677704, -0.9999462962150574, 0.0)),
    Vector((-0.999966025352478, 0.008240866474807262, 0.0)),
    Vector((0.009056411683559418, 0.9999590516090393, 0.0))
]
holesInfo = [
    (52, 8)
]
firstVertIndex = 22
numPolygonVerts = 22
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
