import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-7.996801853179932, 12.556845664978027, 0.0)),
    Vector((-107.0293960571289, -50.81603240966797, 0.0)),
    Vector((-113.52625274658203, -56.203731536865234, 0.0)),
    Vector((-119.08787536621094, -62.70463943481445, 0.0)),
    Vector((-123.85237884521484, -71.17591857910156, 0.0)),
    Vector((-125.2522964477539, -75.76224517822266, 0.0)),
    Vector((-125.98685455322266, -80.81613159179688, 0.0)),
    Vector((-124.96411895751953, -95.5993881225586, 0.0)),
    Vector((-123.72139739990234, -100.47521209716797, 0.0)),
    Vector((-121.74425506591797, -105.5291748046875, 0.0)),
    Vector((-119.10173034667969, -110.43843841552734, 0.0)),
    Vector((-118.3045654296875, -111.36241149902344, 0.0)),
    Vector((-105.27938079833984, -103.44792938232422, 0.0)),
    Vector((-107.47628021240234, -100.07489776611328, 0.0)),
    Vector((-109.2337646484375, -96.04508972167969, 0.0)),
    Vector((-110.18778228759766, -92.1600112915039, 0.0)),
    Vector((-110.48272705078125, -89.15438079833984, 0.0)),
    Vector((-110.4826431274414, -85.85932159423828, 0.0)),
    Vector((-110.18753814697266, -82.34163665771484, 0.0)),
    Vector((-109.4153823852539, -79.34716033935547, 0.0)),
    Vector((-108.23522186279297, -76.5196762084961, 0.0)),
    Vector((-106.80399322509766, -73.99275207519531, 0.0)),
    Vector((-104.82666778564453, -71.76641082763672, 0.0)),
    Vector((-102.55435180664062, -70.675537109375, 0.0)),
    Vector((-100.28205108642578, -70.04106903076172, 0.0)),
    Vector((-97.19374084472656, -70.00774383544922, 0.0)),
    Vector((-94.80847930908203, -70.66458129882812, 0.0)),
    Vector((-93.08232116699219, -72.00045013427734, 0.0)),
    Vector((-37.91304397583008, -35.82244873046875, 0.0)),
    Vector((-39.07427215576172, -34.007930755615234, 0.0)),
    Vector((-39.413211822509766, -31.7592716217041, 0.0)),
    Vector((-39.281375885009766, -29.78891944885254, 0.0)),
    Vector((-38.94868087768555, -28.308372497558594, 0.0)),
    Vector((-38.314697265625, -26.96141242980957, 0.0)),
    Vector((-37.429630279541016, -25.61445426940918, 0.0)),
    Vector((-36.29348373413086, -24.31202507019043, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-7.996801853179932, 12.556845664978027, 10.600000381469727)),
    Vector((-107.0293960571289, -50.81603240966797, 10.600000381469727)),
    Vector((-113.52625274658203, -56.203731536865234, 10.600000381469727)),
    Vector((-119.08787536621094, -62.70463943481445, 10.600000381469727)),
    Vector((-123.85237884521484, -71.17591857910156, 10.600000381469727)),
    Vector((-125.2522964477539, -75.76224517822266, 10.600000381469727)),
    Vector((-125.98685455322266, -80.81613159179688, 10.600000381469727)),
    Vector((-124.96411895751953, -95.5993881225586, 10.600000381469727)),
    Vector((-123.72139739990234, -100.47521209716797, 10.600000381469727)),
    Vector((-121.74425506591797, -105.5291748046875, 10.600000381469727)),
    Vector((-119.10173034667969, -110.43843841552734, 10.600000381469727)),
    Vector((-118.3045654296875, -111.36241149902344, 10.600000381469727)),
    Vector((-105.27938079833984, -103.44792938232422, 10.600000381469727)),
    Vector((-107.47628021240234, -100.07489776611328, 10.600000381469727)),
    Vector((-109.2337646484375, -96.04508972167969, 10.600000381469727)),
    Vector((-110.18778228759766, -92.1600112915039, 10.600000381469727)),
    Vector((-110.48272705078125, -89.15438079833984, 10.600000381469727)),
    Vector((-110.4826431274414, -85.85932159423828, 10.600000381469727)),
    Vector((-110.18753814697266, -82.34163665771484, 10.600000381469727)),
    Vector((-109.4153823852539, -79.34716033935547, 10.600000381469727)),
    Vector((-108.23522186279297, -76.5196762084961, 10.600000381469727)),
    Vector((-106.80399322509766, -73.99275207519531, 10.600000381469727)),
    Vector((-104.82666778564453, -71.76641082763672, 10.600000381469727)),
    Vector((-102.55435180664062, -70.675537109375, 10.600000381469727)),
    Vector((-100.28205108642578, -70.04106903076172, 10.600000381469727)),
    Vector((-97.19374084472656, -70.00774383544922, 10.600000381469727)),
    Vector((-94.80847930908203, -70.66458129882812, 10.600000381469727)),
    Vector((-93.08232116699219, -72.00045013427734, 10.600000381469727)),
    Vector((-37.91304397583008, -35.82244873046875, 10.600000381469727)),
    Vector((-39.07427215576172, -34.007930755615234, 10.600000381469727)),
    Vector((-39.413211822509766, -31.7592716217041, 10.600000381469727)),
    Vector((-39.281375885009766, -29.78891944885254, 10.600000381469727)),
    Vector((-38.94868087768555, -28.308372497558594, 10.600000381469727)),
    Vector((-38.314697265625, -26.96141242980957, 10.600000381469727)),
    Vector((-37.429630279541016, -25.61445426940918, 10.600000381469727)),
    Vector((-36.29348373413086, -24.31202507019043, 10.600000381469727)),
    Vector((0.0, 0.0, 10.600000381469727)),
]
unitVectors = [
    Vector((-0.842302143573761, -0.5390055179595947, 0.0)),
    Vector((-0.7697544097900391, -0.6383402347564697, 0.0)),
    Vector((-0.6500779390335083, -0.7598675489425659, 0.0)),
    Vector((-0.490215003490448, -0.8716014623641968, 0.0)),
    Vector((-0.2919400632381439, -0.9564366340637207, 0.0)),
    Vector((-0.14383387565612793, -0.9896019101142883, 0.0)),
    Vector((0.06901705265045166, -0.997615396976471, 0.0)),
    Vector((0.24697841703891754, -0.9690210223197937, 0.0)),
    Vector((0.36432018876075745, -0.9312736988067627, 0.0)),
    Vector((0.4739711880683899, -0.8805403113365173, 0.0)),
    Vector((0.6532387733459473, -0.7571520209312439, 0.0)),
    Vector((0.8546029925346375, 0.5192817449569702, 0.0)),
    Vector((-0.5457615852355957, 0.837940514087677, 0.0)),
    Vector((-0.3997576832771301, 0.9166207909584045, 0.0)),
    Vector((-0.23847472667694092, 0.9711487293243408, 0.0)),
    Vector((-0.09766165167093277, 0.9952196478843689, 0.0)),
    Vector((2.54694477916928e-05, 1.0, 0.0)),
    Vector((0.08359815925359726, 0.9964995980262756, 0.0)),
    Vector((0.24969236552715302, 0.9683251976966858, 0.0)),
    Vector((0.3851832449436188, 0.9228401184082031, 0.0)),
    Vector((0.49283140897750854, 0.8701248168945312, 0.0)),
    Vector((0.6640552282333374, 0.7476834654808044, 0.0)),
    Vector((0.901498019695282, 0.4327833354473114, 0.0)),
    Vector((0.9631592631340027, 0.2689317464828491, 0.0)),
    Vector((0.9999418258666992, 0.010790126398205757, 0.0)),
    Vector((0.9641132950782776, -0.2654910981655121, 0.0)),
    Vector((0.7908371686935425, -0.612026572227478, 0.0)),
    Vector((0.836234450340271, 0.5483720898628235, 0.0)),
    Vector((-0.5390328764915466, 0.8422847986221313, 0.0)),
    Vector((-0.14904606342315674, 0.9888302683830261, 0.0)),
    Vector((0.06676056236028671, 0.9977690577507019, 0.0)),
    Vector((0.21924370527267456, 0.9756701588630676, 0.0)),
    Vector((0.42586302757263184, 0.9047876000404358, 0.0)),
    Vector((0.5491445660591125, 0.8357274532318115, 0.0)),
    Vector((0.6573638319969177, 0.7535734176635742, 0.0)),
    Vector((0.8308188319206238, 0.5565431118011475, 0.0)),
    Vector((-0.5371662378311157, 0.8434763550758362, 0.0)),
]
holesInfo = None
firstVertIndex = 37
numPolygonVerts = 37
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
