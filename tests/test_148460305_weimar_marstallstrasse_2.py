import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((10.66657543182373, -45.88588333129883, 0.0)),
    Vector((10.0007905960083, -46.030601501464844, 0.0)),
    Vector((13.056425094604492, -58.687618255615234, 0.0)),
    Vector((13.820326805114746, -58.498374938964844, 0.0)),
    Vector((24.998756408691406, -104.58460235595703, 0.0)),
    Vector((24.424072265625, -104.72931671142578, 0.0)),
    Vector((27.584901809692383, -117.34180450439453, 0.0)),
    Vector((36.31730270385742, -115.13761901855469, 0.0)),
    Vector((36.17012023925781, -114.4697036743164, 0.0)),
    Vector((53.85215759277344, -110.20601654052734, 0.0)),
    Vector((53.98532485961914, -110.84053802490234, 0.0)),
    Vector((54.461891174316406, -110.79600524902344, 0.0)),
    Vector((54.65813446044922, -111.60863494873047, 0.0)),
    Vector((56.31910705566406, -111.218994140625, 0.0)),
    Vector((56.08782196044922, -110.31731414794922, 0.0)),
    Vector((57.09001159667969, -110.05013275146484, 0.0)),
    Vector((56.9498405456543, -109.46014404296875, 0.0)),
    Vector((61.39311981201172, -108.40255737304688, 0.0)),
    Vector((61.533294677734375, -108.98141479492188, 0.0)),
    Vector((62.486427307128906, -108.73650360107422, 0.0)),
    Vector((62.773780822753906, -109.69384765625, 0.0)),
    Vector((64.44876861572266, -109.31533813476562, 0.0)),
    Vector((64.2034683227539, -108.33573150634766, 0.0)),
    Vector((64.70105743408203, -108.22440338134766, 0.0)),
    Vector((64.51882934570312, -107.56761932373047, 0.0)),
    Vector((82.29894256591797, -103.35948944091797, 0.0)),
    Vector((82.48817443847656, -103.93834686279297, 0.0)),
    Vector((91.25556945800781, -101.74520874023438, 0.0)),
    Vector((88.1646728515625, -89.06597137451172, 0.0)),
    Vector((61.75040054321289, -96.2353286743164, 0.0)),
    Vector((61.5751838684082, -95.378173828125, 0.0)),
    Vector((50.95058059692383, -97.93863677978516, 0.0)),
    Vector((51.11878967285156, -98.80693054199219, 0.0)),
    Vector((37.207271575927734, -102.21342468261719, 0.0)),
    Vector((25.77643585205078, -55.470436096191406, 0.0)),
    Vector((26.35111427307129, -55.33685302734375, 0.0)),
    Vector((23.309465408325195, -42.74663162231445, 0.0)),
    Vector((22.657699584960938, -42.880218505859375, 0.0)),
    Vector((15.018598556518555, -8.894405364990234, 0.0)),
    Vector((31.901355743408203, -4.753243923187256, 0.0)),
    Vector((31.641986846923828, 6.067008972167969, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((10.66657543182373, -45.88588333129883, 5.668273448944092)),
    Vector((10.0007905960083, -46.030601501464844, 5.668273448944092)),
    Vector((13.056425094604492, -58.687618255615234, 5.668273448944092)),
    Vector((13.820326805114746, -58.498374938964844, 5.668273448944092)),
    Vector((24.998756408691406, -104.58460235595703, 5.668273448944092)),
    Vector((24.424072265625, -104.72931671142578, 5.668273448944092)),
    Vector((27.584901809692383, -117.34180450439453, 5.668273448944092)),
    Vector((36.31730270385742, -115.13761901855469, 5.668273448944092)),
    Vector((36.17012023925781, -114.4697036743164, 5.668273448944092)),
    Vector((53.85215759277344, -110.20601654052734, 5.668273448944092)),
    Vector((53.98532485961914, -110.84053802490234, 5.668273448944092)),
    Vector((54.461891174316406, -110.79600524902344, 5.668273448944092)),
    Vector((54.65813446044922, -111.60863494873047, 5.668273448944092)),
    Vector((56.31910705566406, -111.218994140625, 5.668273448944092)),
    Vector((56.08782196044922, -110.31731414794922, 5.668273448944092)),
    Vector((57.09001159667969, -110.05013275146484, 5.668273448944092)),
    Vector((56.9498405456543, -109.46014404296875, 5.668273448944092)),
    Vector((61.39311981201172, -108.40255737304688, 5.668273448944092)),
    Vector((61.533294677734375, -108.98141479492188, 5.668273448944092)),
    Vector((62.486427307128906, -108.73650360107422, 5.668273448944092)),
    Vector((62.773780822753906, -109.69384765625, 5.668273448944092)),
    Vector((64.44876861572266, -109.31533813476562, 5.668273448944092)),
    Vector((64.2034683227539, -108.33573150634766, 5.668273448944092)),
    Vector((64.70105743408203, -108.22440338134766, 5.668273448944092)),
    Vector((64.51882934570312, -107.56761932373047, 5.668273448944092)),
    Vector((82.29894256591797, -103.35948944091797, 5.668273448944092)),
    Vector((82.48817443847656, -103.93834686279297, 5.668273448944092)),
    Vector((91.25556945800781, -101.74520874023438, 5.668273448944092)),
    Vector((88.1646728515625, -89.06597137451172, 5.668273448944092)),
    Vector((61.75040054321289, -96.2353286743164, 5.668273448944092)),
    Vector((61.5751838684082, -95.378173828125, 5.668273448944092)),
    Vector((50.95058059692383, -97.93863677978516, 5.668273448944092)),
    Vector((51.11878967285156, -98.80693054199219, 5.668273448944092)),
    Vector((37.207271575927734, -102.21342468261719, 5.668273448944092)),
    Vector((25.77643585205078, -55.470436096191406, 5.668273448944092)),
    Vector((26.35111427307129, -55.33685302734375, 5.668273448944092)),
    Vector((23.309465408325195, -42.74663162231445, 5.668273448944092)),
    Vector((22.657699584960938, -42.880218505859375, 5.668273448944092)),
    Vector((15.018598556518555, -8.894405364990234, 5.668273448944092)),
    Vector((31.901355743408203, -4.753243923187256, 5.668273448944092)),
    Vector((31.641986846923828, 6.067008972167969, 5.668273448944092)),
    Vector((0.0, 0.0, 5.668273448944092)),
]
unitVectors = [
    Vector((-0.9771817922592163, -0.21240489184856415, 0.0)),
    Vector((0.2346762716770172, -0.9720735549926758, 0.0)),
    Vector((0.9706581234931946, 0.24046359956264496, 0.0)),
    Vector((0.2357197403907776, -0.9718210697174072, 0.0)),
    Vector((-0.9697268009185791, -0.2441922128200531, 0.0)),
    Vector((0.24309350550174713, -0.9700028896331787, 0.0)),
    Vector((0.9695891737937927, 0.24473845958709717, 0.0)),
    Vector((-0.21519799530506134, 0.9765704274177551, 0.0)),
    Vector((0.9721373319625854, 0.23441243171691895, 0.0)),
    Vector((0.20539574325084686, -0.9786790609359741, 0.0)),
    Vector((0.9956624507904053, 0.09303975850343704, 0.0)),
    Vector((0.23474371433258057, -0.9720572829246521, 0.0)),
    Vector((0.9735706448554993, 0.22838598489761353, 0.0)),
    Vector((-0.24846112728118896, 0.9686418771743774, 0.0)),
    Vector((0.96625155210495, 0.2576003968715668, 0.0)),
    Vector((-0.23114848136901855, 0.9729183912277222, 0.0)),
    Vector((0.9728228449821472, 0.23155070841312408, 0.0)),
    Vector((0.23535549640655518, -0.9719094038009644, 0.0)),
    Vector((0.9685370922088623, 0.24886943399906158, 0.0)),
    Vector((0.28748583793640137, -0.95778489112854, 0.0)),
    Vector((0.9754050970077515, 0.22041958570480347, 0.0)),
    Vector((-0.24290713667869568, 0.9700495600700378, 0.0)),
    Vector((0.9758734107017517, 0.21833708882331848, 0.0)),
    Vector((-0.26735520362854004, 0.9635980725288391, 0.0)),
    Vector((0.973116397857666, 0.2303135097026825, 0.0)),
    Vector((0.31072407960891724, -0.9505001902580261, 0.0)),
    Vector((0.9701089262962341, 0.24266991019248962, 0.0)),
    Vector((-0.23684045672416687, 0.9715486168861389, 0.0)),
    Vector((-0.9650833606719971, -0.2619427740573883, 0.0)),
    Vector((-0.20027504861354828, 0.9797396659851074, 0.0)),
    Vector((-0.9721676707267761, -0.2342863231897354, 0.0)),
    Vector((0.19018778204917908, -0.9817476868629456, 0.0)),
    Vector((-0.9713038802146912, -0.23784182965755463, 0.0)),
    Vector((-0.2375466525554657, 0.9713761210441589, 0.0)),
    Vector((0.9740315675735474, 0.2264120727777481, 0.0)),
    Vector((-0.23483240604400635, 0.9720359444618225, 0.0)),
    Vector((-0.9796348214149475, -0.20078739523887634, 0.0)),
    Vector((-0.21930159628391266, 0.9756571054458618, 0.0)),
    Vector((0.9712094664573669, 0.23822738230228424, 0.0)),
    Vector((-0.023963801562786102, 0.9997128248214722, 0.0)),
    Vector((-0.982109785079956, -0.1883089393377304, 0.0)),
    Vector((0.22642163932323456, -0.9740293025970459, 0.0)),
]
holesInfo = None
firstVertIndex = 42
numPolygonVerts = 42
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
