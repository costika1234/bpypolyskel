import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-1.4260435104370117, -4.998244762420654, 0.0)),
    Vector((0.9602504372596741, -5.276543617248535, 0.0)),
    Vector((2.744596481323242, -5.243147373199463, 0.0)),
    Vector((4.79408597946167, -4.820131778717041, 0.0)),
    Vector((6.270290851593018, -3.985234022140503, 0.0)),
    Vector((7.395359039306641, -3.183732271194458, 0.0)),
    Vector((8.448765754699707, -2.1929872035980225, 0.0)),
    Vector((9.315855979919434, -1.1911104917526245, 0.0)),
    Vector((10.175777435302734, 0.345100075006485, 0.0)),
    Vector((10.80638599395752, 2.0148937702178955, 0.0)),
    Vector((11.093024253845215, 3.773742198944092, 0.0)),
    Vector((7.381016731262207, 4.040902614593506, 0.0)),
    Vector((7.058547019958496, 2.6382765769958496, 0.0)),
    Vector((6.564091682434082, 1.5696088075637817, 0.0)),
    Vector((5.9048171043396, 0.578864574432373, 0.0)),
    Vector((5.245542049407959, -0.03339328244328499, 0.0)),
    Vector((4.550436496734619, -0.5788594484329224, 0.0)),
    Vector((3.712009906768799, -1.0352699756622314, 0.0)),
    Vector((2.959575653076172, -1.3247010707855225, 0.0)),
    Vector((2.536778450012207, -0.01113134901970625, 0.0)),
    Vector((0.0, 0.0, 3.0407800674438477)),
    Vector((-1.4260435104370117, -4.998244762420654, 3.0407800674438477)),
    Vector((0.9602504372596741, -5.276543617248535, 3.0407800674438477)),
    Vector((2.744596481323242, -5.243147373199463, 3.0407800674438477)),
    Vector((4.79408597946167, -4.820131778717041, 3.0407800674438477)),
    Vector((6.270290851593018, -3.985234022140503, 3.0407800674438477)),
    Vector((7.395359039306641, -3.183732271194458, 3.0407800674438477)),
    Vector((8.448765754699707, -2.1929872035980225, 3.0407800674438477)),
    Vector((9.315855979919434, -1.1911104917526245, 3.0407800674438477)),
    Vector((10.175777435302734, 0.345100075006485, 3.0407800674438477)),
    Vector((10.80638599395752, 2.0148937702178955, 3.0407800674438477)),
    Vector((11.093024253845215, 3.773742198944092, 3.0407800674438477)),
    Vector((7.381016731262207, 4.040902614593506, 3.0407800674438477)),
    Vector((7.058547019958496, 2.6382765769958496, 3.0407800674438477)),
    Vector((6.564091682434082, 1.5696088075637817, 3.0407800674438477)),
    Vector((5.9048171043396, 0.578864574432373, 3.0407800674438477)),
    Vector((5.245542049407959, -0.03339328244328499, 3.0407800674438477)),
    Vector((4.550436496734619, -0.5788594484329224, 3.0407800674438477)),
    Vector((3.712009906768799, -1.0352699756622314, 3.0407800674438477)),
    Vector((2.959575653076172, -1.3247010707855225, 3.0407800674438477)),
    Vector((2.536778450012207, -0.01113134901970625, 3.0407800674438477)),
]
unitVectors = [
    Vector((-0.27436065673828125, -0.9616268873214722, 0.0)),
    Vector((0.9932680130004883, -0.11583876609802246, 0.0)),
    Vector((0.9998248219490051, 0.018712958320975304, 0.0)),
    Vector((0.9793567061424255, 0.2021396905183792, 0.0)),
    Vector((0.870431125164032, 0.49229007959365845, 0.0)),
    Vector((0.8144581317901611, 0.5802222490310669, 0.0)),
    Vector((0.7284403443336487, 0.6851092576980591, 0.0)),
    Vector((0.6544119119644165, 0.7561382055282593, 0.0)),
    Vector((0.48844918608665466, 0.8725922703742981, 0.0)),
    Vector((0.3533013164997101, 0.9355095624923706, 0.0)),
    Vector((0.16084730625152588, 0.9869793057441711, 0.0)),
    Vector((-0.997420072555542, 0.07178626954555511, 0.0)),
    Vector((-0.2240590751171112, -0.9745755195617676, 0.0)),
    Vector((-0.41991496086120605, -0.9075634479522705, 0.0)),
    Vector((-0.5539893507957458, -0.832523763179779, 0.0)),
    Vector((-0.7327525615692139, -0.6804952025413513, 0.0)),
    Vector((-0.7866965532302856, -0.6173398494720459, 0.0)),
    Vector((-0.8782973289489746, -0.4781147837638855, 0.0)),
    Vector((-0.9333317875862122, -0.3590150773525238, 0.0)),
    Vector((-0.30638906359672546, 0.9519063830375671, 0.0)),
    Vector((-0.9999903440475464, 0.004387944005429745, 0.0)),
]
holesInfo = None
firstVertIndex = 21
numPolygonVerts = 21
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
