import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((20.346878051757812, -14.209732055664062, 0.0)),
    Vector((34.48939895629883, 5.467186450958252, 0.0)),
    Vector((14.142550468444824, 19.67683219909668, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((20.346878051757812, -14.209732055664062, 20.048315048217773)),
    Vector((34.48939895629883, 5.467186450958252, 20.048315048217773)),
    Vector((14.142550468444824, 19.67683219909668, 20.048315048217773)),
    Vector((0.0, 0.0, 20.048315048217773)),
    Vector((19.83907127380371, 2.96510648727417, 0.0)),
    Vector((23.77329444885254, 8.558395385742188, 0.0)),
    Vector((28.046934127807617, 5.552393436431885, 0.0)),
    Vector((24.112712860107422, -0.040899790823459625, 0.0)),
    Vector((19.83907127380371, 2.96510648727417, 20.048315048217773)),
    Vector((23.77329444885254, 8.558395385742188, 20.048315048217773)),
    Vector((28.046934127807617, 5.552393436431885, 20.048315048217773)),
    Vector((24.112712860107422, -0.040899790823459625, 20.048315048217773)),
    Vector((13.80604362487793, -5.1373701095581055, 0.0)),
    Vector((17.795761108398438, 0.41648104786872864, 0.0)),
    Vector((22.039268493652344, -2.631922721862793, 0.0)),
    Vector((18.049551010131836, -8.185778617858887, 0.0)),
    Vector((13.80604362487793, -5.1373701095581055, 20.048315048217773)),
    Vector((17.795761108398438, 0.41648104786872864, 20.048315048217773)),
    Vector((22.039268493652344, -2.631922721862793, 20.048315048217773)),
    Vector((18.049551010131836, -8.185778617858887, 20.048315048217773)),
    Vector((5.531497478485107, 0.5095327496528625, 0.0)),
    Vector((9.600370407104492, 6.005650043487549, 0.0)),
    Vector((13.799765586853027, 2.8967666625976562, 0.0)),
    Vector((9.7308931350708, -2.5993542671203613, 0.0)),
    Vector((5.531497478485107, 0.5095327496528625, 20.048315048217773)),
    Vector((9.600370407104492, 6.005650043487549, 20.048315048217773)),
    Vector((13.799765586853027, 2.8967666625976562, 20.048315048217773)),
    Vector((9.7308931350708, -2.5993542671203613, 20.048315048217773)),
    Vector((11.378507614135742, 8.820670127868652, 0.0)),
    Vector((15.436895370483398, 14.324522972106934, 0.0)),
    Vector((19.642200469970703, 11.223651885986328, 0.0)),
    Vector((15.58381462097168, 5.719793796539307, 0.0)),
    Vector((11.378507614135742, 8.820670127868652, 20.048315048217773)),
    Vector((15.436895370483398, 14.324522972106934, 20.048315048217773)),
    Vector((19.642200469970703, 11.223651885986328, 20.048315048217773)),
    Vector((15.58381462097168, 5.719793796539307, 20.048315048217773))
]
unitVectors = [
    Vector((0.5836288928985596, 0.8120205998420715, 0.0)),
    Vector((-0.8198589086532593, 0.5725656151771545, 0.0)),
    Vector((-0.5836313366889954, -0.8120186924934387, 0.0)),
    Vector((0.8198577165603638, -0.572567343711853, 0.0)),
    Vector((0.5753178000450134, 0.8179298639297485, 0.0)),
    Vector((0.8179301619529724, -0.5753175020217896, 0.0)),
    Vector((-0.5753173232078552, -0.817930281162262, 0.0)),
    Vector((-0.8179299235343933, 0.575317919254303, 0.0)),
    Vector((0.5834323167800903, 0.8121618032455444, 0.0)),
    Vector((0.8121619820594788, -0.5834318995475769, 0.0)),
    Vector((-0.5834319591522217, -0.8121620416641235, 0.0)),
    Vector((-0.8121615648269653, 0.5834324955940247, 0.0)),
    Vector((0.5950080156326294, 0.8037198185920715, 0.0)),
    Vector((0.8037200570106506, -0.595007598400116, 0.0)),
    Vector((-0.5950077176094055, -0.8037199974060059, 0.0)),
    Vector((-0.8037198185920715, 0.5950080156326294, 0.0)),
    Vector((0.5934755206108093, 0.8048520684242249, 0.0)),
    Vector((0.8048524260520935, -0.5934750437736511, 0.0)),
    Vector((-0.5934749245643616, -0.8048524260520935, 0.0)),
    Vector((-0.8048520684242249, 0.5934755206108093, 0.0))
]
holesInfo = [
    (12, 4),
    (20, 4),
    (28, 4),
    (36, 4)
]
firstVertIndex = 4
numPolygonVerts = 4
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
