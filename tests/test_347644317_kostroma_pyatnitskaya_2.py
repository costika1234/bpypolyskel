import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((3.3188207149505615, 3.629016876220703, 0.0)),
    Vector((-7.439126968383789, 13.46966552734375, 0.0)),
    Vector((-96.45569610595703, -83.88921356201172, 0.0)),
    Vector((-46.60157775878906, -128.92996215820312, 0.0)),
    Vector((-35.20192337036133, -116.6181411743164, 0.0)),
    Vector((-47.11191177368164, -105.9647445678711, 0.0)),
    Vector((-41.940528869628906, -100.29864501953125, 0.0)),
    Vector((-49.35603332519531, -93.53033447265625, 0.0)),
    Vector((-54.52742004394531, -99.18529510498047, 0.0)),
    Vector((-68.94869995117188, -85.99371337890625, 0.0)),
    Vector((-53.393009185791016, -68.98433685302734, 0.0)),
    Vector((-58.6651496887207, -64.16412353515625, 0.0)),
    Vector((-19.50932502746582, -21.33989906311035, 0.0)),
    Vector((-14.599355697631836, -25.826095581054688, 0.0)),
    Vector((-9.635917663574219, -20.393718719482422, 0.0)),
    Vector((-14.545886039733887, -15.9075288772583, 0.0)),
    Vector((-7.130438327789307, -7.803490161895752, 0.0)),
    Vector((-2.0898542404174805, -8.838767051696777, 0.0)),
    Vector((0.6768275499343872, -7.558593273162842, 0.0)),
    Vector((2.6538748741149902, -5.298806667327881, 0.0)),
    Vector((1.7870599031448364, -2.2709171772003174, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((3.3188207149505615, 3.629016876220703, 8.270084381103516)),
    Vector((-7.439126968383789, 13.46966552734375, 8.270084381103516)),
    Vector((-96.45569610595703, -83.88921356201172, 8.270084381103516)),
    Vector((-46.60157775878906, -128.92996215820312, 8.270084381103516)),
    Vector((-35.20192337036133, -116.6181411743164, 8.270084381103516)),
    Vector((-47.11191177368164, -105.9647445678711, 8.270084381103516)),
    Vector((-41.940528869628906, -100.29864501953125, 8.270084381103516)),
    Vector((-49.35603332519531, -93.53033447265625, 8.270084381103516)),
    Vector((-54.52742004394531, -99.18529510498047, 8.270084381103516)),
    Vector((-68.94869995117188, -85.99371337890625, 8.270084381103516)),
    Vector((-53.393009185791016, -68.98433685302734, 8.270084381103516)),
    Vector((-58.6651496887207, -64.16412353515625, 8.270084381103516)),
    Vector((-19.50932502746582, -21.33989906311035, 8.270084381103516)),
    Vector((-14.599355697631836, -25.826095581054688, 8.270084381103516)),
    Vector((-9.635917663574219, -20.393718719482422, 8.270084381103516)),
    Vector((-14.545886039733887, -15.9075288772583, 8.270084381103516)),
    Vector((-7.130438327789307, -7.803490161895752, 8.270084381103516)),
    Vector((-2.0898542404174805, -8.838767051696777, 8.270084381103516)),
    Vector((0.6768275499343872, -7.558593273162842, 8.270084381103516)),
    Vector((2.6538748741149902, -5.298806667327881, 8.270084381103516)),
    Vector((1.7870599031448364, -2.2709171772003174, 8.270084381103516)),
    Vector((0.0, 0.0, 8.270084381103516))
]
unitVectors = [
    Vector((-0.7378644943237305, 0.6749489307403564, 0.0)),
    Vector((-0.6747804880142212, -0.7380184531211853, 0.0)),
    Vector((0.7420195937156677, -0.6703782677650452, 0.0)),
    Vector((0.6794022917747498, 0.7337660193443298, 0.0)),
    Vector((-0.7453317642211914, 0.6666937470436096, 0.0)),
    Vector((0.6741263270378113, 0.7386161684989929, 0.0)),
    Vector((-0.738602876663208, 0.6741407513618469, 0.0)),
    Vector((-0.6748500466346741, -0.7379549145698547, 0.0)),
    Vector((-0.7378654479980469, 0.6749478578567505, 0.0)),
    Vector((0.6748698949813843, 0.737936794757843, 0.0)),
    Vector((-0.7380308508872986, 0.6747669577598572, 0.0)),
    Vector((0.6747902631759644, 0.7380095720291138, 0.0)),
    Vector((0.738247275352478, -0.6745301485061646, 0.0)),
    Vector((0.6745243668556213, 0.7382525205612183, 0.0)),
    Vector((-0.7382476925849915, 0.6745296716690063, 0.0)),
    Vector((0.6750686764717102, 0.7377548217773438, 0.0)),
    Vector((0.9795525074005127, -0.2011886090040207, 0.0)),
    Vector((0.9075540900230408, 0.4199351668357849, 0.0)),
    Vector((0.6584544777870178, 0.7526206374168396, 0.0)),
    Vector((-0.27522119879722595, 0.9613808989524841, 0.0)),
    Vector((-0.6184135675430298, 0.7858527898788452, 0.0)),
    Vector((0.6748647093772888, 0.7379414439201355, 0.0))
]
holesInfo = None
firstVertIndex = 22
numPolygonVerts = 22
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
