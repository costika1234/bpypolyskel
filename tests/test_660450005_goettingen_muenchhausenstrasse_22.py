import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((30.39594268798828, -124.7222671508789, 0.0)),
    Vector((41.68445587158203, -121.97259521484375, 0.0)),
    Vector((37.55674362182617, -105.04093170166016, 0.0)),
    Vector((38.747920989990234, -104.75149536132812, 0.0)),
    Vector((34.54405212402344, -87.50813293457031, 0.0)),
    Vector((33.35287857055664, -87.79756927490234, 0.0)),
    Vector((22.978389739990234, -45.217926025390625, 0.0)),
    Vector((24.00334358215332, -44.973018646240234, 0.0)),
    Vector((19.854978561401367, -27.952285766601562, 0.0)),
    Vector((18.830028533935547, -28.19719123840332, 0.0)),
    Vector((11.440610885620117, 2.1150832176208496, 0.0)),
    Vector((7.361605167388916, 1.113200306892395, 0.0)),
    Vector((6.973785400390625, 2.693936586380005, 0.0)),
    Vector((-0.2285352498292923, 0.9350837469100952, 0.0)),
    Vector((30.39594268798828, -124.7222671508789, 8.965770721435547)),
    Vector((41.68445587158203, -121.97259521484375, 8.965770721435547)),
    Vector((37.55674362182617, -105.04093170166016, 8.965770721435547)),
    Vector((38.747920989990234, -104.75149536132812, 8.965770721435547)),
    Vector((34.54405212402344, -87.50813293457031, 8.965770721435547)),
    Vector((33.35287857055664, -87.79756927490234, 8.965770721435547)),
    Vector((22.978389739990234, -45.217926025390625, 8.965770721435547)),
    Vector((24.00334358215332, -44.973018646240234, 8.965770721435547)),
    Vector((19.854978561401367, -27.952285766601562, 8.965770721435547)),
    Vector((18.830028533935547, -28.19719123840332, 8.965770721435547)),
    Vector((11.440610885620117, 2.1150832176208496, 8.965770721435547)),
    Vector((7.361605167388916, 1.113200306892395, 8.965770721435547)),
    Vector((6.973785400390625, 2.693936586380005, 8.965770721435547)),
    Vector((-0.2285352498292923, 0.9350837469100952, 8.965770721435547))
]
unitVectors = [
    Vector((0.9715920686721802, 0.23666176199913025, 0.0)),
    Vector((-0.23684991896152496, 0.9715461730957031, 0.0)),
    Vector((0.971725583076477, 0.23611320555210114, 0.0)),
    Vector((-0.23685888946056366, 0.9715439677238464, 0.0)),
    Vector((-0.9717254042625427, -0.23611390590667725, 0.0)),
    Vector((-0.23672378063201904, 0.9715769290924072, 0.0)),
    Vector((0.9726197123527527, 0.23240241408348083, 0.0)),
    Vector((-0.23679277300834656, 0.9715602397918701, 0.0)),
    Vector((-0.9726199507713318, -0.2324015349149704, 0.0)),
    Vector((-0.23684062063694, 0.9715485572814941, 0.0)),
    Vector((-0.9711351990699768, -0.23852963745594025, 0.0)),
    Vector((-0.23827485740184784, 0.9711978435516357, 0.0)),
    Vector((-0.9714522361755371, -0.23723487555980682, 0.0)),
    Vector((0.23678354918956757, -0.9715624451637268, 0.0))
]
holesInfo = None
firstVertIndex = 14
numPolygonVerts = 14
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
