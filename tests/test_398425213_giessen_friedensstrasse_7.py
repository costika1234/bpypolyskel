import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-6.283878326416016, -5.810873508453369, 0.0)),
    Vector((-4.014898300170898, -8.271037101745605, 0.0)),
    Vector((-4.721747398376465, -9.028008460998535, 0.0)),
    Vector((-5.06103515625, -9.517813682556152, 0.0)),
    Vector((-5.2024054527282715, -10.130070686340332, 0.0)),
    Vector((-5.0681047439575195, -10.820252418518066, 0.0)),
    Vector((-4.82070779800415, -11.221002578735352, 0.0)),
    Vector((-4.2481608390808105, -11.65514850616455, 0.0)),
    Vector((-3.583723306655884, -11.799864768981934, 0.0)),
    Vector((-2.8910112380981445, -11.644018173217773, 0.0)),
    Vector((-2.403285503387451, -11.287796020507812, 0.0)),
    Vector((-1.8166009187698364, -10.675539016723633, 0.0)),
    Vector((0.40290388464927673, -13.04664421081543, 0.0)),
    Vector((6.686783313751221, -7.235762596130371, 0.0)),
    Vector((0.0, 0.0, 6.428025245666504)),
    Vector((-6.283878326416016, -5.810873508453369, 6.428025245666504)),
    Vector((-4.014898300170898, -8.271037101745605, 6.428025245666504)),
    Vector((-4.721747398376465, -9.028008460998535, 6.428025245666504)),
    Vector((-5.06103515625, -9.517813682556152, 6.428025245666504)),
    Vector((-5.2024054527282715, -10.130070686340332, 6.428025245666504)),
    Vector((-5.0681047439575195, -10.820252418518066, 6.428025245666504)),
    Vector((-4.82070779800415, -11.221002578735352, 6.428025245666504)),
    Vector((-4.2481608390808105, -11.65514850616455, 6.428025245666504)),
    Vector((-3.583723306655884, -11.799864768981934, 6.428025245666504)),
    Vector((-2.8910112380981445, -11.644018173217773, 6.428025245666504)),
    Vector((-2.403285503387451, -11.287796020507812, 6.428025245666504)),
    Vector((-1.8166009187698364, -10.675539016723633, 6.428025245666504)),
    Vector((0.40290388464927673, -13.04664421081543, 6.428025245666504)),
    Vector((6.686783313751221, -7.235762596130371, 6.428025245666504))
]
unitVectors = [
    Vector((-0.7341992259025574, -0.6789340376853943, 0.0)),
    Vector((0.6779670119285583, -0.7350923418998718, 0.0)),
    Vector((-0.6824949383735657, -0.7308902740478516, 0.0)),
    Vector((-0.5694276094436646, -0.8220414519309998, 0.0)),
    Vector((-0.22498072683811188, -0.9743632674217224, 0.0)),
    Vector((0.1910049170255661, -0.9815890192985535, 0.0)),
    Vector((0.5253004431724548, -0.850916862487793, 0.0)),
    Vector((0.7968252897262573, -0.6042097210884094, 0.0)),
    Vector((0.9770928621292114, -0.21281342208385468, 0.0)),
    Vector((0.9756138324737549, 0.21949392557144165, 0.0)),
    Vector((0.807543158531189, 0.589808464050293, 0.0)),
    Vector((0.6918673515319824, 0.7220245003700256, 0.0)),
    Vector((0.6833826899528503, -0.7300602793693542, 0.0)),
    Vector((0.734198808670044, 0.6789344549179077, 0.0)),
    Vector((-0.6786974668502808, 0.7344179749488831, 0.0))
]
holesInfo = None
firstVertIndex = 15
numPolygonVerts = 15
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
