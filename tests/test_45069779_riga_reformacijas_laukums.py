import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.30357155203819275, -4.419384002685547, 0.0)),
    Vector((-0.45535731315612793, -4.486175537109375, 0.0)),
    Vector((0.13964314758777618, -11.321191787719727, 0.0)),
    Vector((0.9228590130805969, -11.221004486083984, 0.0)),
    Vector((2.950737714767456, -35.61110305786133, 0.0)),
    Vector((4.675036907196045, -35.43299102783203, 0.0)),
    Vector((4.547533988952637, -33.97470474243164, 0.0)),
    Vector((14.705106735229492, -32.91714859008789, 0.0)),
    Vector((15.14832878112793, -34.24184799194336, 0.0)),
    Vector((16.137981414794922, -34.59806823730469, 0.0)),
    Vector((17.297630310058594, -34.074859619140625, 0.0)),
    Vector((17.607271194458008, -33.05072021484375, 0.0)),
    Vector((17.546554565429688, -32.53865051269531, 0.0)),
    Vector((23.01694679260254, -32.01542282104492, 0.0)),
    Vector((23.07767105102539, -33.64068603515625, 0.0)),
    Vector((24.735183715820312, -33.518226623535156, 0.0)),
    Vector((24.686601638793945, -31.85956573486328, 0.0)),
    Vector((31.18914222717285, -31.291791915893555, 0.0)),
    Vector((31.413799285888672, -32.96158218383789, 0.0)),
    Vector((32.998451232910156, -32.850250244140625, 0.0)),
    Vector((32.840579986572266, -31.18045997619629, 0.0)),
    Vector((39.40990447998047, -30.5570125579834, 0.0)),
    Vector((39.567779541015625, -32.32699203491211, 0.0)),
    Vector((41.1949348449707, -32.21565628051758, 0.0)),
    Vector((41.176700592041016, -30.3343563079834, 0.0)),
    Vector((47.831024169921875, -29.811084747314453, 0.0)),
    Vector((47.94032669067383, -30.957674026489258, 0.0)),
    Vector((62.33576583862305, -30.022397994995117, 0.0)),
    Vector((62.6696891784668, -29.4769287109375, 0.0)),
    Vector((62.402488708496094, -25.81451988220215, 0.0)),
    Vector((65.33502960205078, -27.428607940673828, 0.0)),
    Vector((65.20147705078125, -28.664257049560547, 0.0)),
    Vector((66.39148712158203, -28.76442527770996, 0.0)),
    Vector((66.5007553100586, -27.70688819885254, 0.0)),
    Vector((69.58504486083984, -26.960996627807617, 0.0)),
    Vector((70.39257049560547, -28.11870574951172, 0.0)),
    Vector((79.12934112548828, -24.344818115234375, 0.0)),
    Vector((80.8414306640625, -21.328027725219727, 0.0)),
    Vector((84.31432342529297, -22.11832618713379, 0.0)),
    Vector((86.45132446289062, -15.071758270263672, 0.0)),
    Vector((79.85769653320312, -13.079272270202637, 0.0)),
    Vector((79.65727233886719, -9.706295013427734, 0.0)),
    Vector((80.92012023925781, -9.071749687194824, 0.0)),
    Vector((80.45260620117188, -8.337050437927246, 0.0)),
    Vector((79.12904357910156, -8.760089874267578, 0.0)),
    Vector((77.50186920166016, -7.235043048858643, 0.0)),
    Vector((78.91043090820312, -6.645023345947266, 0.0)),
    Vector((78.42469787597656, -5.765608787536621, 0.0)),
    Vector((77.14970397949219, -5.93261194229126, 0.0)),
    Vector((77.05859375, -4.017918109893799, 0.0)),
    Vector((78.38215637207031, -3.4724278450012207, 0.0)),
    Vector((78.02999877929688, -2.548482894897461, 0.0)),
    Vector((76.66393280029297, -3.0939738750457764, 0.0)),
    Vector((74.41138458251953, -0.5559303760528564, 0.0)),
    Vector((74.89707946777344, 0.6797246932983398, 0.0)),
    Vector((73.992431640625, 0.9802711009979248, 0.0)),
    Vector((73.42173767089844, -0.2108575850725174, 0.0)),
    Vector((71.964599609375, -0.1440914124250412, 0.0)),
    Vector((72.43208312988281, 0.4347780644893646, 0.0)),
    Vector((72.40778350830078, 1.358729362487793, 0.0)),
    Vector((71.81277465820312, 2.126823663711548, 0.0)),
    Vector((70.7138442993164, 2.1268045902252197, 0.0)),
    Vector((69.98528289794922, 1.5590629577636719, 0.0)),
    Vector((69.87600708007812, 0.8911441564559937, 0.0)),
    Vector((68.88027954101562, 2.0822460651397705, 0.0)),
    Vector((69.45703887939453, 3.273374319076538, 0.0)),
    Vector((68.57060241699219, 3.7854292392730713, 0.0)),
    Vector((67.95741271972656, 2.705620050430298, 0.0)),
    Vector((64.63026428222656, 2.939337730407715, 0.0)),
    Vector((64.42989349365234, 4.264036655426025, 0.0)),
    Vector((63.19739532470703, 4.063642501831055, 0.0)),
    Vector((60.453102111816406, 4.798310279846191, 0.0)),
    Vector((45.93028259277344, 3.9966237545013428, 0.0)),
    Vector((45.930294036865234, 2.8722970485687256, 0.0)),
    Vector((38.75387954711914, 2.315626382827759, 0.0)),
    Vector((38.42595672607422, 9.69610595703125, 0.0)),
    Vector((28.377777099609375, 8.950183868408203, 0.0)),
    Vector((28.92425537109375, 1.6253653764724731, 0.0)),
    Vector((22.24569320678711, 1.0019350051879883, 0.0)),
    Vector((22.17889976501465, 2.5604076385498047, 0.0)),
    Vector((20.806758880615234, 2.4936087131500244, 0.0)),
    Vector((20.74605369567871, 0.8794758319854736, 0.0)),
    Vector((13.824631690979004, 0.44530099630355835, 0.0)),
    Vector((13.763912200927734, 2.0594334602355957, 0.0)),
    Vector((11.705700874328613, 1.8145241737365723, 0.0)),
    Vector((11.705705642700195, 0.25605133175849915, 0.0)),
    Vector((1.584641933441162, -0.30056232213974, 0.0)),
    Vector((1.56642746925354, 0.16697953641414642, 0.0)),
    Vector((0.0, 0.0, 4.0)),
    Vector((0.30357155203819275, -4.419384002685547, 4.0)),
    Vector((-0.45535731315612793, -4.486175537109375, 4.0)),
    Vector((0.13964314758777618, -11.321191787719727, 4.0)),
    Vector((0.9228590130805969, -11.221004486083984, 4.0)),
    Vector((2.950737714767456, -35.61110305786133, 4.0)),
    Vector((4.675036907196045, -35.43299102783203, 4.0)),
    Vector((4.547533988952637, -33.97470474243164, 4.0)),
    Vector((14.705106735229492, -32.91714859008789, 4.0)),
    Vector((15.14832878112793, -34.24184799194336, 4.0)),
    Vector((16.137981414794922, -34.59806823730469, 4.0)),
    Vector((17.297630310058594, -34.074859619140625, 4.0)),
    Vector((17.607271194458008, -33.05072021484375, 4.0)),
    Vector((17.546554565429688, -32.53865051269531, 4.0)),
    Vector((23.01694679260254, -32.01542282104492, 4.0)),
    Vector((23.07767105102539, -33.64068603515625, 4.0)),
    Vector((24.735183715820312, -33.518226623535156, 4.0)),
    Vector((24.686601638793945, -31.85956573486328, 4.0)),
    Vector((31.18914222717285, -31.291791915893555, 4.0)),
    Vector((31.413799285888672, -32.96158218383789, 4.0)),
    Vector((32.998451232910156, -32.850250244140625, 4.0)),
    Vector((32.840579986572266, -31.18045997619629, 4.0)),
    Vector((39.40990447998047, -30.5570125579834, 4.0)),
    Vector((39.567779541015625, -32.32699203491211, 4.0)),
    Vector((41.1949348449707, -32.21565628051758, 4.0)),
    Vector((41.176700592041016, -30.3343563079834, 4.0)),
    Vector((47.831024169921875, -29.811084747314453, 4.0)),
    Vector((47.94032669067383, -30.957674026489258, 4.0)),
    Vector((62.33576583862305, -30.022397994995117, 4.0)),
    Vector((62.6696891784668, -29.4769287109375, 4.0)),
    Vector((62.402488708496094, -25.81451988220215, 4.0)),
    Vector((65.33502960205078, -27.428607940673828, 4.0)),
    Vector((65.20147705078125, -28.664257049560547, 4.0)),
    Vector((66.39148712158203, -28.76442527770996, 4.0)),
    Vector((66.5007553100586, -27.70688819885254, 4.0)),
    Vector((69.58504486083984, -26.960996627807617, 4.0)),
    Vector((70.39257049560547, -28.11870574951172, 4.0)),
    Vector((79.12934112548828, -24.344818115234375, 4.0)),
    Vector((80.8414306640625, -21.328027725219727, 4.0)),
    Vector((84.31432342529297, -22.11832618713379, 4.0)),
    Vector((86.45132446289062, -15.071758270263672, 4.0)),
    Vector((79.85769653320312, -13.079272270202637, 4.0)),
    Vector((79.65727233886719, -9.706295013427734, 4.0)),
    Vector((80.92012023925781, -9.071749687194824, 4.0)),
    Vector((80.45260620117188, -8.337050437927246, 4.0)),
    Vector((79.12904357910156, -8.760089874267578, 4.0)),
    Vector((77.50186920166016, -7.235043048858643, 4.0)),
    Vector((78.91043090820312, -6.645023345947266, 4.0)),
    Vector((78.42469787597656, -5.765608787536621, 4.0)),
    Vector((77.14970397949219, -5.93261194229126, 4.0)),
    Vector((77.05859375, -4.017918109893799, 4.0)),
    Vector((78.38215637207031, -3.4724278450012207, 4.0)),
    Vector((78.02999877929688, -2.548482894897461, 4.0)),
    Vector((76.66393280029297, -3.0939738750457764, 4.0)),
    Vector((74.41138458251953, -0.5559303760528564, 4.0)),
    Vector((74.89707946777344, 0.6797246932983398, 4.0)),
    Vector((73.992431640625, 0.9802711009979248, 4.0)),
    Vector((73.42173767089844, -0.2108575850725174, 4.0)),
    Vector((71.964599609375, -0.1440914124250412, 4.0)),
    Vector((72.43208312988281, 0.4347780644893646, 4.0)),
    Vector((72.40778350830078, 1.358729362487793, 4.0)),
    Vector((71.81277465820312, 2.126823663711548, 4.0)),
    Vector((70.7138442993164, 2.1268045902252197, 4.0)),
    Vector((69.98528289794922, 1.5590629577636719, 4.0)),
    Vector((69.87600708007812, 0.8911441564559937, 4.0)),
    Vector((68.88027954101562, 2.0822460651397705, 4.0)),
    Vector((69.45703887939453, 3.273374319076538, 4.0)),
    Vector((68.57060241699219, 3.7854292392730713, 4.0)),
    Vector((67.95741271972656, 2.705620050430298, 4.0)),
    Vector((64.63026428222656, 2.939337730407715, 4.0)),
    Vector((64.42989349365234, 4.264036655426025, 4.0)),
    Vector((63.19739532470703, 4.063642501831055, 4.0)),
    Vector((60.453102111816406, 4.798310279846191, 4.0)),
    Vector((45.93028259277344, 3.9966237545013428, 4.0)),
    Vector((45.930294036865234, 2.8722970485687256, 4.0)),
    Vector((38.75387954711914, 2.315626382827759, 4.0)),
    Vector((38.42595672607422, 9.69610595703125, 4.0)),
    Vector((28.377777099609375, 8.950183868408203, 4.0)),
    Vector((28.92425537109375, 1.6253653764724731, 4.0)),
    Vector((22.24569320678711, 1.0019350051879883, 4.0)),
    Vector((22.17889976501465, 2.5604076385498047, 4.0)),
    Vector((20.806758880615234, 2.4936087131500244, 4.0)),
    Vector((20.74605369567871, 0.8794758319854736, 4.0)),
    Vector((13.824631690979004, 0.44530099630355835, 4.0)),
    Vector((13.763912200927734, 2.0594334602355957, 4.0)),
    Vector((11.705700874328613, 1.8145241737365723, 4.0)),
    Vector((11.705705642700195, 0.25605133175849915, 4.0)),
    Vector((1.584641933441162, -0.30056232213974, 4.0)),
    Vector((1.56642746925354, 0.16697953641414642, 4.0)),
]
unitVectors = [
    Vector((0.06852943450212479, -0.997649073600769, 0.0)),
    Vector((-0.9961496591567993, -0.0876687690615654, 0.0)),
    Vector((0.08672382682561874, -0.9962324500083923, 0.0)),
    Vector((0.991917610168457, 0.12688398361206055, 0.0)),
    Vector((0.0828576311469078, -0.9965614676475525, 0.0)),
    Vector((0.9947072863578796, 0.10274860262870789, 0.0)),
    Vector((-0.08710110187530518, 0.9961994886398315, 0.0)),
    Vector((0.9946237802505493, 0.10355529934167862, 0.0)),
    Vector((0.31729426980018616, -0.9483271837234497, 0.0)),
    Vector((0.9409040212631226, -0.3386734426021576, 0.0)),
    Vector((0.9115191102027893, 0.411257803440094, 0.0)),
    Vector((0.28940436244010925, 0.9572069644927979, 0.0)),
    Vector((-0.11774620413780212, 0.9930436611175537, 0.0)),
    Vector((0.9954569935798645, 0.0952126681804657, 0.0)),
    Vector((0.037336669862270355, -0.9993027448654175, 0.0)),
    Vector((0.9972819089889526, 0.07368061691522598, 0.0)),
    Vector((-0.029277382418513298, 0.9995713233947754, 0.0)),
    Vector((0.9962096810340881, 0.08698473125696182, 0.0)),
    Vector((0.13334065675735474, -0.9910703301429749, 0.0)),
    Vector((0.9975411891937256, 0.07008365541696548, 0.0)),
    Vector((-0.09412579983472824, 0.9955602884292603, 0.0)),
    Vector((0.9955269694328308, 0.0944783166050911, 0.0)),
    Vector((0.08884327858686447, -0.996045708656311, 0.0)),
    Vector((0.9976673126220703, 0.0682639479637146, 0.0)),
    Vector((-0.009691913612186909, 0.9999530911445618, 0.0)),
    Vector((0.996922492980957, 0.0783943235874176, 0.0)),
    Vector((0.09489817917346954, -0.9954869747161865, 0.0)),
    Vector((0.9978960156440735, 0.06483360379934311, 0.0)),
    Vector((0.5221112370491028, 0.8528773188591003, 0.0)),
    Vector((-0.07276417315006256, 0.9973491430282593, 0.0)),
    Vector((0.8760656714439392, -0.482191801071167, 0.0)),
    Vector((-0.10745707899332047, -0.9942097067832947, 0.0)),
    Vector((0.9964760541915894, -0.08387764543294907, 0.0)),
    Vector((0.10277611762285233, 0.9947044849395752, 0.0)),
    Vector((0.9719809293746948, 0.23505976796150208, 0.0)),
    Vector((0.572096586227417, -0.8201863169670105, 0.0)),
    Vector((0.9180168509483337, 0.3965415358543396, 0.0)),
    Vector((0.4935743510723114, 0.8697035312652588, 0.0)),
    Vector((0.975071907043457, -0.22188931703567505, 0.0)),
    Vector((0.2902160584926605, 0.9569612145423889, 0.0)),
    Vector((-0.9572490453720093, 0.2892649471759796, 0.0)),
    Vector((-0.05931593477725983, 0.9982392191886902, 0.0)),
    Vector((0.8935419917106628, 0.44897958636283875, 0.0)),
    Vector((-0.5368576645851135, 0.8436728715896606, 0.0)),
    Vector((-0.9525285959243774, -0.3044489026069641, 0.0)),
    Vector((-0.7296331524848938, 0.6838386654853821, 0.0)),
    Vector((0.9223501086235046, 0.386354923248291, 0.0)),
    Vector((-0.48348844051361084, 0.8753507733345032, 0.0)),
    Vector((-0.9915304780006409, -0.129874125123024, 0.0)),
    Vector((-0.047530971467494965, 0.998869776725769, 0.0)),
    Vector((0.9245566129684448, 0.38104477524757385, 0.0)),
    Vector((-0.35615304112434387, 0.9344276785850525, 0.0)),
    Vector((-0.9286958575248718, -0.3708423972129822, 0.0)),
    Vector((-0.6637890338897705, 0.7479197978973389, 0.0)),
    Vector((0.36582133173942566, 0.9306851029396057, 0.0)),
    Vector((-0.9489984512329102, 0.3152807950973511, 0.0)),
    Vector((-0.43208619952201843, -0.9018323421478271, 0.0)),
    Vector((-0.9989519119262695, 0.04577204957604408, 0.0)),
    Vector((0.6282842755317688, 0.7779837846755981, 0.0)),
    Vector((-0.026290589943528175, 0.9996543526649475, 0.0)),
    Vector((-0.6124017238616943, 0.790546715259552, 0.0)),
    Vector((-1.0, -1.735641126288101e-05, 0.0)),
    Vector((-0.788783848285675, -0.6146708130836487, 0.0)),
    Vector((-0.1614598035812378, -0.986879289150238, 0.0)),
    Vector((-0.6413782835006714, 0.7672247886657715, 0.0)),
    Vector((0.4358100891113281, 0.9000387191772461, 0.0)),
    Vector((-0.8659109473228455, 0.500198245048523, 0.0)),
    Vector((-0.4938034415245056, -0.8695734739303589, 0.0)),
    Vector((-0.9975419044494629, 0.0700729712843895, 0.0)),
    Vector((-0.14955644309520721, 0.9887531995773315, 0.0)),
    Vector((-0.9870384335517883, -0.1604844033718109, 0.0)),
    Vector((-0.9659841656684875, 0.2586011588573456, 0.0)),
    Vector((-0.9984797835350037, -0.055117931216955185, 0.0)),
    Vector((1.017861723084934e-05, -0.9999999403953552, 0.0)),
    Vector((-0.9970049858093262, -0.07733714580535889, 0.0)),
    Vector((-0.04438730701804161, 0.9990143775939941, 0.0)),
    Vector((-0.9972558617591858, -0.07403083890676498, 0.0)),
    Vector((0.07439962029457092, -0.9972285628318787, 0.0)),
    Vector((-0.9956713318824768, -0.09294392168521881, 0.0)),
    Vector((-0.04281896352767944, 0.9990828037261963, 0.0)),
    Vector((-0.9988170266151428, -0.0486246757209301, 0.0)),
    Vector((-0.037581972777843475, -0.9992935657501221, 0.0)),
    Vector((-0.9980382919311523, -0.062606081366539, 0.0)),
    Vector((-0.03759082779288292, 0.9992931485176086, 0.0)),
    Vector((-0.9929949045181274, -0.1181577816605568, 0.0)),
    Vector((3.0596436317864573e-06, -1.0, 0.0)),
    Vector((-0.9984911680221558, -0.054912593215703964, 0.0)),
    Vector((-0.038928400725126266, 0.9992420077323914, 0.0)),
    Vector((-0.9943662881851196, -0.10599841177463531, 0.0)),
]
holesInfo = None
firstVertIndex = 89
numPolygonVerts = 89
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
