import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 13.0)),
    Vector((3.7383382320404053, -1.269040822982788, 13.0)),
    Vector((7.646280765533447, -1.7811062335968018, 13.0)),
    Vector((11.582489013671875, -1.513932228088379, 13.0)),
    Vector((15.3985595703125, -0.4897831380367279, 13.0)),
    Vector((18.93195343017578, 1.2579444646835327, 13.0)),
    Vector((22.062536239624023, 3.6624577045440674, 13.0)),
    Vector((24.663103103637695, 6.623567581176758, 13.0)),
    Vector((26.634719848632812, 10.041086196899414, 13.0)),
    Vector((18.126285552978516, 16.464183807373047, 13.0)),
    Vector((16.31012725830078, 15.451170921325684, 13.0)),
    Vector((15.674113273620605, 16.798133850097656, 13.0)),
    Vector((3.674727201461792, 12.968722343444824, 13.0)),
    Vector((3.999800443649292, 11.276665687561035, 13.0)),
    Vector((2.6288440227508545, 11.46590805053711, 13.0)),
    Vector((0.0, 0.0, 13.25)),
    Vector((3.7383382320404053, -1.269040822982788, 13.25)),
    Vector((7.646280765533447, -1.7811062335968018, 13.25)),
    Vector((11.582489013671875, -1.513932228088379, 13.25)),
    Vector((15.3985595703125, -0.4897831380367279, 13.25)),
    Vector((18.93195343017578, 1.2579444646835327, 13.25)),
    Vector((22.062536239624023, 3.6624577045440674, 13.25)),
    Vector((24.663103103637695, 6.623567581176758, 13.25)),
    Vector((26.634719848632812, 10.041086196899414, 13.25)),
    Vector((18.126285552978516, 16.464183807373047, 13.25)),
    Vector((16.31012725830078, 15.451170921325684, 13.25)),
    Vector((15.674113273620605, 16.798133850097656, 13.25)),
    Vector((3.674727201461792, 12.968722343444824, 13.25)),
    Vector((3.999800443649292, 11.276665687561035, 13.25)),
    Vector((2.6288440227508545, 11.46590805053711, 13.25))
]
unitVectors = [
    Vector((0.9469265937805176, -0.3214499056339264, 0.0)),
    Vector((0.9915242791175842, -0.12992137670516968, 0.0)),
    Vector((0.9977043867111206, 0.06772016733884811, 0.0)),
    Vector((0.9658222198486328, 0.2592053711414337, 0.0)),
    Vector((0.8963437676429749, 0.4433597922325134, 0.0)),
    Vector((0.7930679321289062, 0.6091333627700806, 0.0)),
    Vector((0.6598825454711914, 0.7513687610626221, 0.0)),
    Vector((0.49971702694892883, 0.8661887645721436, 0.0)),
    Vector((-0.7981152534484863, 0.6025047302246094, 0.0)),
    Vector((-0.873332142829895, -0.48712533712387085, 0.0)),
    Vector((-0.42697787284851074, 0.904262125492096, 0.0)),
    Vector((-0.9526633620262146, -0.3040272295475006, 0.0)),
    Vector((0.18866702914237976, -0.9820411205291748, 0.0)),
    Vector((-0.9906070232391357, 0.13674016296863556, 0.0)),
    Vector((-0.22347630560398102, -0.9747093319892883, 0.0))
]
holesInfo = None
firstVertIndex = 15
numPolygonVerts = 15
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
