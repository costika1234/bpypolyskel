import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.6127033829689026, 4.987112998962402, 0.0)),
    Vector((-1.7413673400878906, 5.822009563446045, 0.0)),
    Vector((-1.5559438467025757, 6.590114116668701, 0.0)),
    Vector((-1.467262864112854, 7.369350433349609, 0.0)),
    Vector((-1.483386516571045, 8.315566062927246, 0.0)),
    Vector((-1.6929951906204224, 9.361968994140625, 0.0)),
    Vector((-2.152522087097168, 10.430636405944824, 0.0)),
    Vector((-2.8055338859558105, 11.343456268310547, 0.0)),
    Vector((-3.2973084449768066, 11.888922691345215, 0.0)),
    Vector((-4.047062873840332, 12.47891616821289, 0.0)),
    Vector((-5.232158184051514, 13.068910598754883, 0.0)),
    Vector((-5.9980363845825195, 13.258153915405273, 0.0)),
    Vector((-6.723605155944824, 13.369474411010742, 0.0)),
    Vector((-7.5056071281433105, 13.369475364685059, 0.0)),
    Vector((-8.4569091796875, 13.224761009216309, 0.0)),
    Vector((-29.425880432128906, 6.345275402069092, 0.0)),
    Vector((-22.484649658203125, -8.77193832397461, 0.0)),
    Vector((0.0, 0.0, 18.5850887298584)),
    Vector((0.6127033829689026, 4.987112998962402, 18.5850887298584)),
    Vector((-1.7413673400878906, 5.822009563446045, 18.5850887298584)),
    Vector((-1.5559438467025757, 6.590114116668701, 18.5850887298584)),
    Vector((-1.467262864112854, 7.369350433349609, 18.5850887298584)),
    Vector((-1.483386516571045, 8.315566062927246, 18.5850887298584)),
    Vector((-1.6929951906204224, 9.361968994140625, 18.5850887298584)),
    Vector((-2.152522087097168, 10.430636405944824, 18.5850887298584)),
    Vector((-2.8055338859558105, 11.343456268310547, 18.5850887298584)),
    Vector((-3.2973084449768066, 11.888922691345215, 18.5850887298584)),
    Vector((-4.047062873840332, 12.47891616821289, 18.5850887298584)),
    Vector((-5.232158184051514, 13.068910598754883, 18.5850887298584)),
    Vector((-5.9980363845825195, 13.258153915405273, 18.5850887298584)),
    Vector((-6.723605155944824, 13.369474411010742, 18.5850887298584)),
    Vector((-7.5056071281433105, 13.369475364685059, 18.5850887298584)),
    Vector((-8.4569091796875, 13.224761009216309, 18.5850887298584)),
    Vector((-29.425880432128906, 6.345275402069092, 18.5850887298584)),
    Vector((-22.484649658203125, -8.77193832397461, 18.5850887298584))
]
unitVectors = [
    Vector((0.1219405010342598, 0.9925374388694763, 0.0)),
    Vector((-0.9424805641174316, 0.33426088094711304, 0.0)),
    Vector((0.234663188457489, 0.9720767736434937, 0.0)),
    Vector((0.11307509243488312, 0.9935863614082336, 0.0)),
    Vector((-0.01703767292201519, 0.9998548626899719, 0.0)),
    Vector((-0.19641172885894775, 0.9805215001106262, 0.0)),
    Vector((-0.39502766728401184, 0.9186691641807556, 0.0)),
    Vector((-0.5818266272544861, 0.8133128881454468, 0.0)),
    Vector((-0.6696075201034546, 0.7427151799201965, 0.0)),
    Vector((-0.7858594655990601, 0.6184051036834717, 0.0)),
    Vector((-0.895197331905365, 0.4456700086593628, 0.0)),
    Vector((-0.970802903175354, 0.2398788183927536, 0.0)),
    Vector((-0.9884341359138489, 0.15165065228939056, 0.0)),
    Vector((-1.0, 1.2195292811156833e-06, 0.0)),
    Vector((-0.9886263608932495, -0.15039221942424774, 0.0)),
    Vector((-0.9501702785491943, -0.311731219291687, 0.0)),
    Vector((0.417275995016098, -0.9087797999382019, 0.0)),
    Vector((0.931613564491272, 0.3634504973888397, 0.0))
]
holesInfo = None
firstVertIndex = 18
numPolygonVerts = 18
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
