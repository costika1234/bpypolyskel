import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.18331880867481232, -1.2913061380386353, 0.0)),
    Vector((-0.08799304068088531, -2.115070343017578, 0.0)),
    Vector((0.16865335404872894, -2.9944941997528076, 0.0)),
    Vector((0.8139359354972839, -3.9295780658721924, 0.0)),
    Vector((1.9651788473129272, -4.608626365661621, 0.0)),
    Vector((3.4097323417663574, -5.131827354431152, 0.0)),
    Vector((4.157673358917236, -5.120695114135742, 0.0)),
    Vector((4.934945583343506, -4.920319080352783, 0.0)),
    Vector((6.093520641326904, -4.129949569702148, 0.0)),
    Vector((6.834127902984619, -3.328448534011841, 0.0)),
    Vector((7.574733734130859, -1.7477108240127563, 0.0)),
    Vector((0.7039439082145691, 1.5696048736572266, 0.0)),
    Vector((0.0, 0.0, 6.0192952156066895)),
    Vector((-0.18331880867481232, -1.2913061380386353, 6.0192952156066895)),
    Vector((-0.08799304068088531, -2.115070343017578, 6.0192952156066895)),
    Vector((0.16865335404872894, -2.9944941997528076, 6.0192952156066895)),
    Vector((0.8139359354972839, -3.9295780658721924, 6.0192952156066895)),
    Vector((1.9651788473129272, -4.608626365661621, 6.0192952156066895)),
    Vector((3.4097323417663574, -5.131827354431152, 6.0192952156066895)),
    Vector((4.157673358917236, -5.120695114135742, 6.0192952156066895)),
    Vector((4.934945583343506, -4.920319080352783, 6.0192952156066895)),
    Vector((6.093520641326904, -4.129949569702148, 6.0192952156066895)),
    Vector((6.834127902984619, -3.328448534011841, 6.0192952156066895)),
    Vector((7.574733734130859, -1.7477108240127563, 6.0192952156066895)),
    Vector((0.7039439082145691, 1.5696048736572266, 6.0192952156066895))
]
unitVectors = [
    Vector((-0.14055457711219788, -0.9900729060173035, 0.0)),
    Vector((0.11495262384414673, -0.9933710098266602, 0.0)),
    Vector((0.2801486551761627, -0.9599565863609314, 0.0)),
    Vector((0.567969799041748, -0.8230493664741516, 0.0)),
    Vector((0.8613298535346985, -0.5080461502075195, 0.0)),
    Vector((0.9402298331260681, -0.34054064750671387, 0.0)),
    Vector((0.9998892545700073, 0.014882199466228485, 0.0)),
    Vector((0.9683406949043274, 0.2496323138475418, 0.0)),
    Vector((0.8260838985443115, 0.5635470151901245, 0.0)),
    Vector((0.6786561608314514, 0.7344561815261841, 0.0)),
    Vector((0.4242624342441559, 0.9055392146110535, 0.0)),
    Vector((-0.900532066822052, 0.4347897469997406, 0.0)),
    Vector((-0.4092146158218384, -0.9124380946159363, 0.0))
]
holesInfo = None
firstVertIndex = 13
numPolygonVerts = 13
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
