import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.02355329319834709, -8.18198299407959, 0.0)),
    Vector((4.859829425811768, -8.170848846435547, 0.0)),
    Vector((4.859830379486084, -9.69592571258545, 0.0)),
    Vector((10.182875633239746, -9.68478775024414, 0.0)),
    Vector((10.17502212524414, -8.371217727661133, 0.0)),
    Vector((15.019149780273438, -8.360075950622559, 0.0)),
    Vector((15.01915168762207, -9.33968734741211, 0.0)),
    Vector((15.427412033081055, -10.64212417602539, 0.0)),
    Vector((16.2360782623291, -11.744185447692871, 0.0)),
    Vector((17.350936889648438, -12.523419380187988, 0.0)),
    Vector((18.654220581054688, -12.901901245117188, 0.0)),
    Vector((20.012462615966797, -12.835105895996094, 0.0)),
    Vector((21.284337997436523, -12.334163665771484, 0.0)),
    Vector((22.320680618286133, -11.443604469299316, 0.0)),
    Vector((23.105785369873047, -9.996448516845703, 0.0)),
    Vector((25.5003719329834, -10.018702507019043, 0.0)),
    Vector((25.516063690185547, -7.625333786010742, 0.0)),
    Vector((28.81352424621582, -7.680979251861572, 0.0)),
    Vector((29.967634201049805, -7.146640777587891, 0.0)),
    Vector((30.90190887451172, -6.289475917816162, 0.0)),
    Vector((31.569246292114258, -5.042694568634033, 0.0)),
    Vector((31.77336883544922, -3.6623315811157227, 0.0)),
    Vector((31.498573303222656, -2.2819714546203613, 0.0)),
    Vector((30.768415451049805, -1.0797244310379028, 0.0)),
    Vector((29.669260025024414, -0.20030571520328522, 0.0)),
    Vector((28.342424392700195, 0.2560981214046478, 0.0)),
    Vector((26.93707847595215, 0.24496005475521088, 0.0)),
    Vector((26.316844940185547, 0.011186524294316769, 0.0)),
    Vector((24.997861862182617, -0.03334660455584526, 0.0)),
    Vector((24.942895889282227, 1.925876259803772, 0.0)),
    Vector((22.760295867919922, 1.8702082633972168, 0.0)),
    Vector((21.998735427856445, 2.994532346725464, 0.0)),
    Vector((20.907432556152344, 3.8071610927581787, 0.0)),
    Vector((19.619853973388672, 4.230171203613281, 0.0)),
    Vector((18.253765106201172, 4.207902908325195, 0.0)),
    Vector((16.966188430786133, 3.7514896392822266, 0.0)),
    Vector((15.898444175720215, 2.894326686859131, 0.0)),
    Vector((15.160445213317871, 1.7366021871566772, 0.0)),
    Vector((14.846405029296875, 0.4007675349712372, 0.0)),
    Vector((10.402689933776855, 0.38962674140930176, 0.0)),
    Vector((10.402688026428223, 1.6475369930267334, 0.0)),
    Vector((4.349501132965088, 1.6363979578018188, 0.0)),
    Vector((4.349502086639404, 0.011133439838886261, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((0.02355329319834709, -8.18198299407959, 6.0)),
    Vector((4.859829425811768, -8.170848846435547, 6.0)),
    Vector((4.859830379486084, -9.69592571258545, 6.0)),
    Vector((10.182875633239746, -9.68478775024414, 6.0)),
    Vector((10.17502212524414, -8.371217727661133, 6.0)),
    Vector((15.019149780273438, -8.360075950622559, 6.0)),
    Vector((15.01915168762207, -9.33968734741211, 6.0)),
    Vector((15.427412033081055, -10.64212417602539, 6.0)),
    Vector((16.2360782623291, -11.744185447692871, 6.0)),
    Vector((17.350936889648438, -12.523419380187988, 6.0)),
    Vector((18.654220581054688, -12.901901245117188, 6.0)),
    Vector((20.012462615966797, -12.835105895996094, 6.0)),
    Vector((21.284337997436523, -12.334163665771484, 6.0)),
    Vector((22.320680618286133, -11.443604469299316, 6.0)),
    Vector((23.105785369873047, -9.996448516845703, 6.0)),
    Vector((25.5003719329834, -10.018702507019043, 6.0)),
    Vector((25.516063690185547, -7.625333786010742, 6.0)),
    Vector((28.81352424621582, -7.680979251861572, 6.0)),
    Vector((29.967634201049805, -7.146640777587891, 6.0)),
    Vector((30.90190887451172, -6.289475917816162, 6.0)),
    Vector((31.569246292114258, -5.042694568634033, 6.0)),
    Vector((31.77336883544922, -3.6623315811157227, 6.0)),
    Vector((31.498573303222656, -2.2819714546203613, 6.0)),
    Vector((30.768415451049805, -1.0797244310379028, 6.0)),
    Vector((29.669260025024414, -0.20030571520328522, 6.0)),
    Vector((28.342424392700195, 0.2560981214046478, 6.0)),
    Vector((26.93707847595215, 0.24496005475521088, 6.0)),
    Vector((26.316844940185547, 0.011186524294316769, 6.0)),
    Vector((24.997861862182617, -0.03334660455584526, 6.0)),
    Vector((24.942895889282227, 1.925876259803772, 6.0)),
    Vector((22.760295867919922, 1.8702082633972168, 6.0)),
    Vector((21.998735427856445, 2.994532346725464, 6.0)),
    Vector((20.907432556152344, 3.8071610927581787, 6.0)),
    Vector((19.619853973388672, 4.230171203613281, 6.0)),
    Vector((18.253765106201172, 4.207902908325195, 6.0)),
    Vector((16.966188430786133, 3.7514896392822266, 6.0)),
    Vector((15.898444175720215, 2.894326686859131, 6.0)),
    Vector((15.160445213317871, 1.7366021871566772, 6.0)),
    Vector((14.846405029296875, 0.4007675349712372, 6.0)),
    Vector((10.402689933776855, 0.38962674140930176, 6.0)),
    Vector((10.402688026428223, 1.6475369930267334, 6.0)),
    Vector((4.349501132965088, 1.6363979578018188, 6.0)),
    Vector((4.349502086639404, 0.011133439838886261, 6.0)),
    Vector((0.0, 0.0, 6.0)),
]
unitVectors = [
    Vector((0.9999973177909851, 0.0023022089153528214, 0.0)),
    Vector((6.25328709702444e-07, -1.0, 0.0)),
    Vector((0.9999977946281433, 0.0020923996344208717, 0.0)),
    Vector((-0.005978644359856844, 0.9999821186065674, 0.0)),
    Vector((0.9999973177909851, 0.002300052437931299, 0.0)),
    Vector((1.9470462575554848e-06, -1.0, 0.0)),
    Vector((0.2991084158420563, -0.9542191624641418, 0.0)),
    Vector((0.5915958285331726, -0.8062347769737244, 0.0)),
    Vector((0.8196347951889038, -0.5728863477706909, 0.0)),
    Vector((0.9603246450424194, -0.2788843810558319, 0.0)),
    Vector((0.9987930059432983, 0.04911843687295914, 0.0)),
    Vector((0.9304332137107849, 0.36646145582199097, 0.0)),
    Vector((0.7584367394447327, 0.6517466306686401, 0.0)),
    Vector((0.476859986782074, 0.8789792656898499, 0.0)),
    Vector((0.9999567866325378, -0.009293057024478912, 0.0)),
    Vector((0.006556206848472357, 0.9999784827232361, 0.0)),
    Vector((0.9998576641082764, -0.016872847452759743, 0.0)),
    Vector((0.9074584245681763, 0.42014190554618835, 0.0)),
    Vector((0.7368608117103577, 0.6760444045066833, 0.0)),
    Vector((0.4719020426273346, 0.8816509246826172, 0.0)),
    Vector((0.14628520607948303, 0.989242434501648, 0.0)),
    Vector((-0.1952439844608307, 0.9807546734809875, 0.0)),
    Vector((-0.5190935730934143, 0.854717493057251, 0.0)),
    Vector((-0.7808361053466797, 0.624735951423645, 0.0)),
    Vector((-0.9456199407577515, 0.3252736032009125, 0.0)),
    Vector((-0.9999685883522034, -0.007925249636173248, 0.0)),
    Vector((-0.9357396364212036, -0.3526915907859802, 0.0)),
    Vector((-0.9994304776191711, -0.033743999898433685, 0.0)),
    Vector((-0.028043951839208603, 0.9996066689491272, 0.0)),
    Vector((-0.999674916267395, -0.025497067719697952, 0.0)),
    Vector((-0.560808539390564, 0.8279454708099365, 0.0)),
    Vector((-0.8020585179328918, 0.5972455739974976, 0.0)),
    Vector((-0.9500429630279541, 0.3121190369129181, 0.0)),
    Vector((-0.9998672008514404, -0.016298601403832436, 0.0)),
    Vector((-0.9425358176231384, -0.3341050446033478, 0.0)),
    Vector((-0.7798104286193848, -0.6260156631469727, 0.0)),
    Vector((-0.5375311970710754, -0.8432437777519226, 0.0)),
    Vector((-0.22885024547576904, -0.9734616875648499, 0.0)),
    Vector((-0.9999969005584717, -0.002507082186639309, 0.0)),
    Vector((-1.5162835325099877e-06, 1.0, 0.0)),
    Vector((-0.9999983310699463, -0.0018401904962956905, 0.0)),
    Vector((5.867809704795945e-07, -1.0, 0.0)),
    Vector((-0.9999966621398926, -0.0025596958585083485, 0.0)),
    Vector((0.0028786659240722656, -0.9999958276748657, 0.0)),
]
holesInfo = None
firstVertIndex = 44
numPolygonVerts = 44
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
