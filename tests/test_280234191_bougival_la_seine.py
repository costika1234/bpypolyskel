import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.4905829131603241, 0.10018756240606308, 0.0)),
    Vector((-0.9299108386039734, 0.13358347117900848, 0.0)),
    Vector((-1.3985273838043213, 0.10018771886825562, 0.0)),
    Vector((-1.6914126873016357, 0.033396102488040924, 0.0)),
    Vector((-2.2478950023651123, -0.20037463307380676, 0.0)),
    Vector((-2.6579344272613525, -0.48980513215065, 0.0)),
    Vector((-2.9288535118103027, -0.7569717764854431, 0.0)),
    Vector((-3.1778063774108887, -1.0797981023788452, 0.0)),
    Vector((-3.3608598709106445, -1.4248884916305542, 0.0)),
    Vector((-3.521947145462036, -1.9035621881484985, 0.0)),
    Vector((-3.580524444580078, -2.304312229156494, 0.0)),
    Vector((-3.573202610015869, -2.7941181659698486, 0.0)),
    Vector((-3.412116050720215, -3.272792100906372, 0.0)),
    Vector((1.984301209449768, -8.905558586120605, 0.0)),
    Vector((2.394341468811035, -9.094801902770996, 0.0)),
    Vector((2.9727909564971924, -9.28404426574707, 0.0)),
    Vector((3.272998809814453, -9.317440032958984, 0.0)),
    Vector((3.8587706089019775, -9.28404426574707, 0.0)),
    Vector((4.45918607711792, -9.08366870880127, 0.0)),
    Vector((4.737427711486816, -8.916688919067383, 0.0)),
    Vector((5.147467613220215, -8.571598052978516, 0.0)),
    Vector((5.433030605316162, -8.104056358337402, 0.0)),
    Vector((5.535540580749512, -8.026132583618164, 0.0)),
    Vector((5.718593597412109, -7.558590412139893, 0.0)),
    Vector((5.799136638641357, -6.912937164306641, 0.0)),
    Vector((5.747880935668945, -6.423131465911865, 0.0)),
    Vector((5.623404026031494, -6.022381782531738, 0.0)),
    Vector((5.396417617797852, -5.632763385772705, 0.0)),
    Vector((0.0, 0.0, 2.967606782913208)),
    Vector((-0.4905829131603241, 0.10018756240606308, 2.967606782913208)),
    Vector((-0.9299108386039734, 0.13358347117900848, 2.967606782913208)),
    Vector((-1.3985273838043213, 0.10018771886825562, 2.967606782913208)),
    Vector((-1.6914126873016357, 0.033396102488040924, 2.967606782913208)),
    Vector((-2.2478950023651123, -0.20037463307380676, 2.967606782913208)),
    Vector((-2.6579344272613525, -0.48980513215065, 2.967606782913208)),
    Vector((-2.9288535118103027, -0.7569717764854431, 2.967606782913208)),
    Vector((-3.1778063774108887, -1.0797981023788452, 2.967606782913208)),
    Vector((-3.3608598709106445, -1.4248884916305542, 2.967606782913208)),
    Vector((-3.521947145462036, -1.9035621881484985, 2.967606782913208)),
    Vector((-3.580524444580078, -2.304312229156494, 2.967606782913208)),
    Vector((-3.573202610015869, -2.7941181659698486, 2.967606782913208)),
    Vector((-3.412116050720215, -3.272792100906372, 2.967606782913208)),
    Vector((1.984301209449768, -8.905558586120605, 2.967606782913208)),
    Vector((2.394341468811035, -9.094801902770996, 2.967606782913208)),
    Vector((2.9727909564971924, -9.28404426574707, 2.967606782913208)),
    Vector((3.272998809814453, -9.317440032958984, 2.967606782913208)),
    Vector((3.8587706089019775, -9.28404426574707, 2.967606782913208)),
    Vector((4.45918607711792, -9.08366870880127, 2.967606782913208)),
    Vector((4.737427711486816, -8.916688919067383, 2.967606782913208)),
    Vector((5.147467613220215, -8.571598052978516, 2.967606782913208)),
    Vector((5.433030605316162, -8.104056358337402, 2.967606782913208)),
    Vector((5.535540580749512, -8.026132583618164, 2.967606782913208)),
    Vector((5.718593597412109, -7.558590412139893, 2.967606782913208)),
    Vector((5.799136638641357, -6.912937164306641, 2.967606782913208)),
    Vector((5.747880935668945, -6.423131465911865, 2.967606782913208)),
    Vector((5.623404026031494, -6.022381782531738, 2.967606782913208)),
    Vector((5.396417617797852, -5.632763385772705, 2.967606782913208)),
]
unitVectors = [
    Vector((-0.9797772169113159, 0.20009154081344604, 0.0)),
    Vector((-0.9971233606338501, 0.07579723000526428, 0.0)),
    Vector((-0.9974703192710876, -0.07108428329229355, 0.0)),
    Vector((-0.9749695062637329, -0.22233887016773224, 0.0)),
    Vector((-0.921953558921814, -0.3873002827167511, 0.0)),
    Vector((-0.8169763684272766, -0.5766710638999939, 0.0)),
    Vector((-0.7120206356048584, -0.7021585702896118, 0.0)),
    Vector((-0.6106733679771423, -0.7918826341629028, 0.0)),
    Vector((-0.46860459446907043, -0.8834080696105957, 0.0)),
    Vector((-0.318951815366745, -0.9477709531784058, 0.0)),
    Vector((-0.1446322649717331, -0.9894854426383972, 0.0)),
    Vector((0.014946769922971725, -0.9998883008956909, 0.0)),
    Vector((0.3189503848552704, -0.947771430015564, 0.0)),
    Vector((0.6917949914932251, -0.7220938801765442, 0.0)),
    Vector((0.9079644083976746, -0.41904714703559875, 0.0)),
    Vector((0.9504303932189941, -0.3109375834465027, 0.0)),
    Vector((0.993869423866272, -0.11056017130613327, 0.0)),
    Vector((0.9983788132667542, 0.05691913887858391, 0.0)),
    Vector((0.9485708475112915, 0.3165648281574249, 0.0)),
    Vector((0.8574455976486206, 0.5145746469497681, 0.0)),
    Vector((0.7651004791259766, 0.6439109444618225, 0.0)),
    Vector((0.5212414264678955, 0.8534092307090759, 0.0)),
    Vector((0.7961015701293945, 0.6051629781723022, 0.0)),
    Vector((0.364575058221817, 0.9311739802360535, 0.0)),
    Vector((0.12378714233636856, 0.9923087954521179, 0.0)),
    Vector((-0.10407666862010956, 0.9945692420005798, 0.0)),
    Vector((-0.29663029313087463, 0.9549923539161682, 0.0)),
    Vector((-0.5033894777297974, 0.8640596866607666, 0.0)),
    Vector((-0.691795289516449, 0.7220937013626099, 0.0)),
]
holesInfo = None
firstVertIndex = 29
numPolygonVerts = 29
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
