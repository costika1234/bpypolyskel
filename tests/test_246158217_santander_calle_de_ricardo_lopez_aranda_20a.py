import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((7.427860736846924, 1.9369632005691528, 0.0)),
    Vector((9.884956359863281, 1.4137648344039917, 0.0)),
    Vector((12.382462501525879, 1.7254635095596313, 0.0)),
    Vector((14.637491226196289, 2.816399097442627, 0.0)),
    Vector((16.124675750732422, 4.19676399230957, 0.0)),
    Vector((22.881677627563477, 5.966763496398926, 0.0)),
    Vector((25.34685516357422, 5.443570613861084, 0.0)),
    Vector((27.601882934570312, 5.6773505210876465, 0.0)),
    Vector((29.687175750732422, 6.579047203063965, 0.0)),
    Vector((31.594648361206055, 8.226584434509277, 0.0)),
    Vector((38.699188232421875, 10.074524879455566, 0.0)),
    Vector((40.81681823730469, 9.4622802734375, 0.0)),
    Vector((43.07184600830078, 9.707197189331055, 0.0)),
    Vector((45.16521453857422, 10.608899116516113, 0.0)),
    Vector((46.66047286987305, 12.15625, 0.0)),
    Vector((50.43501281738281, 13.135889053344727, 0.0)),
    Vector((47.92935562133789, 22.831798553466797, 0.0)),
    Vector((-13.942383766174316, 6.7237114906311035, 0.0)),
    Vector((-11.428730010986328, -2.9722206592559814, 0.0)),
    Vector((-7.411700248718262, -1.9258230924606323, 0.0)),
    Vector((-5.585043907165527, -2.6160056591033936, 0.0)),
    Vector((-3.0875349044799805, -2.3043127059936523, 0.0)),
    Vector((-1.2527954578399658, -1.4805490970611572, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((7.427860736846924, 1.9369632005691528, 13.225610733032227)),
    Vector((9.884956359863281, 1.4137648344039917, 13.225610733032227)),
    Vector((12.382462501525879, 1.7254635095596313, 13.225610733032227)),
    Vector((14.637491226196289, 2.816399097442627, 13.225610733032227)),
    Vector((16.124675750732422, 4.19676399230957, 13.225610733032227)),
    Vector((22.881677627563477, 5.966763496398926, 13.225610733032227)),
    Vector((25.34685516357422, 5.443570613861084, 13.225610733032227)),
    Vector((27.601882934570312, 5.6773505210876465, 13.225610733032227)),
    Vector((29.687175750732422, 6.579047203063965, 13.225610733032227)),
    Vector((31.594648361206055, 8.226584434509277, 13.225610733032227)),
    Vector((38.699188232421875, 10.074524879455566, 13.225610733032227)),
    Vector((40.81681823730469, 9.4622802734375, 13.225610733032227)),
    Vector((43.07184600830078, 9.707197189331055, 13.225610733032227)),
    Vector((45.16521453857422, 10.608899116516113, 13.225610733032227)),
    Vector((46.66047286987305, 12.15625, 13.225610733032227)),
    Vector((50.43501281738281, 13.135889053344727, 13.225610733032227)),
    Vector((47.92935562133789, 22.831798553466797, 13.225610733032227)),
    Vector((-13.942383766174316, 6.7237114906311035, 13.225610733032227)),
    Vector((-11.428730010986328, -2.9722206592559814, 13.225610733032227)),
    Vector((-7.411700248718262, -1.9258230924606323, 13.225610733032227)),
    Vector((-5.585043907165527, -2.6160056591033936, 13.225610733032227)),
    Vector((-3.0875349044799805, -2.3043127059936523, 13.225610733032227)),
    Vector((-1.2527954578399658, -1.4805490970611572, 13.225610733032227)),
    Vector((0.0, 0.0, 13.225610733032227))
]
unitVectors = [
    Vector((0.9780725836753845, -0.2082645744085312, 0.0)),
    Vector((0.9923017621040344, 0.12384320050477982, 0.0)),
    Vector((0.9001916646957397, 0.4354938268661499, 0.0)),
    Vector((0.7329390645027161, 0.680294394493103, 0.0)),
    Vector((0.9673613905906677, 0.2534007132053375, 0.0)),
    Vector((0.9782118797302246, -0.2076091766357422, 0.0)),
    Vector((0.9946691393852234, 0.10311786830425262, 0.0)),
    Vector((0.9178653359413147, 0.3968920409679413, 0.0)),
    Vector((0.7567887306213379, 0.6536595225334167, 0.0)),
    Vector((0.9677973389625549, 0.2517308294773102, 0.0)),
    Vector((0.9606555104255676, -0.2777426540851593, 0.0)),
    Vector((0.9941536784172058, 0.10797430574893951, 0.0)),
    Vector((0.9184216260910034, 0.39560285210609436, 0.0)),
    Vector((0.6948985457420349, 0.7191078066825867, 0.0)),
    Vector((0.9679311513900757, 0.25121554732322693, 0.0)),
    Vector((-0.250204473733902, 0.9681930541992188, 0.0)),
    Vector((-0.9677408337593079, -0.25194787979125977, 0.0)),
    Vector((0.25095218420028687, -0.9679994583129883, 0.0)),
    Vector((0.9677068591117859, 0.2520783245563507, 0.0)),
    Vector((0.9354531168937683, -0.3534509539604187, 0.0)),
    Vector((0.9923021793365479, 0.12384083122015, 0.0)),
    Vector((0.9122689962387085, 0.4095916748046875, 0.0)),
    Vector((0.645949125289917, 0.7633803486824036, 0.0)),
    Vector((0.9676408171653748, 0.2523317039012909, 0.0))
]
holesInfo = None
firstVertIndex = 24
numPolygonVerts = 24
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
