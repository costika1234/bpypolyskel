import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((13.650555610656738, -10.052131652832031, 0.0)),
    Vector((27.17536163330078, 14.872355461120605, 0.0)),
    Vector((37.84584426879883, 23.922698974609375, 0.0)),
    Vector((27.6009464263916, 37.10285949707031, 0.0)),
    Vector((15.513785362243652, 27.51820182800293, 0.0)),
    Vector((15.02527141571045, 27.729707717895508, 0.0)),
    Vector((14.41811752319336, 28.108192443847656, 0.0)),
    Vector((13.134024620056152, 28.675918579101562, 0.0)),
    Vector((12.394275665283203, 28.776103973388672, 0.0)),
    Vector((11.65452766418457, 28.60912322998047, 0.0)),
    Vector((11.033419609069824, 28.17497444152832, 0.0)),
    Vector((10.412311553955078, 27.451396942138672, 0.0)),
    Vector((10.216907501220703, 26.449522018432617, 0.0)),
    Vector((10.328569412231445, 25.547834396362305, 0.0)),
    Vector((10.607722282409668, 24.679542541503906, 0.0)),
    Vector((11.291642189025879, 24.056154251098633, 0.0)),
    Vector((12.150031089782715, 23.7110652923584, 0.0)),
    Vector((0.0, 0.0, 11.855886459350586)),
    Vector((13.650555610656738, -10.052131652832031, 11.855886459350586)),
    Vector((27.17536163330078, 14.872355461120605, 11.855886459350586)),
    Vector((37.84584426879883, 23.922698974609375, 11.855886459350586)),
    Vector((27.6009464263916, 37.10285949707031, 11.855886459350586)),
    Vector((15.513785362243652, 27.51820182800293, 11.855886459350586)),
    Vector((15.02527141571045, 27.729707717895508, 11.855886459350586)),
    Vector((14.41811752319336, 28.108192443847656, 11.855886459350586)),
    Vector((13.134024620056152, 28.675918579101562, 11.855886459350586)),
    Vector((12.394275665283203, 28.776103973388672, 11.855886459350586)),
    Vector((11.65452766418457, 28.60912322998047, 11.855886459350586)),
    Vector((11.033419609069824, 28.17497444152832, 11.855886459350586)),
    Vector((10.412311553955078, 27.451396942138672, 11.855886459350586)),
    Vector((10.216907501220703, 26.449522018432617, 11.855886459350586)),
    Vector((10.328569412231445, 25.547834396362305, 11.855886459350586)),
    Vector((10.607722282409668, 24.679542541503906, 11.855886459350586)),
    Vector((11.291642189025879, 24.056154251098633, 11.855886459350586)),
    Vector((12.150031089782715, 23.7110652923584, 11.855886459350586))
]
unitVectors = [
    Vector((0.805229663848877, -0.5929630398750305, 0.0)),
    Vector((0.47693851590156555, 0.8789367079734802, 0.0)),
    Vector((0.7626290321350098, 0.6468362212181091, 0.0)),
    Vector((-0.6137040257453918, 0.78953617811203, 0.0)),
    Vector((-0.7835517525672913, -0.6213266253471375, 0.0)),
    Vector((-0.9176813364028931, 0.39731723070144653, 0.0)),
    Vector((-0.848617434501648, 0.5290071368217468, 0.0)),
    Vector((-0.9145980477333069, 0.4043642282485962, 0.0)),
    Vector((-0.9909533858299255, 0.13420641422271729, 0.0)),
    Vector((-0.9754577875137329, -0.22018669545650482, 0.0)),
    Vector((-0.8196203708648682, -0.5729070901870728, 0.0)),
    Vector((-0.6513345241546631, -0.7587906718254089, 0.0)),
    Vector((-0.19143134355545044, -0.9815060496330261, 0.0)),
    Vector((0.12289781868457794, -0.9924193024635315, 0.0)),
    Vector((0.30606788396835327, -0.9520096778869629, 0.0)),
    Vector((0.7390557527542114, -0.6736442446708679, 0.0)),
    Vector((0.9278291463851929, -0.3730052709579468, 0.0)),
    Vector((-0.4560346305370331, -0.8899620771408081, 0.0))
]
holesInfo = None
firstVertIndex = 18
numPolygonVerts = 18
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
