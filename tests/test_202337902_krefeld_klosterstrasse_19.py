import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-1.5648926496505737, -3.183737277984619, 0.0)),
    Vector((2.4481937885284424, -16.074533462524414, 0.0)),
    Vector((10.029243469238281, -13.725683212280273, 0.0)),
    Vector((9.59802532196045, -12.32305908203125, 0.0)),
    Vector((9.187675476074219, -12.445510864257812, 0.0)),
    Vector((7.302836894989014, -6.334074020385742, 0.0)),
    Vector((12.706932067871094, -4.653139114379883, 0.0)),
    Vector((15.029951095581055, -12.167198181152344, 0.0)),
    Vector((34.831050872802734, -6.033397674560547, 0.0)),
    Vector((34.76150131225586, -5.766231060028076, 0.0)),
    Vector((46.48078155517578, -2.137122631072998, 0.0)),
    Vector((45.465309143066406, 1.1356613636016846, 0.0)),
    Vector((44.964534759521484, 2.315643548965454, 0.0)),
    Vector((44.2272834777832, 3.651470899581909, 0.0)),
    Vector((43.29529571533203, 4.9539008140563965, 0.0)),
    Vector((42.36330795288086, 5.989164352416992, 0.0)),
    Vector((41.35481643676758, 6.901976108551025, 0.0)),
    Vector((40.40892028808594, 7.614413261413574, 0.0)),
    Vector((39.30305862426758, 8.293453216552734, 0.0)),
    Vector((38.41280746459961, 8.727592468261719, 0.0)),
    Vector((37.06352233886719, 9.228520393371582, 0.0)),
    Vector((34.865718841552734, 9.673783302307129, 0.0)),
    Vector((33.1339111328125, 9.773959159851074, 0.0)),
    Vector((31.443830490112305, 9.629232406616211, 0.0)),
    Vector((29.92067527770996, 9.306397438049316, 0.0)),
    Vector((0.0, 0.0, 12.371246337890625)),
    Vector((-1.5648926496505737, -3.183737277984619, 12.371246337890625)),
    Vector((2.4481937885284424, -16.074533462524414, 12.371246337890625)),
    Vector((10.029243469238281, -13.725683212280273, 12.371246337890625)),
    Vector((9.59802532196045, -12.32305908203125, 12.371246337890625)),
    Vector((9.187675476074219, -12.445510864257812, 12.371246337890625)),
    Vector((7.302836894989014, -6.334074020385742, 12.371246337890625)),
    Vector((12.706932067871094, -4.653139114379883, 12.371246337890625)),
    Vector((15.029951095581055, -12.167198181152344, 12.371246337890625)),
    Vector((34.831050872802734, -6.033397674560547, 12.371246337890625)),
    Vector((34.76150131225586, -5.766231060028076, 12.371246337890625)),
    Vector((46.48078155517578, -2.137122631072998, 12.371246337890625)),
    Vector((45.465309143066406, 1.1356613636016846, 12.371246337890625)),
    Vector((44.964534759521484, 2.315643548965454, 12.371246337890625)),
    Vector((44.2272834777832, 3.651470899581909, 12.371246337890625)),
    Vector((43.29529571533203, 4.9539008140563965, 12.371246337890625)),
    Vector((42.36330795288086, 5.989164352416992, 12.371246337890625)),
    Vector((41.35481643676758, 6.901976108551025, 12.371246337890625)),
    Vector((40.40892028808594, 7.614413261413574, 12.371246337890625)),
    Vector((39.30305862426758, 8.293453216552734, 12.371246337890625)),
    Vector((38.41280746459961, 8.727592468261719, 12.371246337890625)),
    Vector((37.06352233886719, 9.228520393371582, 12.371246337890625)),
    Vector((34.865718841552734, 9.673783302307129, 12.371246337890625)),
    Vector((33.1339111328125, 9.773959159851074, 12.371246337890625)),
    Vector((31.443830490112305, 9.629232406616211, 12.371246337890625)),
    Vector((29.92067527770996, 9.306397438049316, 12.371246337890625)),
]
unitVectors = [
    Vector((-0.4411199390888214, -0.8974481821060181, 0.0)),
    Vector((0.29724323749542236, -0.9548017978668213, 0.0)),
    Vector((0.9552028179168701, 0.2959522008895874, 0.0)),
    Vector((-0.2938626706600189, 0.9558476805686951, 0.0)),
    Vector((-0.9582450985908508, -0.285948246717453, 0.0)),
    Vector((-0.2947137653827667, 0.9555855393409729, 0.0)),
    Vector((0.95487380027771, 0.2970119118690491, 0.0)),
    Vector((0.29536330699920654, -0.9553849697113037, 0.0)),
    Vector((0.9552192091941833, 0.2958989143371582, 0.0)),
    Vector((-0.251926451921463, 0.967746376991272, 0.0)),
    Vector((0.9552464485168457, 0.29581108689308167, 0.0)),
    Vector((-0.2963408827781677, 0.9550822377204895, 0.0)),
    Vector((-0.390666127204895, 0.9205324053764343, 0.0)),
    Vector((-0.48319947719573975, 0.8755102753639221, 0.0)),
    Vector((-0.5819328427314758, 0.8132367730140686, 0.0)),
    Vector((-0.6690641641616821, 0.7432047724723816, 0.0)),
    Vector((-0.7414015531539917, 0.6710616946220398, 0.0)),
    Vector((-0.7987762093544006, 0.6016282439231873, 0.0)),
    Vector((-0.852170467376709, 0.5232641696929932, 0.0)),
    Vector((-0.8988199830055237, 0.4383179247379303, 0.0)),
    Vector((-0.9374786019325256, 0.34804296493530273, 0.0)),
    Vector((-0.9800886511802673, 0.19856058061122894, 0.0)),
    Vector((-0.9983311891555786, 0.05774814635515213, 0.0)),
    Vector((-0.9963535070419312, -0.08532078564167023, 0.0)),
    Vector((-0.9782677888870239, -0.20734527707099915, 0.0)),
    Vector((-0.9548771381378174, -0.29700085520744324, 0.0)),
]
holesInfo = None
firstVertIndex = 26
numPolygonVerts = 26
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
