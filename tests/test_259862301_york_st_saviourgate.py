import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((17.91960334777832, 12.512345314025879, 0.0)),
    Vector((4.38818883895874, 31.570209503173828, 0.0)),
    Vector((2.632913112640381, 31.970958709716797, 0.0)),
    Vector((1.0544750690460205, 32.137935638427734, 0.0)),
    Vector((-1.3623031377792358, 32.182464599609375, 0.0)),
    Vector((-3.5171003341674805, 31.88190269470215, 0.0)),
    Vector((-5.986276149749756, 30.891162872314453, 0.0)),
    Vector((-7.996986389160156, 29.421749114990234, 0.0)),
    Vector((-9.889806747436523, 27.60724449157715, 0.0)),
    Vector((-11.507549285888672, 25.202747344970703, 0.0)),
    Vector((-12.7454195022583, 22.85390853881836, 0.0)),
    Vector((-13.308690071105957, 19.536590576171875, 0.0)),
    Vector((0.0, 0.0, 15.180795669555664)),
    Vector((17.91960334777832, 12.512345314025879, 15.180795669555664)),
    Vector((4.38818883895874, 31.570209503173828, 15.180795669555664)),
    Vector((2.632913112640381, 31.970958709716797, 15.180795669555664)),
    Vector((1.0544750690460205, 32.137935638427734, 15.180795669555664)),
    Vector((-1.3623031377792358, 32.182464599609375, 15.180795669555664)),
    Vector((-3.5171003341674805, 31.88190269470215, 15.180795669555664)),
    Vector((-5.986276149749756, 30.891162872314453, 15.180795669555664)),
    Vector((-7.996986389160156, 29.421749114990234, 15.180795669555664)),
    Vector((-9.889806747436523, 27.60724449157715, 15.180795669555664)),
    Vector((-11.507549285888672, 25.202747344970703, 15.180795669555664)),
    Vector((-12.7454195022583, 22.85390853881836, 15.180795669555664)),
    Vector((-13.308690071105957, 19.536590576171875, 15.180795669555664))
]
unitVectors = [
    Vector((0.8199058175086975, 0.5724984407424927, 0.0)),
    Vector((-0.5789313316345215, 0.815376341342926, 0.0)),
    Vector((-0.9749135375022888, 0.22258374094963074, 0.0)),
    Vector((-0.9944511651992798, 0.1051991879940033, 0.0)),
    Vector((-0.9998303055763245, 0.018421800807118416, 0.0)),
    Vector((-0.990411639213562, -0.13814759254455566, 0.0)),
    Vector((-0.928078293800354, -0.37238502502441406, 0.0)),
    Vector((-0.807381808757782, -0.5900292992591858, 0.0)),
    Vector((-0.7218829989433289, -0.6920149922370911, 0.0)),
    Vector((-0.5582175254821777, -0.8296946883201599, 0.0)),
    Vector((-0.4662298560142517, -0.8846636414527893, 0.0)),
    Vector((-0.16740095615386963, -0.9858888983726501, 0.0)),
    Vector((0.5629985332489014, -0.8264579176902771, 0.0))
]
holesInfo = None
firstVertIndex = 13
numPolygonVerts = 13
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
