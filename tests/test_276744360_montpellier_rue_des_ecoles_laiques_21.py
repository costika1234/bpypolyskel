import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-0.3223797380924225, 0.45640993118286133, 0.0)),
    Vector((-10.6949462890625, 1.0575437545776367, 0.0)),
    Vector((-14.97453784942627, 0.5677461624145508, 0.0)),
    Vector((-17.094186782836914, 0.011153774335980415, 0.0)),
    Vector((-21.0191650390625, -1.8590024709701538, 0.0)),
    Vector((-24.033424377441406, -3.985194683074951, 0.0)),
    Vector((-25.532495498657227, -5.365550994873047, 0.0)),
    Vector((-27.781108856201172, -8.170792579650879, 0.0)),
    Vector((-28.248563766479492, -8.927763938903809, 0.0)),
    Vector((-30.150623321533203, -12.83506965637207, 0.0)),
    Vector((-30.98076629638672, -15.684844970703125, 0.0)),
    Vector((-31.432119369506836, -19.937246322631836, 0.0)),
    Vector((-31.33541488647461, -22.096845626831055, 0.0)),
    Vector((-31.021102905273438, -24.22304916381836, 0.0)),
    Vector((-29.66712188720703, -28.497724533081055, 0.0)),
    Vector((-26.652877807617188, -33.42919158935547, 0.0)),
    Vector((-23.743396759033203, -36.4348258972168, 0.0)),
    Vector((-21.7365779876709, -37.89311981201172, 0.0)),
    Vector((-20.83390998840332, -38.4385871887207, 0.0)),
    Vector((-18.553064346313477, -39.551788330078125, 0.0)),
    Vector((-12.903328895568848, -41.18819808959961, 0.0)),
    Vector((-3.538139820098877, -41.967445373535156, 0.0)),
    Vector((-3.0626227855682373, -33.440372467041016, 0.0)),
    Vector((-11.057679176330566, -32.69452667236328, 0.0)),
    Vector((-14.619991302490234, -31.915281295776367, 0.0)),
    Vector((-15.538777351379395, -31.5701904296875, 0.0)),
    Vector((-16.425325393676758, -31.124910354614258, 0.0)),
    Vector((-18.08558464050293, -30.045106887817383, 0.0)),
    Vector((-19.39928436279297, -28.842851638793945, 0.0)),
    Vector((-21.37386131286621, -26.226837158203125, 0.0)),
    Vector((-22.445768356323242, -23.555166244506836, 0.0)),
    Vector((-22.840679168701172, -21.96329689025879, 0.0)),
    Vector((-22.969627380371094, -20.315767288208008, 0.0)),
    Vector((-22.65529441833496, -17.27674674987793, 0.0)),
    Vector((-22.187837600708008, -15.707143783569336, 0.0)),
    Vector((-20.64040184020996, -12.746049880981445, 0.0)),
    Vector((-19.971460342407227, -11.855496406555176, 0.0)),
    Vector((-17.4971866607666, -9.662508964538574, 0.0)),
    Vector((-15.071271896362305, -8.360076904296875, 0.0)),
    Vector((-13.959059715270996, -7.948196887969971, 0.0)),
    Vector((-12.81460952758789, -7.669900417327881, 0.0)),
    Vector((-11.654041290283203, -7.491791725158691, 0.0)),
    Vector((-0.9510213732719421, -8.015003204345703, 0.0)),
    Vector((-0.8946048617362976, -7.848023891448975, 0.0)),
    Vector((-0.604462742805481, -7.848023891448975, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.3223797380924225, 0.45640993118286133, 12.0)),
    Vector((-10.6949462890625, 1.0575437545776367, 12.0)),
    Vector((-14.97453784942627, 0.5677461624145508, 12.0)),
    Vector((-17.094186782836914, 0.011153774335980415, 12.0)),
    Vector((-21.0191650390625, -1.8590024709701538, 12.0)),
    Vector((-24.033424377441406, -3.985194683074951, 12.0)),
    Vector((-25.532495498657227, -5.365550994873047, 12.0)),
    Vector((-27.781108856201172, -8.170792579650879, 12.0)),
    Vector((-28.248563766479492, -8.927763938903809, 12.0)),
    Vector((-30.150623321533203, -12.83506965637207, 12.0)),
    Vector((-30.98076629638672, -15.684844970703125, 12.0)),
    Vector((-31.432119369506836, -19.937246322631836, 12.0)),
    Vector((-31.33541488647461, -22.096845626831055, 12.0)),
    Vector((-31.021102905273438, -24.22304916381836, 12.0)),
    Vector((-29.66712188720703, -28.497724533081055, 12.0)),
    Vector((-26.652877807617188, -33.42919158935547, 12.0)),
    Vector((-23.743396759033203, -36.4348258972168, 12.0)),
    Vector((-21.7365779876709, -37.89311981201172, 12.0)),
    Vector((-20.83390998840332, -38.4385871887207, 12.0)),
    Vector((-18.553064346313477, -39.551788330078125, 12.0)),
    Vector((-12.903328895568848, -41.18819808959961, 12.0)),
    Vector((-3.538139820098877, -41.967445373535156, 12.0)),
    Vector((-3.0626227855682373, -33.440372467041016, 12.0)),
    Vector((-11.057679176330566, -32.69452667236328, 12.0)),
    Vector((-14.619991302490234, -31.915281295776367, 12.0)),
    Vector((-15.538777351379395, -31.5701904296875, 12.0)),
    Vector((-16.425325393676758, -31.124910354614258, 12.0)),
    Vector((-18.08558464050293, -30.045106887817383, 12.0)),
    Vector((-19.39928436279297, -28.842851638793945, 12.0)),
    Vector((-21.37386131286621, -26.226837158203125, 12.0)),
    Vector((-22.445768356323242, -23.555166244506836, 12.0)),
    Vector((-22.840679168701172, -21.96329689025879, 12.0)),
    Vector((-22.969627380371094, -20.315767288208008, 12.0)),
    Vector((-22.65529441833496, -17.27674674987793, 12.0)),
    Vector((-22.187837600708008, -15.707143783569336, 12.0)),
    Vector((-20.64040184020996, -12.746049880981445, 12.0)),
    Vector((-19.971460342407227, -11.855496406555176, 12.0)),
    Vector((-17.4971866607666, -9.662508964538574, 12.0)),
    Vector((-15.071271896362305, -8.360076904296875, 12.0)),
    Vector((-13.959059715270996, -7.948196887969971, 12.0)),
    Vector((-12.81460952758789, -7.669900417327881, 12.0)),
    Vector((-11.654041290283203, -7.491791725158691, 12.0)),
    Vector((-0.9510213732719421, -8.015003204345703, 12.0)),
    Vector((-0.8946048617362976, -7.848023891448975, 12.0)),
    Vector((-0.604462742805481, -7.848023891448975, 12.0)),
    Vector((0.0, 0.0, 12.0))
]
unitVectors = [
    Vector((-0.9983248710632324, 0.057857122272253036, 0.0)),
    Vector((-0.9935142993927002, -0.11370732635259628, 0.0)),
    Vector((-0.9672102928161621, -0.2539769113063812, 0.0)),
    Vector((-0.9027605652809143, -0.4301433563232422, 0.0)),
    Vector((-0.8171620965003967, -0.5764080882072449, 0.0)),
    Vector((-0.7356348037719727, -0.677378237247467, 0.0)),
    Vector((-0.6254444122314453, -0.7802687287330627, 0.0)),
    Vector((-0.5254227519035339, -0.8508413434028625, 0.0)),
    Vector((-0.43769046664237976, -0.8991256356239319, 0.0)),
    Vector((-0.2796765863895416, -0.9600942134857178, 0.0)),
    Vector((-0.10554786771535873, -0.994414210319519, 0.0)),
    Vector((0.04473407194018364, -0.9989988803863525, 0.0)),
    Vector((0.1462385505437851, -0.9892492890357971, 0.0)),
    Vector((0.3019593358039856, -0.9533207416534424, 0.0)),
    Vector((0.521521806716919, -0.8532379865646362, 0.0)),
    Vector((0.6955205202102661, -0.7185062170028687, 0.0)),
    Vector((0.8089681267738342, -0.587852418422699, 0.0)),
    Vector((0.855871319770813, -0.5171889066696167, 0.0)),
    Vector((0.8986762762069702, -0.43861252069473267, 0.0)),
    Vector((0.9605206847190857, -0.2782086730003357, 0.0)),
    Vector((0.9965562224388123, -0.08292024582624435, 0.0)),
    Vector((0.05567905679345131, 0.9984487295150757, 0.0)),
    Vector((-0.9956768155097961, 0.0928850769996643, 0.0)),
    Vector((-0.9769006371498108, 0.21369415521621704, 0.0)),
    Vector((-0.936146080493927, 0.3516111969947815, 0.0)),
    Vector((-0.8936169743537903, 0.4488305449485779, 0.0)),
    Vector((-0.8382971286773682, 0.5452136993408203, 0.0)),
    Vector((-0.7377048134803772, 0.6751234531402588, 0.0)),
    Vector((-0.602450966835022, 0.7981559634208679, 0.0)),
    Vector((-0.37236031889915466, 0.9280881881713867, 0.0)),
    Vector((-0.2407812476158142, 0.9705793857574463, 0.0)),
    Vector((-0.07802899181842804, 0.996951162815094, 0.0)),
    Vector((0.10288345068693161, 0.994693398475647, 0.0)),
    Vector((0.2854292094707489, 0.9583998322486877, 0.0)),
    Vector((0.46315816044807434, 0.8862757682800293, 0.0)),
    Vector((0.6005895733833313, 0.7995573878288269, 0.0)),
    Vector((0.7483647465705872, 0.663287341594696, 0.0)),
    Vector((0.8810510635375977, 0.4730212092399597, 0.0)),
    Vector((0.9377626776695251, 0.3472769856452942, 0.0)),
    Vector((0.9716838002204895, 0.2362847924232483, 0.0)),
    Vector((0.9884279370307922, 0.15169087052345276, 0.0)),
    Vector((0.9988072514533997, -0.04882616549730301, 0.0)),
    Vector((0.32008931040763855, 0.9473873972892761, 0.0)),
    Vector((1.0, 0.0, 0.0)),
    Vector((0.07679356634616852, 0.997046947479248, 0.0)),
    Vector((-0.5769316554069519, 0.8167924880981445, 0.0))
]
holesInfo = None
firstVertIndex = 46
numPolygonVerts = 46
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
