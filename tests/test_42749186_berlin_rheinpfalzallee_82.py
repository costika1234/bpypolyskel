import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-6.29042387008667, -74.40594482421875, 0.0)),
    Vector((-6.995384693145752, -74.32801818847656, 0.0)),
    Vector((-7.0970635414123535, -75.53026580810547, 0.0)),
    Vector((-6.364988327026367, -75.5302734375, 0.0)),
    Vector((-6.995397090911865, -82.78829956054688, 0.0)),
    Vector((-7.551232814788818, -82.7326431274414, 0.0)),
    Vector((-7.625797748565674, -83.87922668457031, 0.0)),
    Vector((-7.117411136627197, -83.91262817382812, 0.0)),
    Vector((-13.726644515991211, -158.32969665527344, 0.0)),
    Vector((1.1659177541732788, -159.74346923828125, 0.0)),
    Vector((4.270483493804932, -126.15837860107422, 0.0)),
    Vector((4.826324462890625, -126.1249771118164, 0.0)),
    Vector((5.226252555847168, -120.5367431640625, 0.0)),
    Vector((4.792426109313965, -120.5367431640625, 0.0)),
    Vector((7.673252105712891, -87.00730895996094, 0.0)),
    Vector((13.367185592651367, -87.44144439697266, 0.0)),
    Vector((13.645096778869629, -84.88109588623047, 0.0)),
    Vector((15.366833686828613, -85.15938568115234, 0.0)),
    Vector((15.868440628051758, -84.89221954345703, 0.0)),
    Vector((16.004009246826172, -84.3801498413086, 0.0)),
    Vector((15.170254707336426, -84.22430419921875, 0.0)),
    Vector((15.170254707336426, -84.21317291259766, 0.0)),
    Vector((15.780317306518555, -83.97940063476562, 0.0)),
    Vector((16.336153030395508, -83.64543914794922, 0.0)),
    Vector((16.810646057128906, -83.21128845214844, 0.0)),
    Vector((17.197017669677734, -82.6880874633789, 0.0)),
    Vector((17.474933624267578, -82.09809112548828, 0.0)),
    Vector((17.63761329650879, -81.47470092773438, 0.0)),
    Vector((17.671504974365234, -80.82904815673828, 0.0)),
    Vector((17.58338165283203, -80.18339538574219, 0.0)),
    Vector((17.36646842956543, -79.582275390625, 0.0)),
    Vector((17.041099548339844, -79.01454162597656, 0.0)),
    Vector((16.61405372619629, -78.53587341308594, 0.0)),
    Vector((16.098886489868164, -78.12399291992188, 0.0)),
    Vector((16.9936466217041, -78.3243637084961, 0.0)),
    Vector((17.007204055786133, -78.0126724243164, 0.0)),
    Vector((16.871631622314453, -77.64531707763672, 0.0)),
    Vector((16.67505645751953, -77.4004135131836, 0.0)),
    Vector((16.34290885925293, -77.15550994873047, 0.0)),
    Vector((14.397485733032227, -76.91061401367188, 0.0)),
    Vector((14.553383827209473, -74.617431640625, 0.0)),
    Vector((9.008590698242188, -74.1387710571289, 0.0)),
    Vector((14.993760108947754, -1.3914706707000732, 0.0)),
    Vector((0.0, 0.0, 12.733478546142578)),
    Vector((-6.29042387008667, -74.40594482421875, 12.733478546142578)),
    Vector((-6.995384693145752, -74.32801818847656, 12.733478546142578)),
    Vector((-7.0970635414123535, -75.53026580810547, 12.733478546142578)),
    Vector((-6.364988327026367, -75.5302734375, 12.733478546142578)),
    Vector((-6.995397090911865, -82.78829956054688, 12.733478546142578)),
    Vector((-7.551232814788818, -82.7326431274414, 12.733478546142578)),
    Vector((-7.625797748565674, -83.87922668457031, 12.733478546142578)),
    Vector((-7.117411136627197, -83.91262817382812, 12.733478546142578)),
    Vector((-13.726644515991211, -158.32969665527344, 12.733478546142578)),
    Vector((1.1659177541732788, -159.74346923828125, 12.733478546142578)),
    Vector((4.270483493804932, -126.15837860107422, 12.733478546142578)),
    Vector((4.826324462890625, -126.1249771118164, 12.733478546142578)),
    Vector((5.226252555847168, -120.5367431640625, 12.733478546142578)),
    Vector((4.792426109313965, -120.5367431640625, 12.733478546142578)),
    Vector((7.673252105712891, -87.00730895996094, 12.733478546142578)),
    Vector((13.367185592651367, -87.44144439697266, 12.733478546142578)),
    Vector((13.645096778869629, -84.88109588623047, 12.733478546142578)),
    Vector((15.366833686828613, -85.15938568115234, 12.733478546142578)),
    Vector((15.868440628051758, -84.89221954345703, 12.733478546142578)),
    Vector((16.004009246826172, -84.3801498413086, 12.733478546142578)),
    Vector((15.170254707336426, -84.22430419921875, 12.733478546142578)),
    Vector((15.170254707336426, -84.21317291259766, 12.733478546142578)),
    Vector((15.780317306518555, -83.97940063476562, 12.733478546142578)),
    Vector((16.336153030395508, -83.64543914794922, 12.733478546142578)),
    Vector((16.810646057128906, -83.21128845214844, 12.733478546142578)),
    Vector((17.197017669677734, -82.6880874633789, 12.733478546142578)),
    Vector((17.474933624267578, -82.09809112548828, 12.733478546142578)),
    Vector((17.63761329650879, -81.47470092773438, 12.733478546142578)),
    Vector((17.671504974365234, -80.82904815673828, 12.733478546142578)),
    Vector((17.58338165283203, -80.18339538574219, 12.733478546142578)),
    Vector((17.36646842956543, -79.582275390625, 12.733478546142578)),
    Vector((17.041099548339844, -79.01454162597656, 12.733478546142578)),
    Vector((16.61405372619629, -78.53587341308594, 12.733478546142578)),
    Vector((16.098886489868164, -78.12399291992188, 12.733478546142578)),
    Vector((16.9936466217041, -78.3243637084961, 12.733478546142578)),
    Vector((17.007204055786133, -78.0126724243164, 12.733478546142578)),
    Vector((16.871631622314453, -77.64531707763672, 12.733478546142578)),
    Vector((16.67505645751953, -77.4004135131836, 12.733478546142578)),
    Vector((16.34290885925293, -77.15550994873047, 12.733478546142578)),
    Vector((14.397485733032227, -76.91061401367188, 12.733478546142578)),
    Vector((14.553383827209473, -74.617431640625, 12.733478546142578)),
    Vector((9.008590698242188, -74.1387710571289, 12.733478546142578)),
    Vector((14.993760108947754, -1.3914706707000732, 12.733478546142578))
]
unitVectors = [
    Vector((-0.08424144238233566, -0.9964454174041748, 0.0)),
    Vector((-0.9939458966255188, 0.10987115651369095, 0.0)),
    Vector((-0.08427310734987259, -0.9964426755905151, 0.0)),
    Vector((1.0, -1.04215996543644e-05, 0.0)),
    Vector((-0.08653099089860916, -0.9962491393089294, 0.0)),
    Vector((-0.9950243234634399, 0.0996328592300415, 0.0)),
    Vector((-0.06489519029855728, -0.9978920817375183, 0.0)),
    Vector((0.997848629951477, -0.06555961817502975, 0.0)),
    Vector((-0.08846519887447357, -0.9960793256759644, 0.0)),
    Vector((0.9955242276191711, -0.09450656920671463, 0.0)),
    Vector((0.09204637259244919, 0.9957546591758728, 0.0)),
    Vector((0.9981993436813354, 0.05998360365629196, 0.0)),
    Vector((0.0713835284113884, 0.9974489212036133, 0.0)),
    Vector((-1.0, 0.0, 0.0)),
    Vector((0.08560392260551453, 0.9963292479515076, 0.0)),
    Vector((0.9971058964729309, -0.0760245993733406, 0.0)),
    Vector((0.10791044682264328, 0.9941605925559998, 0.0)),
    Vector((0.9871878623962402, -0.15956230461597443, 0.0)),
    Vector((0.8826140761375427, 0.4700983464717865, 0.0)),
    Vector((0.255929172039032, 0.9666954874992371, 0.0)),
    Vector((-0.9829752445220947, 0.18373802304267883, 0.0)),
    Vector((0.0, 1.0, 0.0)),
    Vector((0.9337895512580872, 0.3578224778175354, 0.0)),
    Vector((0.8571797609329224, 0.5150173306465149, 0.0)),
    Vector((0.7377744317054749, 0.6750473976135254, 0.0)),
    Vector((0.5940507650375366, 0.8044275045394897, 0.0)),
    Vector((0.42613673210144043, 0.9046587944030762, 0.0)),
    Vector((0.25250348448753357, 0.9675959944725037, 0.0)),
    Vector((0.05241994187235832, 0.9986251592636108, 0.0)),
    Vector((-0.13523337244987488, 0.9908137321472168, 0.0)),
    Vector((-0.33942586183547974, 0.940632700920105, 0.0)),
    Vector((-0.49723249673843384, 0.8676173090934753, 0.0)),
    Vector((-0.6657238006591797, 0.7461982369422913, 0.0)),
    Vector((-0.7810560464859009, 0.6244608163833618, 0.0)),
    Vector((0.975831151008606, -0.21852567791938782, 0.0)),
    Vector((0.04345526173710823, 0.9990553259849548, 0.0)),
    Vector((-0.34622469544410706, 0.9381515979766846, 0.0)),
    Vector((-0.6259608268737793, 0.7798545360565186, 0.0)),
    Vector((-0.8048669099807739, 0.5934553742408752, 0.0)),
    Vector((-0.9921696186065674, 0.12489740550518036, 0.0)),
    Vector((0.06782674044370651, 0.997697114944458, 0.0)),
    Vector((-0.9962945580482483, 0.08600626140832901, 0.0)),
    Vector((0.0819963738322258, 0.9966325759887695, 0.0)),
    Vector((-0.9957213997840881, 0.0924062505364418, 0.0))
]
holesInfo = None
firstVertIndex = 44
numPolygonVerts = 44
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
