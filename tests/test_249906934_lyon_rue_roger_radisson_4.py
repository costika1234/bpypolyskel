import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.2718147337436676, -0.8237642049789429, 0.0)),
    Vector((1.1416219472885132, -1.4026254415512085, 0.0)),
    Vector((2.5550589561462402, -2.0148823261260986, 0.0)),
    Vector((4.682980537414551, -2.304311752319336, 0.0)),
    Vector((5.847900867462158, -2.3488385677337646, 0.0)),
    Vector((6.6012163162231445, -2.226386308670044, 0.0)),
    Vector((6.989522933959961, -2.1150662899017334, 0.0)),
    Vector((7.455490589141846, -1.5584683418273926, 0.0)),
    Vector((7.688473224639893, -0.5565927028656006, 0.0)),
    Vector((7.766132831573486, 0.7792412638664246, 0.0)),
    Vector((7.175905704498291, 1.8479076623916626, 0.0)),
    Vector((6.073113918304443, 2.738462448120117, 0.0)),
    Vector((3.5724196434020996, 3.4509053230285645, 0.0)),
    Vector((2.5628228187561035, 3.339585304260254, 0.0)),
    Vector((1.2425808906555176, 2.8943068981170654, 0.0)),
    Vector((0.38830655813217163, 2.2263898849487305, 0.0)),
    Vector((0.07766131311655045, 1.7811118364334106, 0.0)),
    Vector((0.0, 0.0, 8.985408782958984)),
    Vector((0.2718147337436676, -0.8237642049789429, 8.985408782958984)),
    Vector((1.1416219472885132, -1.4026254415512085, 8.985408782958984)),
    Vector((2.5550589561462402, -2.0148823261260986, 8.985408782958984)),
    Vector((4.682980537414551, -2.304311752319336, 8.985408782958984)),
    Vector((5.847900867462158, -2.3488385677337646, 8.985408782958984)),
    Vector((6.6012163162231445, -2.226386308670044, 8.985408782958984)),
    Vector((6.989522933959961, -2.1150662899017334, 8.985408782958984)),
    Vector((7.455490589141846, -1.5584683418273926, 8.985408782958984)),
    Vector((7.688473224639893, -0.5565927028656006, 8.985408782958984)),
    Vector((7.766132831573486, 0.7792412638664246, 8.985408782958984)),
    Vector((7.175905704498291, 1.8479076623916626, 8.985408782958984)),
    Vector((6.073113918304443, 2.738462448120117, 8.985408782958984)),
    Vector((3.5724196434020996, 3.4509053230285645, 8.985408782958984)),
    Vector((2.5628228187561035, 3.339585304260254, 8.985408782958984)),
    Vector((1.2425808906555176, 2.8943068981170654, 8.985408782958984)),
    Vector((0.38830655813217163, 2.2263898849487305, 8.985408782958984)),
    Vector((0.07766131311655045, 1.7811118364334106, 8.985408782958984)),
]
unitVectors = [
    Vector((0.3133489191532135, -0.9496380686759949, 0.0)),
    Vector((0.8324962854385376, -0.5540305972099304, 0.0)),
    Vector((0.9176106452941895, -0.3974803686141968, 0.0)),
    Vector((0.990876317024231, -0.1347741186618805, 0.0)),
    Vector((0.9992702603340149, -0.0381951630115509, 0.0)),
    Vector((0.9870448112487793, 0.1604452282190323, 0.0)),
    Vector((0.9612781405448914, 0.27557989954948425, 0.0)),
    Vector((0.6419193744659424, 0.7667720913887024, 0.0)),
    Vector((0.2265027016401291, 0.9740105271339417, 0.0)),
    Vector((0.05803767964243889, 0.9983144402503967, 0.0)),
    Vector((-0.48346540331840515, 0.8753634691238403, 0.0)),
    Vector((-0.7779969573020935, 0.6282681226730347, 0.0)),
    Vector((-0.96173095703125, 0.2739952504634857, 0.0)),
    Vector((-0.9939759969711304, -0.10959763824939728, 0.0)),
    Vector((-0.9475581645965576, -0.3195832371711731, 0.0)),
    Vector((-0.7877938747406006, -0.6159390807151794, 0.0)),
    Vector((-0.5721644759178162, -0.8201389312744141, 0.0)),
    Vector((-0.04356132447719574, -0.9990507364273071, 0.0)),
]
holesInfo = None
firstVertIndex = 18
numPolygonVerts = 18
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
