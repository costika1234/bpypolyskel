import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-24.765180587768555, 7.848069667816162, 0.0)),
    Vector((-27.771957397460938, -1.7031309604644775, 0.0)),
    Vector((-24.91070556640625, -2.604830026626587, 0.0)),
    Vector((-23.682147979736328, -3.8627448081970215, 0.0)),
    Vector((-21.718069076538086, -4.831231117248535, 0.0)),
    Vector((-19.972217559814453, -5.04274320602417, 0.0)),
    Vector((-18.250614166259766, -4.719921588897705, 0.0)),
    Vector((-12.536186218261719, -6.53444242477417, 0.0)),
    Vector((-10.935824394226074, -8.03725814819336, 0.0)),
    Vector((-9.343544006347656, -8.76083755493164, 0.0)),
    Vector((-7.589609146118164, -8.972346305847168, 0.0)),
    Vector((-5.868004322052002, -8.649521827697754, 0.0)),
    Vector((-3.006746292114258, -9.56234359741211, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-24.765180587768555, 7.848069667816162, 11.858680725097656)),
    Vector((-27.771957397460938, -1.7031309604644775, 11.858680725097656)),
    Vector((-24.91070556640625, -2.604830026626587, 11.858680725097656)),
    Vector((-23.682147979736328, -3.8627448081970215, 11.858680725097656)),
    Vector((-21.718069076538086, -4.831231117248535, 11.858680725097656)),
    Vector((-19.972217559814453, -5.04274320602417, 11.858680725097656)),
    Vector((-18.250614166259766, -4.719921588897705, 11.858680725097656)),
    Vector((-12.536186218261719, -6.53444242477417, 11.858680725097656)),
    Vector((-10.935824394226074, -8.03725814819336, 11.858680725097656)),
    Vector((-9.343544006347656, -8.76083755493164, 11.858680725097656)),
    Vector((-7.589609146118164, -8.972346305847168, 11.858680725097656)),
    Vector((-5.868004322052002, -8.649521827697754, 11.858680725097656)),
    Vector((-3.006746292114258, -9.56234359741211, 11.858680725097656)),
    Vector((0.0, 0.0, 11.858680725097656)),
]
unitVectors = [
    Vector((-0.30027833580970764, -0.953851580619812, 0.0)),
    Vector((0.953760027885437, -0.3005693256855011, 0.0)),
    Vector((0.6987094283103943, -0.7154055237770081, 0.0)),
    Vector((0.8968890309333801, -0.44225552678108215, 0.0)),
    Vector((0.9927409887313843, -0.12027180939912796, 0.0)),
    Vector((0.9828701019287109, 0.18430012464523315, 0.0)),
    Vector((0.9531041979789734, -0.30264225602149963, 0.0)),
    Vector((0.7289741039276123, -0.6845412850379944, 0.0)),
    Vector((0.910406231880188, -0.41371557116508484, 0.0)),
    Vector((0.9928072690963745, -0.1197236180305481, 0.0)),
    Vector((0.9828696846961975, 0.18430152535438538, 0.0)),
    Vector((0.9526925086975098, -0.303935706615448, 0.0)),
    Vector((0.29995718598365784, 0.9539526700973511, 0.0)),
    Vector((-0.9532783627510071, 0.3020932972431183, 0.0)),
]
holesInfo = None
firstVertIndex = 14
numPolygonVerts = 14
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
