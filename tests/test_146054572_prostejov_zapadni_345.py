import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-1.237135410308838, -1.202250361442566, 0.0)),
    Vector((-1.2299017906188965, -6.022384166717529, 0.0)),
    Vector((0.01446943636983633, -7.246898651123047, 0.0)),
    Vector((0.021704193204641342, -17.209993362426758, 0.0)),
    Vector((1.7435708045959473, -18.902050018310547, 0.0)),
    Vector((17.739566802978516, -18.91315269470215, 0.0)),
    Vector((19.490365982055664, -17.209959030151367, 0.0)),
    Vector((19.483097076416016, -7.614218235015869, 0.0)),
    Vector((20.705759048461914, -6.389699459075928, 0.0)),
    Vector((20.749147415161133, -1.1020234823226929, 0.0)),
    Vector((19.497539520263672, 0.13361823558807373, 0.0)),
    Vector((19.483036041259766, 9.673698425292969, 0.0)),
    Vector((17.77564239501953, 11.376880645751953, 0.0)),
    Vector((1.779734492301941, 11.443643569946289, 0.0)),
    Vector((-0.007234695367515087, 9.684795379638672, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-1.237135410308838, -1.202250361442566, 17.71626091003418)),
    Vector((-1.2299017906188965, -6.022384166717529, 17.71626091003418)),
    Vector((0.01446943636983633, -7.246898651123047, 17.71626091003418)),
    Vector((0.021704193204641342, -17.209993362426758, 17.71626091003418)),
    Vector((1.7435708045959473, -18.902050018310547, 17.71626091003418)),
    Vector((17.739566802978516, -18.91315269470215, 17.71626091003418)),
    Vector((19.490365982055664, -17.209959030151367, 17.71626091003418)),
    Vector((19.483097076416016, -7.614218235015869, 17.71626091003418)),
    Vector((20.705759048461914, -6.389699459075928, 17.71626091003418)),
    Vector((20.749147415161133, -1.1020234823226929, 17.71626091003418)),
    Vector((19.497539520263672, 0.13361823558807373, 17.71626091003418)),
    Vector((19.483036041259766, 9.673698425292969, 17.71626091003418)),
    Vector((17.77564239501953, 11.376880645751953, 17.71626091003418)),
    Vector((1.779734492301941, 11.443643569946289, 17.71626091003418)),
    Vector((-0.007234695367515087, 9.684795379638672, 17.71626091003418)),
    Vector((0.0, 0.0, 17.71626091003418))
]
unitVectors = [
    Vector((0.0015007078181952238, -0.999998927116394, 0.0)),
    Vector((0.7127708792686462, -0.7013970613479614, 0.0)),
    Vector((0.0007261553546413779, -0.9999997019767761, 0.0)),
    Vector((0.713253915309906, -0.7009056806564331, 0.0)),
    Vector((0.9999998211860657, -0.0006940908497199416, 0.0)),
    Vector((0.7167845964431763, 0.6972946524620056, 0.0)),
    Vector((-0.0007575135095976293, 0.9999997019767761, 0.0)),
    Vector((0.7065700888633728, 0.7076430916786194, 0.0)),
    Vector((0.008205289021134377, 0.9999663829803467, 0.0)),
    Vector((-0.711631178855896, 0.7025532722473145, 0.0)),
    Vector((-0.001520266174338758, 0.9999988079071045, 0.0)),
    Vector((-0.7079793810844421, 0.7062330842018127, 0.0)),
    Vector((-0.9999912977218628, 0.004173713736236095, 0.0)),
    Vector((-0.7126922607421875, -0.7014768719673157, 0.0)),
    Vector((0.0007470155833289027, -0.9999997019767761, 0.0)),
    Vector((-0.717145562171936, -0.6969233155250549, 0.0))
]
holesInfo = None
firstVertIndex = 16
numPolygonVerts = 16
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
