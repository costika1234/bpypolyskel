import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-21.78221321105957, -14.415839195251465, 0.0)),
    Vector((-22.81676483154297, -13.81471061706543, 0.0)),
    Vector((-27.64202308654785, -22.130258560180664, 0.0)),
    Vector((-25.314279556274414, -23.488365173339844, 0.0)),
    Vector((-25.68607521057129, -24.14514923095703, 0.0)),
    Vector((-23.35024642944336, -25.503253936767578, 0.0)),
    Vector((-23.026947021484375, -24.93552589416504, 0.0)),
    Vector((-22.598575592041016, -25.19156265258789, 0.0)),
    Vector((-21.442777633666992, -23.19894790649414, 0.0)),
    Vector((-19.761627197265625, -24.178564071655273, 0.0)),
    Vector((-20.91742706298828, -26.171180725097656, 0.0)),
    Vector((-18.50077247619629, -27.584943771362305, 0.0)),
    Vector((-24.150453567504883, -37.325382232666016, 0.0)),
    Vector((-23.285629272460938, -37.83745574951172, 0.0)),
    Vector((-24.52225685119629, -39.95252227783203, 0.0)),
    Vector((-25.387081146240234, -39.45158004760742, 0.0)),
    Vector((-30.268938064575195, -47.85618209838867, 0.0)),
    Vector((-27.9735164642334, -49.19202423095703, 0.0)),
    Vector((-28.353395462036133, -49.837677001953125, 0.0)),
    Vector((-26.02564239501953, -51.19578170776367, 0.0)),
    Vector((-25.645763397216797, -50.550132751464844, 0.0)),
    Vector((-25.217391967773438, -50.80616760253906, 0.0)),
    Vector((-24.457632064819336, -49.50373458862305, 0.0)),
    Vector((-22.77647590637207, -50.494483947753906, 0.0)),
    Vector((-23.536235809326172, -51.78578567504883, 0.0)),
    Vector((-16.019521713256836, -56.182926177978516, 0.0)),
    Vector((-5.067715644836426, -37.303157806396484, 0.0)),
    Vector((-12.568249702453613, -32.906028747558594, 0.0)),
    Vector((-13.295675277709961, -34.1639404296875, 0.0)),
    Vector((-14.98491096496582, -33.184322357177734, 0.0)),
    Vector((-0.9294813871383667, -8.97235107421875, 0.0)),
    Vector((0.7516676783561707, -9.9519624710083, 0.0)),
    Vector((-0.008082449436187744, -11.254400253295898, 0.0)),
    Vector((7.500518321990967, -15.640384674072266, 0.0)),
    Vector((18.46835708618164, 3.239422559738159, 0.0)),
    Vector((10.959771156311035, 7.625393867492676, 0.0)),
    Vector((10.232354164123535, 6.367482662200928, 0.0)),
    Vector((8.543126106262207, 7.358223915100098, 0.0)),
    Vector((9.27054214477539, 8.605003356933594, 0.0)),
    Vector((8.84217357635498, 8.861037254333496, 0.0)),
    Vector((9.222046852111816, 9.506690979003906, 0.0)),
    Vector((6.8943071365356445, 10.875917434692383, 0.0)),
    Vector((6.506351470947266, 10.219132423400879, 0.0)),
    Vector((4.227107048034668, 11.566096305847168, 0.0)),
    Vector((-0.6223472952842712, 3.2060012817382812, 0.0)),
    Vector((0.23439055681228638, 2.6939315795898438, 0.0)),
    Vector((-0.994139552116394, 0.5788614153862, 0.0)),
    Vector((-1.8589600324630737, 1.0797992944717407, 0.0)),
    Vector((-7.492427825927734, -8.616124153137207, 0.0)),
    Vector((-9.909077644348145, -7.21349573135376, 0.0)),
    Vector((-11.064870834350586, -9.19498062133789, 0.0)),
    Vector((-12.746017456054688, -8.20423412322998, 0.0)),
    Vector((-11.582141876220703, -6.222749710083008, 0.0)),
    Vector((-12.018593788146973, -5.966713905334473, 0.0)),
    Vector((-11.64680004119873, -5.321061611175537, 0.0)),
    Vector((-13.974540710449219, -3.9629592895507812, 0.0)),
    Vector((-14.346334457397461, -4.608611583709717, 0.0)),
    Vector((-16.674074172973633, -3.2505085468292236, 0.0)),
    Vector((-21.588224411010742, -11.688511848449707, 0.0)),
    Vector((-20.553672790527344, -12.300772666931152, 0.0)),
    Vector((-21.78221321105957, -14.415839195251465, 11.23367691040039)),
    Vector((-22.81676483154297, -13.81471061706543, 11.23367691040039)),
    Vector((-27.64202308654785, -22.130258560180664, 11.23367691040039)),
    Vector((-25.314279556274414, -23.488365173339844, 11.23367691040039)),
    Vector((-25.68607521057129, -24.14514923095703, 11.23367691040039)),
    Vector((-23.35024642944336, -25.503253936767578, 11.23367691040039)),
    Vector((-23.026947021484375, -24.93552589416504, 11.23367691040039)),
    Vector((-22.598575592041016, -25.19156265258789, 11.23367691040039)),
    Vector((-21.442777633666992, -23.19894790649414, 11.23367691040039)),
    Vector((-19.761627197265625, -24.178564071655273, 11.23367691040039)),
    Vector((-20.91742706298828, -26.171180725097656, 11.23367691040039)),
    Vector((-18.50077247619629, -27.584943771362305, 11.23367691040039)),
    Vector((-24.150453567504883, -37.325382232666016, 11.23367691040039)),
    Vector((-23.285629272460938, -37.83745574951172, 11.23367691040039)),
    Vector((-24.52225685119629, -39.95252227783203, 11.23367691040039)),
    Vector((-25.387081146240234, -39.45158004760742, 11.23367691040039)),
    Vector((-30.268938064575195, -47.85618209838867, 11.23367691040039)),
    Vector((-27.9735164642334, -49.19202423095703, 11.23367691040039)),
    Vector((-28.353395462036133, -49.837677001953125, 11.23367691040039)),
    Vector((-26.02564239501953, -51.19578170776367, 11.23367691040039)),
    Vector((-25.645763397216797, -50.550132751464844, 11.23367691040039)),
    Vector((-25.217391967773438, -50.80616760253906, 11.23367691040039)),
    Vector((-24.457632064819336, -49.50373458862305, 11.23367691040039)),
    Vector((-22.77647590637207, -50.494483947753906, 11.23367691040039)),
    Vector((-23.536235809326172, -51.78578567504883, 11.23367691040039)),
    Vector((-16.019521713256836, -56.182926177978516, 11.23367691040039)),
    Vector((-5.067715644836426, -37.303157806396484, 11.23367691040039)),
    Vector((-12.568249702453613, -32.906028747558594, 11.23367691040039)),
    Vector((-13.295675277709961, -34.1639404296875, 11.23367691040039)),
    Vector((-14.98491096496582, -33.184322357177734, 11.23367691040039)),
    Vector((-0.9294813871383667, -8.97235107421875, 11.23367691040039)),
    Vector((0.7516676783561707, -9.9519624710083, 11.23367691040039)),
    Vector((-0.008082449436187744, -11.254400253295898, 11.23367691040039)),
    Vector((7.500518321990967, -15.640384674072266, 11.23367691040039)),
    Vector((18.46835708618164, 3.239422559738159, 11.23367691040039)),
    Vector((10.959771156311035, 7.625393867492676, 11.23367691040039)),
    Vector((10.232354164123535, 6.367482662200928, 11.23367691040039)),
    Vector((8.543126106262207, 7.358223915100098, 11.23367691040039)),
    Vector((9.27054214477539, 8.605003356933594, 11.23367691040039)),
    Vector((8.84217357635498, 8.861037254333496, 11.23367691040039)),
    Vector((9.222046852111816, 9.506690979003906, 11.23367691040039)),
    Vector((6.8943071365356445, 10.875917434692383, 11.23367691040039)),
    Vector((6.506351470947266, 10.219132423400879, 11.23367691040039)),
    Vector((4.227107048034668, 11.566096305847168, 11.23367691040039)),
    Vector((-0.6223472952842712, 3.2060012817382812, 11.23367691040039)),
    Vector((0.23439055681228638, 2.6939315795898438, 11.23367691040039)),
    Vector((-0.994139552116394, 0.5788614153862, 11.23367691040039)),
    Vector((-1.8589600324630737, 1.0797992944717407, 11.23367691040039)),
    Vector((-7.492427825927734, -8.616124153137207, 11.23367691040039)),
    Vector((-9.909077644348145, -7.21349573135376, 11.23367691040039)),
    Vector((-11.064870834350586, -9.19498062133789, 11.23367691040039)),
    Vector((-12.746017456054688, -8.20423412322998, 11.23367691040039)),
    Vector((-11.582141876220703, -6.222749710083008, 11.23367691040039)),
    Vector((-12.018593788146973, -5.966713905334473, 11.23367691040039)),
    Vector((-11.64680004119873, -5.321061611175537, 11.23367691040039)),
    Vector((-13.974540710449219, -3.9629592895507812, 11.23367691040039)),
    Vector((-14.346334457397461, -4.608611583709717, 11.23367691040039)),
    Vector((-16.674074172973633, -3.2505085468292236, 11.23367691040039)),
    Vector((-21.588224411010742, -11.688511848449707, 11.23367691040039)),
    Vector((-20.553672790527344, -12.300772666931152, 11.23367691040039))
]
unitVectors = [
    Vector((-0.8646360635757446, 0.5023987293243408, 0.0)),
    Vector((-0.5018924474716187, -0.8649300336837769, 0.0)),
    Vector((0.8637375235557556, -0.5039419531822205, 0.0)),
    Vector((-0.49262943863868713, -0.8702391982078552, 0.0)),
    Vector((0.8644967675209045, -0.5026383399963379, 0.0)),
    Vector((0.4948500096797943, 0.8689784407615662, 0.0)),
    Vector((0.8583633899688721, -0.5130420923233032, 0.0)),
    Vector((0.5017445087432861, 0.8650158643722534, 0.0)),
    Vector((0.864014744758606, -0.5034664273262024, 0.0)),
    Vector((-0.50174480676651, -0.8650157451629639, 0.0)),
    Vector((0.8631489872932434, -0.5049493312835693, 0.0)),
    Vector((-0.5017331838607788, -0.8650224804878235, 0.0)),
    Vector((0.8604726195335388, -0.509496808052063, 0.0)),
    Vector((-0.5047352910041809, -0.8632742166519165, 0.0)),
    Vector((-0.865315854549408, 0.5012269616127014, 0.0)),
    Vector((-0.5022713541984558, -0.8647100329399109, 0.0)),
    Vector((0.8642953038215637, -0.5029847621917725, 0.0)),
    Vector((-0.5071026682853699, -0.8618856072425842, 0.0)),
    Vector((0.8637387752532959, -0.5039399266242981, 0.0)),
    Vector((0.5071048736572266, 0.8618842959403992, 0.0)),
    Vector((0.8583651185035706, -0.5130392909049988, 0.0)),
    Vector((0.503874659538269, 0.8637768030166626, 0.0)),
    Vector((0.8615231513977051, -0.5077181458473206, 0.0)),
    Vector((-0.507104754447937, -0.8618844151496887, 0.0)),
    Vector((0.8631589412689209, -0.5049322247505188, 0.0)),
    Vector((0.5017709136009216, 0.8650005459785461, 0.0)),
    Vector((-0.8626847267150879, 0.5057421326637268, 0.0)),
    Vector((-0.5006036758422852, -0.8656765222549438, 0.0)),
    Vector((-0.8650619983673096, 0.501664936542511, 0.0)),
    Vector((0.5020517706871033, 0.8648375868797302, 0.0)),
    Vector((0.8640156984329224, -0.503464937210083, 0.0)),
    Vector((-0.5038684010505676, -0.8637804388999939, 0.0)),
    Vector((0.8634800910949707, -0.5043829679489136, 0.0)),
    Vector((0.5023194551467896, 0.864682137966156, 0.0)),
    Vector((-0.863480269908905, 0.5043825507164001, 0.0)),
    Vector((-0.5005994439125061, -0.8656790256500244, 0.0)),
    Vector((-0.8625856637954712, 0.5059110522270203, 0.0)),
    Vector((0.5039372444152832, 0.8637403249740601, 0.0)),
    Vector((-0.8583644032478333, 0.5130404233932495, 0.0)),
    Vector((0.5070964694023132, 0.8618893027305603, 0.0)),
    Vector((-0.8619393706321716, 0.5070112347602844, 0.0)),
    Vector((-0.5085888504981995, -0.8610095381736755, 0.0)),
    Vector((-0.8609037399291992, 0.50876784324646, 0.0)),
    Vector((-0.5017645359039307, -0.865004301071167, 0.0)),
    Vector((0.8583638072013855, -0.5130414962768555, 0.0)),
    Vector((-0.502265453338623, -0.8647134900093079, 0.0)),
    Vector((-0.8653167486190796, 0.5012253522872925, 0.0)),
    Vector((-0.502373993396759, -0.8646504282951355, 0.0)),
    Vector((-0.8648802638053894, 0.5019782781600952, 0.0)),
    Vector((-0.5038473010063171, -0.8637927770614624, 0.0)),
    Vector((-0.8615226149559021, 0.5077192187309265, 0.0)),
    Vector((0.5064693093299866, 0.8622580170631409, 0.0)),
    Vector((-0.8625386953353882, 0.5059911012649536, 0.0)),
    Vector((0.49901941418647766, 0.8665907382965088, 0.0)),
    Vector((-0.8637380003929138, 0.5039412975311279, 0.0)),
    Vector((-0.49901941418647766, -0.8665907382965088, 0.0)),
    Vector((-0.8637377023696899, 0.5039415955543518, 0.0)),
    Vector((-0.503258228302002, -0.8641360998153687, 0.0)),
    Vector((0.8605857491493225, -0.5093055963516235, 0.0)),
    Vector((-0.5022692084312439, -0.8647112846374512, 0.0))
]
holesInfo = None
firstVertIndex = 60
numPolygonVerts = 60
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
