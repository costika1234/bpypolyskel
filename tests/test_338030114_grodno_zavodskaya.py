import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-3.600579261779785, 1.5807381868362427, 0.0)),
    Vector((-4.76780366897583, -2.070540189743042, 0.0)),
    Vector((-5.315149307250977, -5.655026912689209, 0.0)),
    Vector((-5.203047275543213, -9.406494140625, 0.0)),
    Vector((-4.2072834968566895, -13.269281387329102, 0.0)),
    Vector((-2.7367146015167236, -16.597734451293945, 0.0)),
    Vector((-0.4286423623561859, -19.792606353759766, 0.0)),
    Vector((2.169590950012207, -22.341821670532227, 0.0)),
    Vector((5.3151702880859375, -24.41236114501953, 0.0)),
    Vector((8.612424850463867, -25.848377227783203, 0.0)),
    Vector((12.239405632019043, -26.661001205444336, 0.0)),
    Vector((15.807034492492676, -26.839101791381836, 0.0)),
    Vector((19.420822143554688, -26.32701873779297, 0.0)),
    Vector((22.5729923248291, -25.347393035888672, 0.0)),
    Vector((25.90980339050293, -23.58852767944336, 0.0)),
    Vector((28.686077117919922, -21.59589385986328, 0.0)),
    Vector((30.84246063232422, -19.05779457092285, 0.0)),
    Vector((31.864595413208008, -17.209884643554688, 0.0)),
    Vector((28.567337036132812, -15.195023536682129, 0.0)),
    Vector((27.769411087036133, -16.63105010986328, 0.0)),
    Vector((26.09442138671875, -18.590282440185547, 0.0)),
    Vector((23.78635597229004, -20.29348373413086, 0.0)),
    Vector((21.35299301147461, -21.7183837890625, 0.0)),
    Vector((18.556926727294922, -22.49763298034668, 0.0)),
    Vector((15.582808494567871, -22.798206329345703, 0.0)),
    Vector((12.766955375671387, -22.76481819152832, 0.0)),
    Vector((9.970885276794434, -22.10803985595703, 0.0)),
    Vector((7.18140983581543, -20.9503231048584, 0.0)),
    Vector((4.616147994995117, -19.358457565307617, 0.0)),
    Vector((2.5520691871643066, -17.232255935668945, 0.0)),
    Vector((0.738582968711853, -14.694172859191895, 0.0)),
    Vector((-0.4879920184612274, -11.97797679901123, 0.0)),
    Vector((-1.2529516220092773, -8.827635765075684, 0.0)),
    Vector((-1.3848403692245483, -5.833141326904297, 0.0)),
    Vector((-0.9561986923217773, -2.74959135055542, 0.0)),
    Vector((0.0, 0.0, 13.140398025512695)),
    Vector((-3.600579261779785, 1.5807381868362427, 13.140398025512695)),
    Vector((-4.76780366897583, -2.070540189743042, 13.140398025512695)),
    Vector((-5.315149307250977, -5.655026912689209, 13.140398025512695)),
    Vector((-5.203047275543213, -9.406494140625, 13.140398025512695)),
    Vector((-4.2072834968566895, -13.269281387329102, 13.140398025512695)),
    Vector((-2.7367146015167236, -16.597734451293945, 13.140398025512695)),
    Vector((-0.4286423623561859, -19.792606353759766, 13.140398025512695)),
    Vector((2.169590950012207, -22.341821670532227, 13.140398025512695)),
    Vector((5.3151702880859375, -24.41236114501953, 13.140398025512695)),
    Vector((8.612424850463867, -25.848377227783203, 13.140398025512695)),
    Vector((12.239405632019043, -26.661001205444336, 13.140398025512695)),
    Vector((15.807034492492676, -26.839101791381836, 13.140398025512695)),
    Vector((19.420822143554688, -26.32701873779297, 13.140398025512695)),
    Vector((22.5729923248291, -25.347393035888672, 13.140398025512695)),
    Vector((25.90980339050293, -23.58852767944336, 13.140398025512695)),
    Vector((28.686077117919922, -21.59589385986328, 13.140398025512695)),
    Vector((30.84246063232422, -19.05779457092285, 13.140398025512695)),
    Vector((31.864595413208008, -17.209884643554688, 13.140398025512695)),
    Vector((28.567337036132812, -15.195023536682129, 13.140398025512695)),
    Vector((27.769411087036133, -16.63105010986328, 13.140398025512695)),
    Vector((26.09442138671875, -18.590282440185547, 13.140398025512695)),
    Vector((23.78635597229004, -20.29348373413086, 13.140398025512695)),
    Vector((21.35299301147461, -21.7183837890625, 13.140398025512695)),
    Vector((18.556926727294922, -22.49763298034668, 13.140398025512695)),
    Vector((15.582808494567871, -22.798206329345703, 13.140398025512695)),
    Vector((12.766955375671387, -22.76481819152832, 13.140398025512695)),
    Vector((9.970885276794434, -22.10803985595703, 13.140398025512695)),
    Vector((7.18140983581543, -20.9503231048584, 13.140398025512695)),
    Vector((4.616147994995117, -19.358457565307617, 13.140398025512695)),
    Vector((2.5520691871643066, -17.232255935668945, 13.140398025512695)),
    Vector((0.738582968711853, -14.694172859191895, 13.140398025512695)),
    Vector((-0.4879920184612274, -11.97797679901123, 13.140398025512695)),
    Vector((-1.2529516220092773, -8.827635765075684, 13.140398025512695)),
    Vector((-1.3848403692245483, -5.833141326904297, 13.140398025512695)),
    Vector((-0.9561986923217773, -2.74959135055542, 13.140398025512695))
]
unitVectors = [
    Vector((-0.9156443476676941, 0.401989221572876, 0.0)),
    Vector((-0.30449536442756653, -0.9525138735771179, 0.0)),
    Vector((-0.15094879269599915, -0.9885416030883789, 0.0)),
    Vector((0.029868850484490395, -0.9995537996292114, 0.0)),
    Vector((0.249623104929924, -0.9683430790901184, 0.0)),
    Vector((0.4041309654712677, -0.9147010445594788, 0.0)),
    Vector((0.5856013894081116, -0.810599148273468, 0.0)),
    Vector((0.7138080596923828, -0.7003414630889893, 0.0)),
    Vector((0.835285484790802, -0.5498165488243103, 0.0)),
    Vector((0.9168230891227722, -0.39929360151290894, 0.0)),
    Vector((0.9758079648017883, -0.21862947940826416, 0.0)),
    Vector((0.9987562894821167, -0.0498591884970665, 0.0)),
    Vector((0.990108847618103, 0.14030098915100098, 0.0)),
    Vector((0.9549469351768494, 0.2967766523361206, 0.0)),
    Vector((0.8846285939216614, 0.4662962853908539, 0.0)),
    Vector((0.8124052286148071, 0.5830931067466736, 0.0)),
    Vector((0.647473931312561, 0.7620875835418701, 0.0)),
    Vector((0.48402032256126404, 0.8750567436218262, 0.0)),
    Vector((-0.8532968759536743, 0.5214255452156067, 0.0)),
    Vector((-0.4857049882411957, -0.8741227984428406, 0.0)),
    Vector((-0.6498175263404846, -0.7600902915000916, 0.0)),
    Vector((-0.8046358227729797, -0.5937685966491699, 0.0)),
    Vector((-0.8629383444786072, -0.5053092837333679, 0.0)),
    Vector((-0.963289737701416, -0.2684638798236847, 0.0)),
    Vector((-0.9949319362640381, -0.1005508154630661, 0.0)),
    Vector((-0.9999297857284546, 0.011856368742883205, 0.0)),
    Vector((-0.9735040664672852, 0.2286696583032608, 0.0)),
    Vector((-0.9236125946044922, 0.3833271861076355, 0.0)),
    Vector((-0.8496944904327393, 0.5272753834724426, 0.0)),
    Vector((-0.6965470314025879, 0.7175110578536987, 0.0)),
    Vector((-0.5813590884208679, 0.8136470317840576, 0.0)),
    Vector((-0.4115604758262634, 0.9113824367523193, 0.0)),
    Vector((-0.2359614372253418, 0.9717624187469482, 0.0)),
    Vector((-0.04400108754634857, 0.9990314841270447, 0.0)),
    Vector((0.13768523931503296, 0.9904760718345642, 0.0)),
    Vector((0.32846522331237793, 0.944516122341156, 0.0))
]
holesInfo = None
firstVertIndex = 36
numPolygonVerts = 36
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
