import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-35.73579406738281, -23.410343170166016, 0.0)),
    Vector((-37.650333404541016, -24.23409080505371, 0.0)),
    Vector((-40.01054000854492, -24.300861358642578, 0.0)),
    Vector((-43.07378387451172, -23.599519729614258, 0.0)),
    Vector((-45.245662689208984, -22.3861141204834, 0.0)),
    Vector((-47.009517669677734, -20.348949432373047, 0.0)),
    Vector((-102.23037719726562, -56.08155822753906, 0.0)),
    Vector((-101.87261199951172, -57.67343521118164, 0.0)),
    Vector((-102.0672607421875, -59.96661376953125, 0.0)),
    Vector((-102.70130920410156, -62.1373291015625, 0.0)),
    Vector((-103.6617660522461, -64.052001953125, 0.0)),
    Vector((-105.12439727783203, -65.64383697509766, 0.0)),
    Vector((-106.9134292602539, -66.85717010498047, 0.0)),
    Vector((-109.08536529541016, -67.74767303466797, 0.0)),
    Vector((-111.44560241699219, -67.94799041748047, 0.0)),
    Vector((-114.50888061523438, -67.88111877441406, 0.0)),
    Vector((-118.14337158203125, -67.36894989013672, 0.0)),
    Vector((-120.6291275024414, -66.79002380371094, 0.0)),
    Vector((-124.26986694335938, -65.38729858398438, 0.0)),
    Vector((-129.31036376953125, -62.025299072265625, 0.0)),
    Vector((-132.0345916748047, -59.53166198730469, 0.0)),
    Vector((-133.81097412109375, -57.360877990722656, 0.0)),
    Vector((-136.20248413085938, -53.86537170410156, 0.0)),
    Vector((-148.80735778808594, -62.08033752441406, 0.0)),
    Vector((-140.30836486816406, -72.68936920166016, 0.0)),
    Vector((-137.74105834960938, -74.8156509399414, 0.0)),
    Vector((-134.4079132080078, -77.04214477539062, 0.0)),
    Vector((-130.48472595214844, -79.19072723388672, 0.0)),
    Vector((-126.32923889160156, -80.71592712402344, 0.0)),
    Vector((-121.94776916503906, -81.92943572998047, 0.0)),
    Vector((-117.4658432006836, -82.7867202758789, 0.0)),
    Vector((-113.03412628173828, -83.10966491699219, 0.0)),
    Vector((-101.06341552734375, -81.64054107666016, 0.0)),
    Vector((-95.21298217773438, -79.4365463256836, 0.0)),
    Vector((-89.65757751464844, -76.49783325195312, 0.0)),
    Vector((8.273259162902832, -12.79060173034668, 0.0)),
    Vector((0.0, 0.0, 10.600000381469727)),
    Vector((-35.73579406738281, -23.410343170166016, 10.600000381469727)),
    Vector((-37.650333404541016, -24.23409080505371, 10.600000381469727)),
    Vector((-40.01054000854492, -24.300861358642578, 10.600000381469727)),
    Vector((-43.07378387451172, -23.599519729614258, 10.600000381469727)),
    Vector((-45.245662689208984, -22.3861141204834, 10.600000381469727)),
    Vector((-47.009517669677734, -20.348949432373047, 10.600000381469727)),
    Vector((-102.23037719726562, -56.08155822753906, 10.600000381469727)),
    Vector((-101.87261199951172, -57.67343521118164, 10.600000381469727)),
    Vector((-102.0672607421875, -59.96661376953125, 10.600000381469727)),
    Vector((-102.70130920410156, -62.1373291015625, 10.600000381469727)),
    Vector((-103.6617660522461, -64.052001953125, 10.600000381469727)),
    Vector((-105.12439727783203, -65.64383697509766, 10.600000381469727)),
    Vector((-106.9134292602539, -66.85717010498047, 10.600000381469727)),
    Vector((-109.08536529541016, -67.74767303466797, 10.600000381469727)),
    Vector((-111.44560241699219, -67.94799041748047, 10.600000381469727)),
    Vector((-114.50888061523438, -67.88111877441406, 10.600000381469727)),
    Vector((-118.14337158203125, -67.36894989013672, 10.600000381469727)),
    Vector((-120.6291275024414, -66.79002380371094, 10.600000381469727)),
    Vector((-124.26986694335938, -65.38729858398438, 10.600000381469727)),
    Vector((-129.31036376953125, -62.025299072265625, 10.600000381469727)),
    Vector((-132.0345916748047, -59.53166198730469, 10.600000381469727)),
    Vector((-133.81097412109375, -57.360877990722656, 10.600000381469727)),
    Vector((-136.20248413085938, -53.86537170410156, 10.600000381469727)),
    Vector((-148.80735778808594, -62.08033752441406, 10.600000381469727)),
    Vector((-140.30836486816406, -72.68936920166016, 10.600000381469727)),
    Vector((-137.74105834960938, -74.8156509399414, 10.600000381469727)),
    Vector((-134.4079132080078, -77.04214477539062, 10.600000381469727)),
    Vector((-130.48472595214844, -79.19072723388672, 10.600000381469727)),
    Vector((-126.32923889160156, -80.71592712402344, 10.600000381469727)),
    Vector((-121.94776916503906, -81.92943572998047, 10.600000381469727)),
    Vector((-117.4658432006836, -82.7867202758789, 10.600000381469727)),
    Vector((-113.03412628173828, -83.10966491699219, 10.600000381469727)),
    Vector((-101.06341552734375, -81.64054107666016, 10.600000381469727)),
    Vector((-95.21298217773438, -79.4365463256836, 10.600000381469727)),
    Vector((-89.65757751464844, -76.49783325195312, 10.600000381469727)),
    Vector((8.273259162902832, -12.79060173034668, 10.600000381469727)),
]
unitVectors = [
    Vector((-0.83649080991745, -0.5479810237884521, 0.0)),
    Vector((-0.9185827970504761, -0.39522844552993774, 0.0)),
    Vector((-0.9996000528335571, -0.028278816491365433, 0.0)),
    Vector((-0.9747774600982666, 0.22317910194396973, 0.0)),
    Vector((-0.8729933500289917, 0.4877321124076843, 0.0)),
    Vector((-0.6545727849006653, 0.755998969078064, 0.0)),
    Vector((-0.8395600914955139, -0.543267011642456, 0.0)),
    Vector((0.21927468478679657, -0.9756631255149841, 0.0)),
    Vector((-0.08457749336957932, -0.9964169263839722, 0.0)),
    Vector((-0.2803761959075928, -0.9598901867866516, 0.0)),
    Vector((-0.4483785927295685, -0.8938437104225159, 0.0)),
    Vector((-0.676591157913208, -0.7363589406013489, 0.0)),
    Vector((-0.8276160359382629, -0.5612946152687073, 0.0)),
    Vector((-0.9252505898475647, -0.37935662269592285, 0.0)),
    Vector((-0.996417760848999, -0.08456768840551376, 0.0)),
    Vector((-0.9997618198394775, 0.021824892610311508, 0.0)),
    Vector((-0.9902164340019226, 0.13954031467437744, 0.0)),
    Vector((-0.973935067653656, 0.22682693600654602, 0.0)),
    Vector((-0.9331358671188354, 0.3595239818096161, 0.0)),
    Vector((-0.8319231867790222, 0.5548908114433289, 0.0)),
    Vector((-0.7376356720924377, 0.6751988530158997, 0.0)),
    Vector((-0.633298933506012, 0.7739071846008301, 0.0)),
    Vector((-0.5646594166755676, 0.8253239989280701, 0.0)),
    Vector((-0.8377810120582581, -0.546006441116333, 0.0)),
    Vector((0.6252227425575256, -0.7804463505744934, 0.0)),
    Vector((0.7701563835144043, -0.637855052947998, 0.0)),
    Vector((0.8315436244010925, -0.5554593801498413, 0.0)),
    Vector((0.8770802021026611, -0.48034393787384033, 0.0)),
    Vector((0.9387652277946472, -0.34455761313438416, 0.0)),
    Vector((0.9637199640274048, -0.26691555976867676, 0.0)),
    Vector((0.9821938872337341, -0.18787004053592682, 0.0)),
    Vector((0.9973554015159607, -0.07267850637435913, 0.0)),
    Vector((0.9925531148910522, 0.121812604367733, 0.0)),
    Vector((0.935797929763794, 0.3525369167327881, 0.0)),
    Vector((0.8839446902275085, 0.46759146451950073, 0.0)),
    Vector((0.8382394909858704, 0.5453023314476013, 0.0)),
    Vector((-0.5431118607521057, 0.8396603465080261, 0.0)),
]
holesInfo = None
firstVertIndex = 37
numPolygonVerts = 37
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(
        verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors
    )


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
