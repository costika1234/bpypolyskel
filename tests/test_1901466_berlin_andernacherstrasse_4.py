import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((52.43423843383789, -52.70949935913086, 0.0)),
    Vector((52.54949951171875, -53.48873519897461, 0.0)),
    Vector((52.841033935546875, -54.16777801513672, 0.0)),
    Vector((53.30206298828125, -54.71324157714844, 0.0)),
    Vector((53.946136474609375, -55.04719161987305, 0.0)),
    Vector((55.23427963256836, -55.0249137878418, 0.0)),
    Vector((56.020721435546875, -54.42377853393555, 0.0)),
    Vector((56.461395263671875, -53.8671760559082, 0.0)),
    Vector((56.59697723388672, -52.720584869384766, 0.0)),
    Vector((70.8748779296875, -41.755428314208984, 0.0)),
    Vector((71.53250885009766, -41.71089172363281, 0.0)),
    Vector((72.14945220947266, -41.51050567626953, 0.0)),
    Vector((72.6240234375, -41.0540885925293, 0.0)),
    Vector((73.06468963623047, -40.241451263427734, 0.0)),
    Vector((72.89518737792969, -39.22844696044922, 0.0)),
    Vector((72.53585052490234, -38.61619567871094, 0.0)),
    Vector((71.95279693603516, -38.24884796142578, 0.0)),
    Vector((71.28160095214844, -38.13753890991211, 0.0)),
    Vector((44.494441986083984, 30.935888290405273, 0.0)),
    Vector((31.918197631835938, 47.555789947509766, 0.0)),
    Vector((32.23683166503906, 48.22370910644531, 0.0)),
    Vector((32.33852005004883, 49.20332336425781, 0.0)),
    Vector((31.931737899780273, 50.20519256591797, 0.0)),
    Vector((31.036832809448242, 50.873104095458984, 0.0)),
    Vector((30.060575485229492, 50.98442077636719, 0.0)),
    Vector((29.240249633789062, 50.617061614990234, 0.0)),
    Vector((28.5826358795166, 50.004798889160156, 0.0)),
    Vector((28.33857536315918, 49.370277404785156, 0.0)),
    Vector((28.291122436523438, 48.758018493652344, 0.0)),
    Vector((11.437159538269043, 33.97472381591797, 0.0)),
    Vector((-4.874538898468018, 16.675662994384766, 0.0)),
    Vector((-16.52874183654785, 0.1781390756368637, 0.0)),
    Vector((-17.20670509338379, 0.2560650706291199, 0.0)),
    Vector((-17.776193618774414, 0.16701149940490723, 0.0)),
    Vector((-18.325345993041992, -0.2671324908733368, 0.0)),
    Vector((-18.759244918823242, -0.9684436321258545, 0.0)),
    Vector((-18.847383499145508, -1.8033394813537598, 0.0)),
    Vector((-18.54230308532715, -2.4935214519500732, 0.0)),
    Vector((-17.62705421447754, -3.005594491958618, 0.0)),
    Vector((-16.779598236083984, -3.0055975914001465, 0.0)),
    Vector((52.43423843383789, -52.70949935913086, 9.294577598571777)),
    Vector((52.54949951171875, -53.48873519897461, 9.294577598571777)),
    Vector((52.841033935546875, -54.16777801513672, 9.294577598571777)),
    Vector((53.30206298828125, -54.71324157714844, 9.294577598571777)),
    Vector((53.946136474609375, -55.04719161987305, 9.294577598571777)),
    Vector((55.23427963256836, -55.0249137878418, 9.294577598571777)),
    Vector((56.020721435546875, -54.42377853393555, 9.294577598571777)),
    Vector((56.461395263671875, -53.8671760559082, 9.294577598571777)),
    Vector((56.59697723388672, -52.720584869384766, 9.294577598571777)),
    Vector((70.8748779296875, -41.755428314208984, 9.294577598571777)),
    Vector((71.53250885009766, -41.71089172363281, 9.294577598571777)),
    Vector((72.14945220947266, -41.51050567626953, 9.294577598571777)),
    Vector((72.6240234375, -41.0540885925293, 9.294577598571777)),
    Vector((73.06468963623047, -40.241451263427734, 9.294577598571777)),
    Vector((72.89518737792969, -39.22844696044922, 9.294577598571777)),
    Vector((72.53585052490234, -38.61619567871094, 9.294577598571777)),
    Vector((71.95279693603516, -38.24884796142578, 9.294577598571777)),
    Vector((71.28160095214844, -38.13753890991211, 9.294577598571777)),
    Vector((44.494441986083984, 30.935888290405273, 9.294577598571777)),
    Vector((31.918197631835938, 47.555789947509766, 9.294577598571777)),
    Vector((32.23683166503906, 48.22370910644531, 9.294577598571777)),
    Vector((32.33852005004883, 49.20332336425781, 9.294577598571777)),
    Vector((31.931737899780273, 50.20519256591797, 9.294577598571777)),
    Vector((31.036832809448242, 50.873104095458984, 9.294577598571777)),
    Vector((30.060575485229492, 50.98442077636719, 9.294577598571777)),
    Vector((29.240249633789062, 50.617061614990234, 9.294577598571777)),
    Vector((28.5826358795166, 50.004798889160156, 9.294577598571777)),
    Vector((28.33857536315918, 49.370277404785156, 9.294577598571777)),
    Vector((28.291122436523438, 48.758018493652344, 9.294577598571777)),
    Vector((11.437159538269043, 33.97472381591797, 9.294577598571777)),
    Vector((-4.874538898468018, 16.675662994384766, 9.294577598571777)),
    Vector((-16.52874183654785, 0.1781390756368637, 9.294577598571777)),
    Vector((-17.20670509338379, 0.2560650706291199, 9.294577598571777)),
    Vector((-17.776193618774414, 0.16701149940490723, 9.294577598571777)),
    Vector((-18.325345993041992, -0.2671324908733368, 9.294577598571777)),
    Vector((-18.759244918823242, -0.9684436321258545, 9.294577598571777)),
    Vector((-18.847383499145508, -1.8033394813537598, 9.294577598571777)),
    Vector((-18.54230308532715, -2.4935214519500732, 9.294577598571777)),
    Vector((-17.62705421447754, -3.005594491958618, 9.294577598571777)),
    Vector((-16.779598236083984, -3.0055975914001465, 9.294577598571777)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.6711836457252502, -0.601125180721283, 0.0)),
    Vector((-2.901681900024414, 1.102063775062561, 0.0)),
    Vector((-0.7254199981689453, 3.9741058349609375, 0.0)),
    Vector((0.16949068009853363, 3.2505290508270264, 0.0)),
    Vector((4.29149866104126, 9.339707374572754, 0.0)),
    Vector((28.270875930786133, 32.70574951171875, 0.0)),
    Vector((34.00646209716797, 24.824363708496094, 0.0)),
    Vector((56.82048034667969, -33.09495544433594, 0.0)),
    Vector((58.30525588989258, -35.39925003051758, 0.0)),
    Vector((52.99681091308594, -39.45133972167969, 0.0)),
    Vector((51.145931243896484, -37.19157409667969, 0.0)),
    Vector((0.0, 0.0, 9.294577598571777)),
    Vector((-0.6711836457252502, -0.601125180721283, 9.294577598571777)),
    Vector((-2.901681900024414, 1.102063775062561, 9.294577598571777)),
    Vector((-0.7254199981689453, 3.9741058349609375, 9.294577598571777)),
    Vector((0.16949068009853363, 3.2505290508270264, 9.294577598571777)),
    Vector((4.29149866104126, 9.339707374572754, 9.294577598571777)),
    Vector((28.270875930786133, 32.70574951171875, 9.294577598571777)),
    Vector((34.00646209716797, 24.824363708496094, 9.294577598571777)),
    Vector((56.82048034667969, -33.09495544433594, 9.294577598571777)),
    Vector((58.30525588989258, -35.39925003051758, 9.294577598571777)),
    Vector((52.99681091308594, -39.45133972167969, 9.294577598571777)),
    Vector((51.145931243896484, -37.19157409667969, 9.294577598571777))
]
unitVectors = [
    Vector((0.14632347226142883, -0.9892367720603943, 0.0)),
    Vector((0.3945092260837555, -0.9188920259475708, 0.0)),
    Vector((0.6455202698707581, -0.7637432217597961, 0.0)),
    Vector((0.8877624869346619, -0.4603019952774048, 0.0)),
    Vector((0.9998505115509033, 0.017291946336627007, 0.0)),
    Vector((0.7944852709770203, 0.6072834730148315, 0.0)),
    Vector((0.6207290887832642, 0.7840251326560974, 0.0)),
    Vector((0.11742973327636719, 0.9930811524391174, 0.0)),
    Vector((0.7931027412414551, 0.6090878248214722, 0.0)),
    Vector((0.997714638710022, 0.06756800413131714, 0.0)),
    Vector((0.9510887265205383, 0.3089179992675781, 0.0)),
    Vector((0.7207581996917725, 0.6931864619255066, 0.0)),
    Vector((0.47669094800949097, 0.8790709376335144, 0.0)),
    Vector((-0.16503193974494934, 0.9862881302833557, 0.0)),
    Vector((-0.5061711668968201, 0.8624329566955566, 0.0)),
    Vector((-0.8460758924484253, 0.5330625772476196, 0.0)),
    Vector((-0.9865263104438782, 0.16360245645046234, 0.0)),
    Vector((-0.36156991124153137, 0.9323449730873108, 0.0)),
    Vector((-0.6034128069877625, 0.7974290251731873, 0.0)),
    Vector((0.4305693805217743, 0.9025574922561646, 0.0)),
    Vector((0.10324973613023758, 0.9946555495262146, 0.0)),
    Vector((-0.3761966824531555, 0.9265398383140564, 0.0)),
    Vector((-0.80140221118927, 0.5981257557868958, 0.0)),
    Vector((-0.9935619235038757, 0.11328981816768646, 0.0)),
    Vector((-0.9126641750335693, -0.40871021151542664, 0.0)),
    Vector((-0.7318930625915527, -0.6814195513725281, 0.0)),
    Vector((-0.35899674892425537, -0.9333388209342957, 0.0)),
    Vector((-0.077272929251194, -0.9970099329948425, 0.0)),
    Vector((-0.7517786026000977, -0.6594155430793762, 0.0)),
    Vector((-0.6860385537147522, -0.7275651097297668, 0.0)),
    Vector((-0.5769769549369812, -0.8167603611946106, 0.0)),
    Vector((-0.9934589862823486, 0.11418949067592621, 0.0)),
    Vector((-0.9879932403564453, -0.15449710190296173, 0.0)),
    Vector((-0.7844639420509338, -0.6201745271682739, 0.0)),
    Vector((-0.5261389017105103, -0.8503986597061157, 0.0)),
    Vector((-0.10498496145009995, -0.9944738149642944, 0.0)),
    Vector((0.4042927622795105, -0.9146296381950378, 0.0)),
    Vector((0.8726954460144043, -0.488264799118042, 0.0)),
    Vector((1.0, -3.657348315755371e-06, 0.0)),
    Vector((0.8122574687004089, -0.5832991003990173, 0.0)),
    Vector((-0.7449144721031189, -0.6671599745750427, 0.0)),
    Vector((-0.7947850823402405, 0.6068909168243408, 0.0)),
    Vector((0.6039409637451172, 0.7970290184020996, 0.0)),
    Vector((0.7776163816452026, -0.6287388801574707, 0.0)),
    Vector((0.5605760216712952, 0.8281030654907227, 0.0)),
    Vector((0.7162068486213684, 0.6978880167007446, 0.0)),
    Vector((0.5884178876876831, -0.8085570335388184, 0.0)),
    Vector((0.36648717522621155, -0.9304230213165283, 0.0)),
    Vector((0.5416461229324341, -0.840606689453125, 0.0)),
    Vector((-0.7948856353759766, -0.606759250164032, 0.0)),
    Vector((-0.6336438059806824, 0.773624837398529, 0.0)),
    Vector((-0.8087772130966187, 0.5881151556968689, 0.0))
]
holesInfo = [
    (92, 12)
]
firstVertIndex = 40
numPolygonVerts = 40
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
