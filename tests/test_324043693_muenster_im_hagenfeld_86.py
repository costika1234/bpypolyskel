import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.44565609097480774, -3.840522527694702, 0.0)),
    Vector((1.515230655670166, -3.7180707454681396, 0.0)),
    Vector((2.104870080947876, -8.883295059204102, 0.0)),
    Vector((13.184574127197266, -7.6031036376953125, 0.0)),
    Vector((13.164005279541016, -7.41386079788208, 0.0)),
    Vector((18.484455108642578, -6.801586627960205, 0.0)),
    Vector((19.07408905029297, -6.2115912437438965, 0.0)),
    Vector((19.437469482421875, -5.554804801940918, 0.0)),
    Vector((19.841983795166016, -4.575191497802734, 0.0)),
    Vector((20.068235397338867, -3.6401069164276123, 0.0)),
    Vector((20.12308120727539, -2.6604952812194824, 0.0)),
    Vector((20.047658920288086, -1.591828465461731, 0.0)),
    Vector((19.841968536376953, -0.7903289198875427, 0.0)),
    Vector((19.45801544189453, 0.05569770932197571, 0.0)),
    Vector((18.94379425048828, 0.8349321484565735, 0.0)),
    Vector((17.894784927368164, 1.9369912147521973, 0.0)),
    Vector((17.401134490966797, 2.2486841678619385, 0.0)),
    Vector((12.121832847595215, 1.636411190032959, 0.0)),
    Vector((12.06698226928711, 1.8256542682647705, 0.0)),
    Vector((0.9941549897193909, 0.6233892440795898, 0.0)),
    Vector((1.0490050315856934, 0.10018765181303024, 0.0)),
    Vector((0.0, 0.0, 5.384591102600098)),
    Vector((0.44565609097480774, -3.840522527694702, 5.384591102600098)),
    Vector((1.515230655670166, -3.7180707454681396, 5.384591102600098)),
    Vector((2.104870080947876, -8.883295059204102, 5.384591102600098)),
    Vector((13.184574127197266, -7.6031036376953125, 5.384591102600098)),
    Vector((13.164005279541016, -7.41386079788208, 5.384591102600098)),
    Vector((18.484455108642578, -6.801586627960205, 5.384591102600098)),
    Vector((19.07408905029297, -6.2115912437438965, 5.384591102600098)),
    Vector((19.437469482421875, -5.554804801940918, 5.384591102600098)),
    Vector((19.841983795166016, -4.575191497802734, 5.384591102600098)),
    Vector((20.068235397338867, -3.6401069164276123, 5.384591102600098)),
    Vector((20.12308120727539, -2.6604952812194824, 5.384591102600098)),
    Vector((20.047658920288086, -1.591828465461731, 5.384591102600098)),
    Vector((19.841968536376953, -0.7903289198875427, 5.384591102600098)),
    Vector((19.45801544189453, 0.05569770932197571, 5.384591102600098)),
    Vector((18.94379425048828, 0.8349321484565735, 5.384591102600098)),
    Vector((17.894784927368164, 1.9369912147521973, 5.384591102600098)),
    Vector((17.401134490966797, 2.2486841678619385, 5.384591102600098)),
    Vector((12.121832847595215, 1.636411190032959, 5.384591102600098)),
    Vector((12.06698226928711, 1.8256542682647705, 5.384591102600098)),
    Vector((0.9941549897193909, 0.6233892440795898, 5.384591102600098)),
    Vector((1.0490050315856934, 0.10018765181303024, 5.384591102600098))
]
unitVectors = [
    Vector((0.11526702344417572, -0.9933345913887024, 0.0)),
    Vector((0.9935101270675659, 0.11374343186616898, 0.0)),
    Vector((0.11341901868581772, -0.993547260761261, 0.0)),
    Vector((0.9933909177780151, 0.11478018760681152, 0.0)),
    Vector((-0.10805384814739227, 0.9941450357437134, 0.0)),
    Vector((0.9934434294700623, 0.11432487517595291, 0.0)),
    Vector((0.7068901062011719, 0.707323431968689, 0.0)),
    Vector((0.4841141998767853, 0.8750048279762268, 0.0)),
    Vector((0.38167262077331543, 0.9242975115776062, 0.0)),
    Vector((0.23517239093780518, 0.9719536304473877, 0.0)),
    Vector((0.05589975789189339, 0.9984363913536072, 0.0)),
    Vector((-0.07040094584226608, 0.9975188970565796, 0.0)),
    Vector((-0.2485768347978592, 0.9686121940612793, 0.0)),
    Vector((-0.4132636487483978, 0.9106113910675049, 0.0)),
    Vector((-0.5507873296737671, 0.8346455693244934, 0.0)),
    Vector((-0.689458429813385, 0.7243252396583557, 0.0)),
    Vector((-0.8455556035041809, 0.5338873267173767, 0.0)),
    Vector((-0.993341863155365, -0.11520394682884216, 0.0)),
    Vector((-0.27838441729545593, 0.9604697823524475, 0.0)),
    Vector((-0.9941570162773132, -0.10794354230165482, 0.0)),
    Vector((0.10426399111747742, -0.994549572467804, 0.0)),
    Vector((-0.9954701066017151, -0.09507467597723007, 0.0))
]
holesInfo = None
firstVertIndex = 22
numPolygonVerts = 22
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
