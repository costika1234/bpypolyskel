import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((0.006772483699023724, -8.96121883392334, 0.0)),
    Vector((5.851425647735596, -8.96121597290039, 0.0)),
    Vector((5.8582258224487305, -31.84850311279297, 0.0)),
    Vector((0.9142895340919495, -31.848506927490234, 0.0)),
    Vector((0.9142900705337524, -34.486778259277344, 0.0)),
    Vector((-0.5485740303993225, -34.486778259277344, 0.0)),
    Vector((-0.5418030023574829, -47.90077590942383, 0.0)),
    Vector((6.135919094085693, -47.90077209472656, 0.0)),
    Vector((6.135923862457275, -51.70790100097656, 0.0)),
    Vector((21.57054901123047, -51.707855224609375, 0.0)),
    Vector((21.563758850097656, -47.956390380859375, 0.0)),
    Vector((27.848674774169922, -47.94522476196289, 0.0)),
    Vector((27.841825485229492, -34.531227111816406, 0.0)),
    Vector((26.412824630737305, -34.53123474121094, 0.0)),
    Vector((26.412809371948242, -31.848434448242188, 0.0)),
    Vector((21.4553279876709, -31.848459243774414, 0.0)),
    Vector((21.448518753051758, -23.321386337280273, 0.0)),
    Vector((23.155189514160156, -23.321378707885742, 0.0)),
    Vector((23.15517234802246, -19.837078094482422, 0.0)),
    Vector((21.414640426635742, -19.837085723876953, 0.0)),
    Vector((21.407819747924805, -9.00570011138916, 0.0)),
    Vector((27.19152069091797, -9.005671501159668, 0.0)),
    Vector((27.191505432128906, -5.977780818939209, 0.0)),
    Vector((29.446741104125977, -5.9777679443359375, 0.0)),
    Vector((29.44672203063965, -2.8830862045288086, 0.0)),
    Vector((27.198259353637695, -2.894231081008911, 0.0)),
    Vector((27.198244094848633, -0.01105630025267601, 0.0)),
    Vector((15.136472702026367, -0.022240467369556427, 0.0)),
    Vector((15.136466979980469, 1.8590589761734009, 0.0)),
    Vector((11.919544219970703, 1.8590500354766846, 0.0)),
    Vector((11.919548988342285, 0.011146477423608303, 0.0)),
    Vector((0.0, 0.0, 15.087678909301758)),
    Vector((0.006772483699023724, -8.96121883392334, 15.087678909301758)),
    Vector((5.851425647735596, -8.96121597290039, 15.087678909301758)),
    Vector((5.8582258224487305, -31.84850311279297, 15.087678909301758)),
    Vector((0.9142895340919495, -31.848506927490234, 15.087678909301758)),
    Vector((0.9142900705337524, -34.486778259277344, 15.087678909301758)),
    Vector((-0.5485740303993225, -34.486778259277344, 15.087678909301758)),
    Vector((-0.5418030023574829, -47.90077590942383, 15.087678909301758)),
    Vector((6.135919094085693, -47.90077209472656, 15.087678909301758)),
    Vector((6.135923862457275, -51.70790100097656, 15.087678909301758)),
    Vector((21.57054901123047, -51.707855224609375, 15.087678909301758)),
    Vector((21.563758850097656, -47.956390380859375, 15.087678909301758)),
    Vector((27.848674774169922, -47.94522476196289, 15.087678909301758)),
    Vector((27.841825485229492, -34.531227111816406, 15.087678909301758)),
    Vector((26.412824630737305, -34.53123474121094, 15.087678909301758)),
    Vector((26.412809371948242, -31.848434448242188, 15.087678909301758)),
    Vector((21.4553279876709, -31.848459243774414, 15.087678909301758)),
    Vector((21.448518753051758, -23.321386337280273, 15.087678909301758)),
    Vector((23.155189514160156, -23.321378707885742, 15.087678909301758)),
    Vector((23.15517234802246, -19.837078094482422, 15.087678909301758)),
    Vector((21.414640426635742, -19.837085723876953, 15.087678909301758)),
    Vector((21.407819747924805, -9.00570011138916, 15.087678909301758)),
    Vector((27.19152069091797, -9.005671501159668, 15.087678909301758)),
    Vector((27.191505432128906, -5.977780818939209, 15.087678909301758)),
    Vector((29.446741104125977, -5.9777679443359375, 15.087678909301758)),
    Vector((29.44672203063965, -2.8830862045288086, 15.087678909301758)),
    Vector((27.198259353637695, -2.894231081008911, 15.087678909301758)),
    Vector((27.198244094848633, -0.01105630025267601, 15.087678909301758)),
    Vector((15.136472702026367, -0.022240467369556427, 15.087678909301758)),
    Vector((15.136466979980469, 1.8590589761734009, 15.087678909301758)),
    Vector((11.919544219970703, 1.8590500354766846, 15.087678909301758)),
    Vector((11.919548988342285, 0.011146477423608303, 15.087678909301758))
]
unitVectors = [
    Vector((0.0007557545322924852, -0.9999997019767761, 0.0)),
    Vector((1.0, 4.895111374025873e-07, 0.0)),
    Vector((0.00029711576644331217, -0.9999998807907104, 0.0)),
    Vector((-1.0, -7.715910896877176e-07, 0.0)),
    Vector((2.0333078509793268e-07, -1.0, 0.0)),
    Vector((-1.0, 0.0, 0.0)),
    Vector((0.0005047732265666127, -0.9999998807907104, 0.0)),
    Vector((1.0, 5.712572601623833e-07, 0.0)),
    Vector((1.252484935321263e-06, -1.0, 0.0)),
    Vector((1.0, 2.9658231142093427e-06, 0.0)),
    Vector((-0.0018099996959790587, 0.9999983906745911, 0.0)),
    Vector((0.9999983906745911, 0.001776571269147098, 0.0)),
    Vector((-0.0005106074968352914, 0.9999998807907104, 0.0)),
    Vector((-1.0, -5.3389712775242515e-06, 0.0)),
    Vector((-5.687635166395921e-06, 1.0, 0.0)),
    Vector((-1.0, -5.0016392378893215e-06, 0.0)),
    Vector((-0.0007985427509993315, 0.9999996423721313, 0.0)),
    Vector((0.9999999403953552, 4.470337444217876e-06, 0.0)),
    Vector((-4.926709607389057e-06, 1.0, 0.0)),
    Vector((-0.9999999403953552, -4.383369287097594e-06, 0.0)),
    Vector((-0.0006297141662798822, 0.9999997615814209, 0.0)),
    Vector((1.0, 4.946699391439324e-06, 0.0)),
    Vector((-5.039411917096004e-06, 0.9999999403953552, 0.0)),
    Vector((1.0, 5.708761818823405e-06, 0.0)),
    Vector((-6.163311354612233e-06, 1.0, 0.0)),
    Vector((-0.9999877214431763, -0.0049566044472157955, 0.0)),
    Vector((-5.292356490826933e-06, 1.0, 0.0)),
    Vector((-0.9999995827674866, -0.000927240471355617, 0.0)),
    Vector((-3.04153900287929e-06, 1.0, 0.0)),
    Vector((-1.0, -2.779269834718434e-06, 0.0)),
    Vector((2.58042246059631e-06, -1.0, 0.0)),
    Vector((-0.9999995231628418, -0.0009351421031169593, 0.0))
]
holesInfo = None
firstVertIndex = 32
numPolygonVerts = 32
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
