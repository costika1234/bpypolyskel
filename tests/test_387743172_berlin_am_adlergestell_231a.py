import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-1.167238712310791, 0.9573477506637573, 0.0)),
    Vector((-4.1939191818237305, -2.8497772216796875, 0.0)),
    Vector((-2.999535083770752, -3.8293895721435547, 0.0)),
    Vector((-4.770756721496582, -7.269160270690918, 0.0)),
    Vector((-5.985506057739258, -10.998361587524414, 0.0)),
    Vector((-6.569132328033447, -14.872279167175293, 0.0)),
    Vector((-6.501274108886719, -18.71280288696289, 0.0)),
    Vector((-7.987473964691162, -19.013362884521484, 0.0)),
    Vector((-6.9288177490234375, -23.532936096191406, 0.0)),
    Vector((-5.578342914581299, -23.187847137451172, 0.0)),
    Vector((-4.268589496612549, -27.217613220214844, 0.0)),
    Vector((1.710152506828308, -33.8077278137207, 0.0)),
    Vector((10.423771858215332, -26.81685447692871, 0.0)),
    Vector((8.55074691772461, -24.534809112548828, 0.0)),
    Vector((6.976325511932373, -25.837249755859375, 0.0)),
    Vector((5.442616939544678, -23.51067352294922, 0.0)),
    Vector((4.356805801391602, -20.961458206176758, 0.0)),
    Vector((3.773181676864624, -18.245262145996094, 0.0)),
    Vector((3.7121028900146484, -15.462275505065918, 0.0)),
    Vector((4.1735687255859375, -12.72381591796875, 0.0)),
    Vector((5.137219429016113, -10.118939399719238, 0.0)),
    Vector((6.575908660888672, -7.747832298278809, 0.0)),
    Vector((8.435346603393555, -5.699550628662109, 0.0)),
    Vector((12.581755638122559, -2.081658363342285, 0.0)),
    Vector((13.491119384765625, -3.161454916000366, 0.0)),
    Vector((15.818805694580078, -1.179961085319519, 0.0)),
    Vector((14.814434051513672, -0.0667693242430687, 0.0)),
    Vector((15.43198299407959, 0.43417027592658997, 0.0)),
    Vector((8.87643051147461, 7.736712455749512, 0.0)),
    Vector((0.0, 0.0, 9.187023162841797)),
    Vector((-1.167238712310791, 0.9573477506637573, 9.187023162841797)),
    Vector((-4.1939191818237305, -2.8497772216796875, 9.187023162841797)),
    Vector((-2.999535083770752, -3.8293895721435547, 9.187023162841797)),
    Vector((-4.770756721496582, -7.269160270690918, 9.187023162841797)),
    Vector((-5.985506057739258, -10.998361587524414, 9.187023162841797)),
    Vector((-6.569132328033447, -14.872279167175293, 9.187023162841797)),
    Vector((-6.501274108886719, -18.71280288696289, 9.187023162841797)),
    Vector((-7.987473964691162, -19.013362884521484, 9.187023162841797)),
    Vector((-6.9288177490234375, -23.532936096191406, 9.187023162841797)),
    Vector((-5.578342914581299, -23.187847137451172, 9.187023162841797)),
    Vector((-4.268589496612549, -27.217613220214844, 9.187023162841797)),
    Vector((1.710152506828308, -33.8077278137207, 9.187023162841797)),
    Vector((10.423771858215332, -26.81685447692871, 9.187023162841797)),
    Vector((8.55074691772461, -24.534809112548828, 9.187023162841797)),
    Vector((6.976325511932373, -25.837249755859375, 9.187023162841797)),
    Vector((5.442616939544678, -23.51067352294922, 9.187023162841797)),
    Vector((4.356805801391602, -20.961458206176758, 9.187023162841797)),
    Vector((3.773181676864624, -18.245262145996094, 9.187023162841797)),
    Vector((3.7121028900146484, -15.462275505065918, 9.187023162841797)),
    Vector((4.1735687255859375, -12.72381591796875, 9.187023162841797)),
    Vector((5.137219429016113, -10.118939399719238, 9.187023162841797)),
    Vector((6.575908660888672, -7.747832298278809, 9.187023162841797)),
    Vector((8.435346603393555, -5.699550628662109, 9.187023162841797)),
    Vector((12.581755638122559, -2.081658363342285, 9.187023162841797)),
    Vector((13.491119384765625, -3.161454916000366, 9.187023162841797)),
    Vector((15.818805694580078, -1.179961085319519, 9.187023162841797)),
    Vector((14.814434051513672, -0.0667693242430687, 9.187023162841797)),
    Vector((15.43198299407959, 0.43417027592658997, 9.187023162841797)),
    Vector((8.87643051147461, 7.736712455749512, 9.187023162841797))
]
unitVectors = [
    Vector((-0.7731989026069641, 0.6341635584831238, 0.0)),
    Vector((-0.6223076581954956, -0.7827727198600769, 0.0)),
    Vector((0.7731987237930298, -0.6341636776924133, 0.0)),
    Vector((-0.45779693126678467, -0.8890567421913147, 0.0)),
    Vector((-0.3097222149372101, -0.9508270621299744, 0.0)),
    Vector((-0.14897418022155762, -0.98884117603302, 0.0)),
    Vector((0.017666243016719818, -0.9998438954353333, 0.0)),
    Vector((-0.9801573157310486, -0.19822104275226593, 0.0)),
    Vector((0.22806496918201447, -0.9736459851264954, 0.0)),
    Vector((0.9688684344291687, 0.24757647514343262, 0.0)),
    Vector((0.3091030418872833, -0.95102858543396, 0.0)),
    Vector((0.6719173789024353, -0.7406260967254639, 0.0)),
    Vector((0.7799956798553467, 0.6257848739624023, 0.0)),
    Vector((-0.6344335079193115, 0.7729774713516235, 0.0)),
    Vector((-0.7705214023590088, -0.6374140977859497, 0.0)),
    Vector((-0.5503842830657959, 0.8349115252494812, 0.0)),
    Vector((-0.3918725252151489, 0.9200195074081421, 0.0)),
    Vector((-0.2100735455751419, 0.9776856303215027, 0.0)),
    Vector((-0.02194192446768284, 0.9997592568397522, 0.0)),
    Vector((0.16617010533809662, 0.9860970973968506, 0.0)),
    Vector((0.34696024656295776, 0.9378798604011536, 0.0)),
    Vector((0.5187379717826843, 0.8549333214759827, 0.0)),
    Vector((0.6721509099006653, 0.7404142618179321, 0.0)),
    Vector((0.753495991230011, 0.6574525833129883, 0.0)),
    Vector((0.6441612243652344, -0.7648897767066956, 0.0)),
    Vector((0.7614611983299255, 0.6482104659080505, 0.0)),
    Vector((-0.6698850989341736, 0.7424647808074951, 0.0)),
    Vector((0.7766177654266357, 0.6299721002578735, 0.0)),
    Vector((-0.6680220365524292, 0.7441415190696716, 0.0)),
    Vector((-0.7538448572158813, -0.6570525169372559, 0.0))
]
holesInfo = None
firstVertIndex = 30
numPolygonVerts = 30
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
