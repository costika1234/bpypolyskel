import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-12.600380897521973, -26.20458984375, 0.0)),
    Vector((-11.833026885986328, -24.94668197631836, 0.0)),
    Vector((-10.566287994384766, -24.134052276611328, 0.0)),
    Vector((-9.104668617248535, -23.788965225219727, 0.0)),
    Vector((-7.606509208679199, -23.967079162597656, 0.0)),
    Vector((-6.2606024742126465, -24.62386703491211, 0.0)),
    Vector((-5.207019805908203, -25.70366668701172, 0.0)),
    Vector((-4.5858330726623535, -27.07289695739746, 0.0)),
    Vector((-4.457942962646484, -28.57571029663086, 0.0)),
    Vector((-4.841619968414307, -30.022863388061523, 0.0)),
    Vector((-5.621152877807617, -31.19171714782715, 0.0)),
    Vector((-6.729550838470459, -32.04887771606445, 0.0)),
    Vector((-8.045011520385742, -32.52754592895508, 0.0)),
    Vector((-9.445732116699219, -32.549808502197266, 0.0)),
    Vector((18.842803955078125, -45.730003356933594, 0.0)),
    Vector((23.465145111083984, -36.12310791015625, 0.0)),
    Vector((6.425039768218994, -27.930055618286133, 0.0)),
    Vector((16.290897369384766, -7.402714252471924, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-12.600380897521973, -26.20458984375, 8.739018440246582)),
    Vector((-11.833026885986328, -24.94668197631836, 8.739018440246582)),
    Vector((-10.566287994384766, -24.134052276611328, 8.739018440246582)),
    Vector((-9.104668617248535, -23.788965225219727, 8.739018440246582)),
    Vector((-7.606509208679199, -23.967079162597656, 8.739018440246582)),
    Vector((-6.2606024742126465, -24.62386703491211, 8.739018440246582)),
    Vector((-5.207019805908203, -25.70366668701172, 8.739018440246582)),
    Vector((-4.5858330726623535, -27.07289695739746, 8.739018440246582)),
    Vector((-4.457942962646484, -28.57571029663086, 8.739018440246582)),
    Vector((-4.841619968414307, -30.022863388061523, 8.739018440246582)),
    Vector((-5.621152877807617, -31.19171714782715, 8.739018440246582)),
    Vector((-6.729550838470459, -32.04887771606445, 8.739018440246582)),
    Vector((-8.045011520385742, -32.52754592895508, 8.739018440246582)),
    Vector((-9.445732116699219, -32.549808502197266, 8.739018440246582)),
    Vector((18.842803955078125, -45.730003356933594, 8.739018440246582)),
    Vector((23.465145111083984, -36.12310791015625, 8.739018440246582)),
    Vector((6.425039768218994, -27.930055618286133, 8.739018440246582)),
    Vector((16.290897369384766, -7.402714252471924, 8.739018440246582)),
    Vector((0.0, 0.0, 8.739018440246582))
]
unitVectors = [
    Vector((0.5207741260528564, 0.853694498538971, 0.0)),
    Vector((0.8416926264762878, 0.5399569272994995, 0.0)),
    Vector((0.9732422232627869, 0.2297816425561905, 0.0)),
    Vector((0.9930067658424377, -0.11805709451436996, 0.0)),
    Vector((0.8987031579017639, -0.43855738639831543, 0.0)),
    Vector((0.6983644962310791, -0.7157423496246338, 0.0)),
    Vector((0.4131465554237366, -0.9106645584106445, 0.0)),
    Vector((0.08479397743940353, -0.9963985681533813, 0.0)),
    Vector((-0.25627145171165466, -0.9666048288345337, 0.0)),
    Vector((-0.5548465847969055, -0.8319527506828308, 0.0)),
    Vector((-0.7910531163215637, -0.6117473840713501, 0.0)),
    Vector((-0.9397202730178833, -0.34194424748420715, 0.0)),
    Vector((-0.999873697757721, -0.015891650691628456, 0.0)),
    Vector((0.9064423441886902, -0.4223296344280243, 0.0)),
    Vector((0.43357184529304504, 0.9011189937591553, 0.0)),
    Vector((-0.9012380838394165, 0.43332424759864807, 0.0)),
    Vector((0.4331854283809662, 0.9013048410415649, 0.0)),
    Vector((-0.9104136228561401, 0.4136992394924164, 0.0)),
    Vector((-0.43335089087486267, -0.9012253284454346, 0.0))
]
holesInfo = None
firstVertIndex = 19
numPolygonVerts = 19
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
