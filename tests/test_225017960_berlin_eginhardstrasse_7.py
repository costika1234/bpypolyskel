import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((22.055681228637695, -15.963165283203125, 0.0)),
    Vector((18.435123443603516, -21.005952835083008, 0.0)),
    Vector((17.20792007446289, -20.115402221679688, 0.0)),
    Vector((14.52978801727295, -23.844614028930664, 0.0)),
    Vector((15.750211715698242, -24.72403335571289, 0.0)),
    Vector((12.624588966369629, -29.087766647338867, 0.0)),
    Vector((11.397384643554688, -28.197214126586914, 0.0)),
    Vector((8.732803344726562, -31.904157638549805, 0.0)),
    Vector((9.94644832611084, -32.79471206665039, 0.0)),
    Vector((8.753148078918457, -34.43111038208008, 0.0)),
    Vector((18.516563415527344, -41.488739013671875, 0.0)),
    Vector((19.703081130981445, -39.863468170166016, 0.0)),
    Vector((20.903169631958008, -40.70949172973633, 0.0)),
    Vector((23.56096649169922, -36.98027801513672, 0.0)),
    Vector((22.394779205322266, -36.12312316894531, 0.0)),
    Vector((25.547517776489258, -31.79277992248535, 0.0)),
    Vector((26.706924438476562, -32.63880157470703, 0.0)),
    Vector((29.39183235168457, -28.909584045410156, 0.0)),
    Vector((28.2324275970459, -28.07469367980957, 0.0)),
    Vector((32.86998748779297, -21.595870971679688, 0.0)),
    Vector((34.06329345703125, -22.441890716552734, 0.0)),
    Vector((36.74140930175781, -18.712669372558594, 0.0)),
    Vector((35.54810333251953, -17.85551643371582, 0.0)),
    Vector((39.52798080444336, -12.289512634277344, 0.0)),
    Vector((36.280296325683594, -9.940695762634277, 0.0)),
    Vector((36.856597900390625, -9.150323867797852, 0.0)),
    Vector((33.575016021728516, -6.801506042480469, 0.0)),
    Vector((32.99193572998047, -7.603010177612305, 0.0)),
    Vector((27.48647689819336, -3.5955424308776855, 0.0)),
    Vector((27.893278121948242, -3.016678810119629, 0.0)),
    Vector((11.78376293182373, 8.638406753540039, 0.0)),
    Vector((11.36340045928955, 8.081808090209961, 0.0)),
    Vector((7.736057758331299, 10.686676979064941, 0.0)),
    Vector((0.0, 0.0, 8.805627822875977)),
    Vector((22.055681228637695, -15.963165283203125, 8.805627822875977)),
    Vector((18.435123443603516, -21.005952835083008, 8.805627822875977)),
    Vector((17.20792007446289, -20.115402221679688, 8.805627822875977)),
    Vector((14.52978801727295, -23.844614028930664, 8.805627822875977)),
    Vector((15.750211715698242, -24.72403335571289, 8.805627822875977)),
    Vector((12.624588966369629, -29.087766647338867, 8.805627822875977)),
    Vector((11.397384643554688, -28.197214126586914, 8.805627822875977)),
    Vector((8.732803344726562, -31.904157638549805, 8.805627822875977)),
    Vector((9.94644832611084, -32.79471206665039, 8.805627822875977)),
    Vector((8.753148078918457, -34.43111038208008, 8.805627822875977)),
    Vector((18.516563415527344, -41.488739013671875, 8.805627822875977)),
    Vector((19.703081130981445, -39.863468170166016, 8.805627822875977)),
    Vector((20.903169631958008, -40.70949172973633, 8.805627822875977)),
    Vector((23.56096649169922, -36.98027801513672, 8.805627822875977)),
    Vector((22.394779205322266, -36.12312316894531, 8.805627822875977)),
    Vector((25.547517776489258, -31.79277992248535, 8.805627822875977)),
    Vector((26.706924438476562, -32.63880157470703, 8.805627822875977)),
    Vector((29.39183235168457, -28.909584045410156, 8.805627822875977)),
    Vector((28.2324275970459, -28.07469367980957, 8.805627822875977)),
    Vector((32.86998748779297, -21.595870971679688, 8.805627822875977)),
    Vector((34.06329345703125, -22.441890716552734, 8.805627822875977)),
    Vector((36.74140930175781, -18.712669372558594, 8.805627822875977)),
    Vector((35.54810333251953, -17.85551643371582, 8.805627822875977)),
    Vector((39.52798080444336, -12.289512634277344, 8.805627822875977)),
    Vector((36.280296325683594, -9.940695762634277, 8.805627822875977)),
    Vector((36.856597900390625, -9.150323867797852, 8.805627822875977)),
    Vector((33.575016021728516, -6.801506042480469, 8.805627822875977)),
    Vector((32.99193572998047, -7.603010177612305, 8.805627822875977)),
    Vector((27.48647689819336, -3.5955424308776855, 8.805627822875977)),
    Vector((27.893278121948242, -3.016678810119629, 8.805627822875977)),
    Vector((11.78376293182373, 8.638406753540039, 8.805627822875977)),
    Vector((11.36340045928955, 8.081808090209961, 8.805627822875977)),
    Vector((7.736057758331299, 10.686676979064941, 8.805627822875977))
]
unitVectors = [
    Vector((0.8100849986076355, -0.586312472820282, 0.0)),
    Vector((-0.5832168459892273, -0.8123164176940918, 0.0)),
    Vector((-0.8093507885932922, 0.5873255133628845, 0.0)),
    Vector((-0.5833144187927246, -0.8122463822364807, 0.0)),
    Vector((0.8113091588020325, -0.5846174359321594, 0.0)),
    Vector((-0.5823072791099548, -0.8129687309265137, 0.0)),
    Vector((-0.8093503713607788, 0.5873260498046875, 0.0)),
    Vector((-0.5836671590805054, -0.8119929432868958, 0.0)),
    Vector((0.8062313199043274, -0.5916004180908203, 0.0)),
    Vector((-0.5892021656036377, -0.8079856038093567, 0.0)),
    Vector((0.810431957244873, -0.5858327150344849, 0.0)),
    Vector((0.5896342396736145, 0.8076704740524292, 0.0)),
    Vector((0.817319929599762, -0.576184093952179, 0.0)),
    Vector((0.5803807973861694, 0.8143451809883118, 0.0)),
    Vector((-0.8057616949081421, 0.5922398567199707, 0.0)),
    Vector((0.5885865092277527, 0.8084341883659363, 0.0)),
    Vector((0.8078014850616455, -0.5894545912742615, 0.0)),
    Vector((0.5842862725257874, 0.8115476369857788, 0.0)),
    Vector((-0.8114948868751526, 0.5843595266342163, 0.0)),
    Vector((0.5820547938346863, 0.8131495714187622, 0.0)),
    Vector((0.815778911113739, -0.578363835811615, 0.0)),
    Vector((0.583311140537262, 0.8122487664222717, 0.0)),
    Vector((-0.8121881484985352, 0.5833956003189087, 0.0)),
    Vector((0.5816407203674316, 0.8134458065032959, 0.0)),
    Vector((-0.8102921843528748, 0.586026132106781, 0.0)),
    Vector((0.5891646146774292, 0.8080130219459534, 0.0)),
    Vector((-0.8131668567657471, 0.5820305347442627, 0.0)),
    Vector((-0.5882826447486877, -0.808655321598053, 0.0)),
    Vector((-0.8084916472434998, 0.5885075926780701, 0.0)),
    Vector((0.5749759674072266, 0.8181703090667725, 0.0)),
    Vector((-0.8101911544799805, 0.5861657857894897, 0.0)),
    Vector((-0.602669894695282, -0.7979905009269714, 0.0)),
    Vector((-0.812257707118988, 0.5832988619804382, 0.0)),
    Vector((-0.5863820314407349, -0.8100346922874451, 0.0))
]
holesInfo = None
firstVertIndex = 34
numPolygonVerts = 34
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
