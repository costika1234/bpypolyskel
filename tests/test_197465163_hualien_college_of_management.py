import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((20.762365341186523, 9.261796951293945, 0.0)),
    Vector((23.55104637145996, 3.105833053588867, 0.0)),
    Vector((31.896697998046875, 6.801656246185303, 0.0)),
    Vector((30.80768585205078, 9.261815071105957, 0.0)),
    Vector((41.728267669677734, 14.104240417480469, 0.0)),
    Vector((42.857994079589844, 11.621818542480469, 0.0)),
    Vector((53.452884674072266, 16.475383758544922, 0.0)),
    Vector((50.7456169128418, 22.286251068115234, 0.0)),
    Vector((71.82341766357422, 32.216041564941406, 0.0)),
    Vector((67.31468963623047, 42.21250915527344, 0.0)),
    Vector((63.630401611328125, 40.60948944091797, 0.0)),
    Vector((59.74256134033203, 39.39609146118164, 0.0)),
    Vector((55.5900993347168, 39.184566497802734, 0.0)),
    Vector((51.64118194580078, 40.576045989990234, 0.0)),
    Vector((48.12989807128906, 43.091854095458984, 0.0)),
    Vector((45.32086944580078, 46.4091682434082, 0.0)),
    Vector((43.70262145996094, 49.31460189819336, 0.0)),
    Vector((42.328636169433594, 52.57625961303711, 0.0)),
    Vector((41.33121871948242, 56.594886779785156, 0.0)),
    Vector((41.36174011230469, 60.52446746826172, 0.0)),
    Vector((42.277713775634766, 64.25366973876953, 0.0)),
    Vector((44.41499328613281, 68.2945785522461, 0.0)),
    Vector((47.35630798339844, 70.84380340576172, 0.0)),
    Vector((52.75041961669922, 74.17227172851562, 0.0)),
    Vector((47.1018180847168, 86.9072036743164, 0.0)),
    Vector((-26.40069007873535, 54.05677032470703, 0.0)),
    Vector((-23.5611515045166, 47.24401092529297, 0.0)),
    Vector((-20.3043155670166, 48.5241813659668, 0.0)),
    Vector((-18.747148513793945, 44.9953498840332, 0.0)),
    Vector((-16.56913948059082, 45.83024215698242, 0.0)),
    Vector((-11.592289924621582, 47.01022720336914, 0.0)),
    Vector((-5.373774528503418, 47.02135467529297, 0.0)),
    Vector((-0.9159843325614929, 46.25325012207031, 0.0)),
    Vector((3.3484320640563965, 44.661380767822266, 0.0)),
    Vector((6.798641204833984, 41.82273483276367, 0.0)),
    Vector((9.414288520812988, 37.94881820678711, 0.0)),
    Vector((10.381163597106934, 34.94319152832031, 0.0)),
    Vector((10.51347541809082, 32.14907455444336, 0.0)),
    Vector((10.187793731689453, 29.366085052490234, 0.0)),
    Vector((8.508489608764648, 24.74632453918457, 0.0)),
    Vector((5.69946813583374, 20.972593307495117, 0.0)),
    Vector((1.6589527130126953, 18.022624969482422, 0.0)),
    Vector((-2.697070837020874, 15.406618118286133, 0.0)),
    Vector((-1.475756049156189, 12.356463432312012, 0.0)),
    Vector((-4.844551086425781, 10.797991752624512, 0.0)),
    Vector((0.0, 0.0, 14.604506492614746)),
    Vector((20.762365341186523, 9.261796951293945, 14.604506492614746)),
    Vector((23.55104637145996, 3.105833053588867, 14.604506492614746)),
    Vector((31.896697998046875, 6.801656246185303, 14.604506492614746)),
    Vector((30.80768585205078, 9.261815071105957, 14.604506492614746)),
    Vector((41.728267669677734, 14.104240417480469, 14.604506492614746)),
    Vector((42.857994079589844, 11.621818542480469, 14.604506492614746)),
    Vector((53.452884674072266, 16.475383758544922, 14.604506492614746)),
    Vector((50.7456169128418, 22.286251068115234, 14.604506492614746)),
    Vector((71.82341766357422, 32.216041564941406, 14.604506492614746)),
    Vector((67.31468963623047, 42.21250915527344, 14.604506492614746)),
    Vector((63.630401611328125, 40.60948944091797, 14.604506492614746)),
    Vector((59.74256134033203, 39.39609146118164, 14.604506492614746)),
    Vector((55.5900993347168, 39.184566497802734, 14.604506492614746)),
    Vector((51.64118194580078, 40.576045989990234, 14.604506492614746)),
    Vector((48.12989807128906, 43.091854095458984, 14.604506492614746)),
    Vector((45.32086944580078, 46.4091682434082, 14.604506492614746)),
    Vector((43.70262145996094, 49.31460189819336, 14.604506492614746)),
    Vector((42.328636169433594, 52.57625961303711, 14.604506492614746)),
    Vector((41.33121871948242, 56.594886779785156, 14.604506492614746)),
    Vector((41.36174011230469, 60.52446746826172, 14.604506492614746)),
    Vector((42.277713775634766, 64.25366973876953, 14.604506492614746)),
    Vector((44.41499328613281, 68.2945785522461, 14.604506492614746)),
    Vector((47.35630798339844, 70.84380340576172, 14.604506492614746)),
    Vector((52.75041961669922, 74.17227172851562, 14.604506492614746)),
    Vector((47.1018180847168, 86.9072036743164, 14.604506492614746)),
    Vector((-26.40069007873535, 54.05677032470703, 14.604506492614746)),
    Vector((-23.5611515045166, 47.24401092529297, 14.604506492614746)),
    Vector((-20.3043155670166, 48.5241813659668, 14.604506492614746)),
    Vector((-18.747148513793945, 44.9953498840332, 14.604506492614746)),
    Vector((-16.56913948059082, 45.83024215698242, 14.604506492614746)),
    Vector((-11.592289924621582, 47.01022720336914, 14.604506492614746)),
    Vector((-5.373774528503418, 47.02135467529297, 14.604506492614746)),
    Vector((-0.9159843325614929, 46.25325012207031, 14.604506492614746)),
    Vector((3.3484320640563965, 44.661380767822266, 14.604506492614746)),
    Vector((6.798641204833984, 41.82273483276367, 14.604506492614746)),
    Vector((9.414288520812988, 37.94881820678711, 14.604506492614746)),
    Vector((10.381163597106934, 34.94319152832031, 14.604506492614746)),
    Vector((10.51347541809082, 32.14907455444336, 14.604506492614746)),
    Vector((10.187793731689453, 29.366085052490234, 14.604506492614746)),
    Vector((8.508489608764648, 24.74632453918457, 14.604506492614746)),
    Vector((5.69946813583374, 20.972593307495117, 14.604506492614746)),
    Vector((1.6589527130126953, 18.022624969482422, 14.604506492614746)),
    Vector((-2.697070837020874, 15.406618118286133, 14.604506492614746)),
    Vector((-1.475756049156189, 12.356463432312012, 14.604506492614746)),
    Vector((-4.844551086425781, 10.797991752624512, 14.604506492614746))
]
unitVectors = [
    Vector((0.9132543802261353, 0.4073898494243622, 0.0)),
    Vector((0.4126394987106323, -0.9108943343162537, 0.0)),
    Vector((0.9143537878990173, 0.40491625666618347, 0.0)),
    Vector((-0.40477490425109863, 0.9144163727760315, 0.0)),
    Vector((0.9141581654548645, 0.4053577780723572, 0.0)),
    Vector((0.41421395540237427, -0.9101794958114624, 0.0)),
    Vector((0.9091436862945557, 0.4164826571941376, 0.0)),
    Vector((-0.42231276631355286, 0.9064502120018005, 0.0)),
    Vector((0.9046396017074585, 0.42617738246917725, 0.0)),
    Vector((-0.41114693880081177, 0.9115690588951111, 0.0)),
    Vector((-0.9169648885726929, -0.3989679217338562, 0.0)),
    Vector((-0.9545884728431702, -0.2979277968406677, 0.0)),
    Vector((-0.9987050890922546, -0.050873689353466034, 0.0)),
    Vector((-0.943159282207489, 0.33234092593193054, 0.0)),
    Vector((-0.8128842115402222, 0.5824252963066101, 0.0)),
    Vector((-0.6462197303771973, 0.7631513476371765, 0.0)),
    Vector((-0.48658889532089233, 0.8736311197280884, 0.0)),
    Vector((-0.3882143497467041, 0.9215690493583679, 0.0)),
    Vector((-0.24088972806930542, 0.9705525040626526, 0.0)),
    Vector((0.007766852155327797, 0.9999698400497437, 0.0)),
    Vector((0.2385319024324417, 0.971134603023529, 0.0)),
    Vector((0.4675416648387909, 0.883971095085144, 0.0)),
    Vector((0.7556782364845276, 0.65494304895401, 0.0)),
    Vector((0.8510228991508484, 0.5251287221908569, 0.0)),
    Vector((-0.40545693039894104, 0.9141141176223755, 0.0)),
    Vector((-0.9129676222801208, -0.408032089471817, 0.0)),
    Vector((0.38471800088882446, -0.9230341911315918, 0.0)),
    Vector((0.9306834936141968, 0.36582544445991516, 0.0)),
    Vector((0.40371173620224, -0.9148862361907959, 0.0)),
    Vector((0.9337477087974548, 0.35793182253837585, 0.0)),
    Vector((0.9730251431465149, 0.23069918155670166, 0.0)),
    Vector((0.9999983906745911, 0.0017894068732857704, 0.0)),
    Vector((0.9854779243469238, -0.16980387270450592, 0.0)),
    Vector((0.9368544220924377, -0.3497195839881897, 0.0)),
    Vector((0.7722269296646118, -0.6353466510772705, 0.0)),
    Vector((0.5595836043357849, -0.8287738561630249, 0.0)),
    Vector((0.306233286857605, -0.9519564509391785, 0.0)),
    Vector((0.04730071499943733, -0.9988806843757629, 0.0)),
    Vector((-0.11623264104127884, -0.9932219982147217, 0.0)),
    Vector((-0.341633677482605, -0.9398331642150879, 0.0)),
    Vector((-0.5971015095710754, -0.802165687084198, 0.0)),
    Vector((-0.8076496720314026, -0.5896626114845276, 0.0)),
    Vector((-0.8572851419448853, -0.5148419141769409, 0.0)),
    Vector((0.3717193603515625, -0.9283450841903687, 0.0)),
    Vector((-0.9075855612754822, -0.4198671877384186, 0.0)),
    Vector((0.40934237837791443, -0.9123808145523071, 0.0))
]
holesInfo = None
firstVertIndex = 46
numPolygonVerts = 46
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
