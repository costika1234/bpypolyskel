import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.14911331236362457, -10.875914573669434, 0.0)),
    Vector((9.692366600036621, -11.187599182128906, 0.0)),
    Vector((9.611032485961914, -11.688536643981934, 0.0)),
    Vector((9.624589920043945, -12.200606346130371, 0.0)),
    Vector((9.733036994934082, -12.690412521362305, 0.0)),
    Vector((9.943151473999023, -13.146821975708008, 0.0)),
    Vector((10.241379737854004, -13.558703422546387, 0.0)),
    Vector((10.614163398742676, -13.903793334960938, 0.0)),
    Vector((11.047948837280273, -14.15982723236084, 0.0)),
    Vector((11.522400856018066, -14.326805114746094, 0.0)),
    Vector((12.023963928222656, -14.393595695495605, 0.0)),
    Vector((12.525527954101562, -14.360198020935059, 0.0)),
    Vector((13.006756782531738, -14.215481758117676, 0.0)),
    Vector((13.454096794128418, -13.992841720581055, 0.0)),
    Vector((13.847212791442871, -13.670013427734375, 0.0)),
    Vector((14.172550201416016, -13.280394554138184, 0.0)),
    Vector((14.409774780273438, -12.835116386413574, 0.0)),
    Vector((14.558886528015137, -12.356441497802734, 0.0)),
    Vector((14.599552154541016, -11.844371795654297, 0.0)),
    Vector((14.545328140258789, -11.34343433380127, 0.0)),
    Vector((14.965556144714355, -11.354565620422363, 0.0)),
    Vector((14.918099403381348, -7.447251319885254, 0.0)),
    Vector((16.4160099029541, -7.547433853149414, 0.0)),
    Vector((16.49056053161621, -6.07801628112793, 0.0)),
    Vector((15.57554817199707, -6.089151382446289, 0.0)),
    Vector((15.61619758605957, -0.25600990653038025, 0.0)),
    Vector((0.0, 0.0, 6.482941627502441)),
    Vector((-0.14911331236362457, -10.875914573669434, 6.482941627502441)),
    Vector((9.692366600036621, -11.187599182128906, 6.482941627502441)),
    Vector((9.611032485961914, -11.688536643981934, 6.482941627502441)),
    Vector((9.624589920043945, -12.200606346130371, 6.482941627502441)),
    Vector((9.733036994934082, -12.690412521362305, 6.482941627502441)),
    Vector((9.943151473999023, -13.146821975708008, 6.482941627502441)),
    Vector((10.241379737854004, -13.558703422546387, 6.482941627502441)),
    Vector((10.614163398742676, -13.903793334960938, 6.482941627502441)),
    Vector((11.047948837280273, -14.15982723236084, 6.482941627502441)),
    Vector((11.522400856018066, -14.326805114746094, 6.482941627502441)),
    Vector((12.023963928222656, -14.393595695495605, 6.482941627502441)),
    Vector((12.525527954101562, -14.360198020935059, 6.482941627502441)),
    Vector((13.006756782531738, -14.215481758117676, 6.482941627502441)),
    Vector((13.454096794128418, -13.992841720581055, 6.482941627502441)),
    Vector((13.847212791442871, -13.670013427734375, 6.482941627502441)),
    Vector((14.172550201416016, -13.280394554138184, 6.482941627502441)),
    Vector((14.409774780273438, -12.835116386413574, 6.482941627502441)),
    Vector((14.558886528015137, -12.356441497802734, 6.482941627502441)),
    Vector((14.599552154541016, -11.844371795654297, 6.482941627502441)),
    Vector((14.545328140258789, -11.34343433380127, 6.482941627502441)),
    Vector((14.965556144714355, -11.354565620422363, 6.482941627502441)),
    Vector((14.918099403381348, -7.447251319885254, 6.482941627502441)),
    Vector((16.4160099029541, -7.547433853149414, 6.482941627502441)),
    Vector((16.49056053161621, -6.07801628112793, 6.482941627502441)),
    Vector((15.57554817199707, -6.089151382446289, 6.482941627502441)),
    Vector((15.61619758605957, -0.25600990653038025, 6.482941627502441))
]
unitVectors = [
    Vector((-0.013709126971662045, -0.9999060034751892, 0.0)),
    Vector((0.9994988441467285, -0.03165462985634804, 0.0)),
    Vector((-0.16026508808135986, -0.9870739579200745, 0.0)),
    Vector((0.026466485112905502, -0.9996497631072998, 0.0)),
    Vector((0.2161729484796524, -0.9763550162315369, 0.0)),
    Vector((0.4181784987449646, -0.9083648920059204, 0.0)),
    Vector((0.5864701867103577, -0.8099707961082458, 0.0)),
    Vector((0.7338393330574036, -0.679323136806488, 0.0)),
    Vector((0.861181914806366, -0.5082968473434448, 0.0)),
    Vector((0.9432867765426636, -0.33197882771492004, 0.0)),
    Vector((0.9912497401237488, -0.1319996416568756, 0.0)),
    Vector((0.997790515422821, 0.06643993407487869, 0.0)),
    Vector((0.9576357007026672, 0.28798243403434753, 0.0)),
    Vector((0.8952502012252808, 0.4455638527870178, 0.0)),
    Vector((0.7728114724159241, 0.6346356272697449, 0.0)),
    Vector((0.6409456729888916, 0.7675862312316895, 0.0)),
    Vector((0.47019144892692566, 0.8825644850730896, 0.0)),
    Vector((0.29741328954696655, 0.9547488689422607, 0.0)),
    Vector((0.0791650041937828, 0.9968615174293518, 0.0)),
    Vector((-0.10761644691228867, 0.9941925406455994, 0.0)),
    Vector((0.9996493458747864, -0.026479395106434822, 0.0)),
    Vector((-0.012144720181822777, 0.9999262094497681, 0.0)),
    Vector((0.9977709054946899, -0.06673243641853333, 0.0)),
    Vector((0.05066964775323868, 0.9987155199050903, 0.0)),
    Vector((-0.999925971031189, -0.012168444693088531, 0.0)),
    Vector((0.006968531291931868, 0.9999757409095764, 0.0)),
    Vector((-0.9998656511306763, 0.01639166660606861, 0.0))
]
holesInfo = None
firstVertIndex = 27
numPolygonVerts = 27
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
