import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-0.3690195679664612, -1.046403169631958, 0.0)),
    Vector((-0.6287001371383667, -2.126202344894409, 0.0)),
    Vector((-0.6560350656509399, -3.2393970489501953, 0.0)),
    Vector((-0.5398622751235962, -4.341460227966309, 0.0)),
    Vector((-0.1776762455701828, -5.398995399475098, 0.0)),
    Vector((0.2665144205093384, -6.4120025634765625, 0.0)),
    Vector((0.9157163500785828, -7.280294418334961, 0.0)),
    Vector((1.7084263563156128, -8.104058265686035, 0.0)),
    Vector((2.330293655395508, -8.549336433410645, 0.0)),
    Vector((3.0615005493164062, -8.9166898727417, 0.0)),
    Vector((86.89784240722656, -33.57319641113281, 0.0)),
    Vector((89.05729675292969, -32.9831657409668, 0.0)),
    Vector((90.42402648925781, -32.30409240722656, 0.0)),
    Vector((91.85225677490234, -31.112947463989258, 0.0)),
    Vector((92.93878936767578, -29.498794555664062, 0.0)),
    Vector((93.54695892333984, -27.662012100219727, 0.0)),
    Vector((93.6494369506836, -25.9810848236084, 0.0)),
    Vector((93.34871673583984, -24.322429656982422, 0.0)),
    Vector((92.56964111328125, -22.66378402709961, 0.0)),
    Vector((90.8885269165039, -21.42816925048828, 0.0)),
    Vector((6.567174911499023, 3.6958115100860596, 0.0)),
    Vector((5.214104652404785, 3.740337610244751, 0.0)),
    Vector((4.06604528427124, 3.51769757270813, 0.0)),
    Vector((3.0888278484344482, 3.1058146953582764, 0.0)),
    Vector((2.1457788944244385, 2.5158209800720215, 0.0)),
    Vector((1.2847340106964111, 1.8145078420639038, 0.0)),
    Vector((0.5740301609039307, 0.9462156891822815, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.3690195679664612, -1.046403169631958, 29.22359848022461)),
    Vector((-0.6287001371383667, -2.126202344894409, 29.22359848022461)),
    Vector((-0.6560350656509399, -3.2393970489501953, 29.22359848022461)),
    Vector((-0.5398622751235962, -4.341460227966309, 29.22359848022461)),
    Vector((-0.1776762455701828, -5.398995399475098, 29.22359848022461)),
    Vector((0.2665144205093384, -6.4120025634765625, 29.22359848022461)),
    Vector((0.9157163500785828, -7.280294418334961, 29.22359848022461)),
    Vector((1.7084263563156128, -8.104058265686035, 29.22359848022461)),
    Vector((2.330293655395508, -8.549336433410645, 29.22359848022461)),
    Vector((3.0615005493164062, -8.9166898727417, 29.22359848022461)),
    Vector((86.89784240722656, -33.57319641113281, 29.22359848022461)),
    Vector((89.05729675292969, -32.9831657409668, 29.22359848022461)),
    Vector((90.42402648925781, -32.30409240722656, 29.22359848022461)),
    Vector((91.85225677490234, -31.112947463989258, 29.22359848022461)),
    Vector((92.93878936767578, -29.498794555664062, 29.22359848022461)),
    Vector((93.54695892333984, -27.662012100219727, 29.22359848022461)),
    Vector((93.6494369506836, -25.9810848236084, 29.22359848022461)),
    Vector((93.34871673583984, -24.322429656982422, 29.22359848022461)),
    Vector((92.56964111328125, -22.66378402709961, 29.22359848022461)),
    Vector((90.8885269165039, -21.42816925048828, 29.22359848022461)),
    Vector((6.567174911499023, 3.6958115100860596, 29.22359848022461)),
    Vector((5.214104652404785, 3.740337610244751, 29.22359848022461)),
    Vector((4.06604528427124, 3.51769757270813, 29.22359848022461)),
    Vector((3.0888278484344482, 3.1058146953582764, 29.22359848022461)),
    Vector((2.1457788944244385, 2.5158209800720215, 29.22359848022461)),
    Vector((1.2847340106964111, 1.8145078420639038, 29.22359848022461)),
    Vector((0.5740301609039307, 0.9462156891822815, 29.22359848022461)),
    Vector((0.0, 0.0, 29.22359848022461))
]
unitVectors = [
    Vector((-0.23382310569286346, -0.9722791314125061, 0.0)),
    Vector((-0.024547988548874855, -0.9996986389160156, 0.0)),
    Vector((0.10483306646347046, -0.994489848613739, 0.0)),
    Vector((0.3240061104297638, -0.9460549354553223, 0.0)),
    Vector((0.40157756209373474, -0.9158250689506531, 0.0)),
    Vector((0.5988087058067322, -0.8008921146392822, 0.0)),
    Vector((0.6933947205543518, -0.7205579280853271, 0.0)),
    Vector((0.8130605816841125, -0.582179069519043, 0.0)),
    Vector((0.8935701251029968, -0.44892364740371704, 0.0)),
    Vector((0.9593693614006042, -0.28215324878692627, 0.0)),
    Vector((0.9646403193473816, 0.26356998085975647, 0.0)),
    Vector((0.8955491781234741, 0.4449625611305237, 0.0)),
    Vector((0.7679691910743713, 0.6404867768287659, 0.0)),
    Vector((0.5584059357643127, 0.8295679092407227, 0.0)),
    Vector((0.3143240511417389, 0.9493157267570496, 0.0)),
    Vector((0.06085219234228134, 0.9981467723846436, 0.0)),
    Vector((-0.1783953309059143, 0.983958899974823, 0.0)),
    Vector((-0.42514312267303467, 0.9051262140274048, 0.0)),
    Vector((-0.8057650327682495, 0.5922353267669678, 0.0)),
    Vector((-0.9583640098571777, 0.28554949164390564, 0.0)),
    Vector((-0.9994590282440186, 0.032889652997255325, 0.0)),
    Vector((-0.9817103743553162, -0.19038043916225433, 0.0)),
    Vector((-0.9214926958084106, -0.3883957266807556, 0.0)),
    Vector((-0.8477606177330017, -0.5303791165351868, 0.0)),
    Vector((-0.7753579616546631, -0.6315218806266785, 0.0)),
    Vector((-0.6333888173103333, -0.7738336324691772, 0.0)),
    Vector((-0.5186758041381836, -0.8549710512161255, 0.0)),
    Vector((-0.3325803279876709, -0.9430749416351318, 0.0))
]
holesInfo = None
firstVertIndex = 28
numPolygonVerts = 28
faces = []

bpypolyskel.debugOutputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debugOutputs["skeleton"])
