import pytest
from mathutils import Vector

from bpypolyskel import bpypolyskel

verts = [
    Vector((-0.47870951890945435, 3.4620361328125, 0.0)),
    Vector((-0.28579673171043396, 3.495431900024414, 0.0)),
    Vector((-1.407547116279602, 10.3861083984375, 0.0)),
    Vector((-1.0788812637329102, 10.430636405944824, 0.0)),
    Vector((-1.6361829042434692, 14.504929542541504, 0.0)),
    Vector((-1.964848518371582, 14.460402488708496, 0.0)),
    Vector((-2.7650744915008545, 20.493919372558594, 0.0)),
    Vector((-2.464988946914673, 20.527315139770508, 0.0)),
    Vector((-3.0365781784057617, 24.70179557800293, 0.0)),
    Vector((-3.379532814025879, 24.657268524169922, 0.0)),
    Vector((-3.7867891788482666, 28.141569137573242, 0.0)),
    Vector((-3.508138656616211, 28.174964904785156, 0.0)),
    Vector((-3.9725534915924072, 31.603605270385742, 0.0)),
    Vector((-4.215479373931885, 31.570209503173828, 0.0)),
    Vector((-4.772777080535889, 35.021114349365234, 0.0)),
    Vector((-4.444112777709961, 35.065643310546875, 0.0)),
    Vector((-5.215754508972168, 40.041622161865234, 0.0)),
    Vector((-5.122871398925781, 40.05275344848633, 0.0)),
    Vector((-5.172884941101074, 40.40897750854492, 0.0)),
    Vector((-19.491209030151367, 38.44978713989258, 0.0)),
    Vector((-18.762451171875, 33.106449127197266, 0.0)),
    Vector((-18.44093132019043, 33.150978088378906, 0.0)),
    Vector((-18.040828704833984, 29.85591697692871, 0.0)),
    Vector((-18.31947898864746, 29.811391830444336, 0.0)),
    Vector((-17.762191772460938, 25.80388832092285, 0.0)),
    Vector((-17.562135696411133, 25.837282180786133, 0.0)),
    Vector((-17.147741317749023, 22.7759952545166, 0.0)),
    Vector((-17.34779930114746, 22.742599487304688, 0.0)),
    Vector((-15.397284507751465, 8.426907539367676, 0.0)),
    Vector((-15.197226524353027, 8.44917106628418, 0.0)),
    Vector((-14.768540382385254, 5.443543434143066, 0.0)),
    Vector((-14.982888221740723, 5.4101481437683105, 0.0)),
    Vector((-14.454174995422363, 1.569624423980713, 0.0)),
    Vector((-14.154088020324707, 1.6141513586044312, 0.0)),
    Vector((-13.68253231048584, -1.881281852722168, 0.0)),
    Vector((-13.97547435760498, -1.9258089065551758, 0.0)),
    Vector((-13.253849983215332, -7.224618434906006, 0.0)),
    Vector((1.0645945072174072, -5.309939384460449, 0.0)),
    Vector((0.3358113765716553, 0.0445278063416481, 0.0)),
    Vector((0.0, 0.0, 0.0)),
    Vector((-0.47870951890945435, 3.4620361328125, 19.403215408325195)),
    Vector((-0.28579673171043396, 3.495431900024414, 19.403215408325195)),
    Vector((-1.407547116279602, 10.3861083984375, 19.403215408325195)),
    Vector((-1.0788812637329102, 10.430636405944824, 19.403215408325195)),
    Vector((-1.6361829042434692, 14.504929542541504, 19.403215408325195)),
    Vector((-1.964848518371582, 14.460402488708496, 19.403215408325195)),
    Vector((-2.7650744915008545, 20.493919372558594, 19.403215408325195)),
    Vector((-2.464988946914673, 20.527315139770508, 19.403215408325195)),
    Vector((-3.0365781784057617, 24.70179557800293, 19.403215408325195)),
    Vector((-3.379532814025879, 24.657268524169922, 19.403215408325195)),
    Vector((-3.7867891788482666, 28.141569137573242, 19.403215408325195)),
    Vector((-3.508138656616211, 28.174964904785156, 19.403215408325195)),
    Vector((-3.9725534915924072, 31.603605270385742, 19.403215408325195)),
    Vector((-4.215479373931885, 31.570209503173828, 19.403215408325195)),
    Vector((-4.772777080535889, 35.021114349365234, 19.403215408325195)),
    Vector((-4.444112777709961, 35.065643310546875, 19.403215408325195)),
    Vector((-5.215754508972168, 40.041622161865234, 19.403215408325195)),
    Vector((-5.122871398925781, 40.05275344848633, 19.403215408325195)),
    Vector((-5.172884941101074, 40.40897750854492, 19.403215408325195)),
    Vector((-19.491209030151367, 38.44978713989258, 19.403215408325195)),
    Vector((-18.762451171875, 33.106449127197266, 19.403215408325195)),
    Vector((-18.44093132019043, 33.150978088378906, 19.403215408325195)),
    Vector((-18.040828704833984, 29.85591697692871, 19.403215408325195)),
    Vector((-18.31947898864746, 29.811391830444336, 19.403215408325195)),
    Vector((-17.762191772460938, 25.80388832092285, 19.403215408325195)),
    Vector((-17.562135696411133, 25.837282180786133, 19.403215408325195)),
    Vector((-17.147741317749023, 22.7759952545166, 19.403215408325195)),
    Vector((-17.34779930114746, 22.742599487304688, 19.403215408325195)),
    Vector((-15.397284507751465, 8.426907539367676, 19.403215408325195)),
    Vector((-15.197226524353027, 8.44917106628418, 19.403215408325195)),
    Vector((-14.768540382385254, 5.443543434143066, 19.403215408325195)),
    Vector((-14.982888221740723, 5.4101481437683105, 19.403215408325195)),
    Vector((-14.454174995422363, 1.569624423980713, 19.403215408325195)),
    Vector((-14.154088020324707, 1.6141513586044312, 19.403215408325195)),
    Vector((-13.68253231048584, -1.881281852722168, 19.403215408325195)),
    Vector((-13.97547435760498, -1.9258089065551758, 19.403215408325195)),
    Vector((-13.253849983215332, -7.224618434906006, 19.403215408325195)),
    Vector((1.0645945072174072, -5.309939384460449, 19.403215408325195)),
    Vector((0.3358113765716553, 0.0445278063416481, 19.403215408325195)),
    Vector((0.0, 0.0, 19.403215408325195))
]
unitVectors = [
    Vector((0.9853444695472717, 0.17057622969150543, 0.0)),
    Vector((-0.16067731380462646, 0.9870069622993469, 0.0)),
    Vector((0.9909468293190002, 0.1342545598745346, 0.0)),
    Vector((-0.13552291691303253, 0.9907742142677307, 0.0)),
    Vector((-0.9909472465515137, -0.13425183296203613, 0.0)),
    Vector((-0.13147874176502228, 0.9913190007209778, 0.0)),
    Vector((0.9938645362854004, 0.11060468852519989, 0.0)),
    Vector((-0.135658860206604, 0.9907556772232056, 0.0)),
    Vector((-0.9916766285896301, -0.12875300645828247, 0.0)),
    Vector((-0.11609292030334473, 0.9932383298873901, 0.0)),
    Vector((0.9928946495056152, 0.11899664998054504, 0.0)),
    Vector((-0.13422587513923645, 0.9909507632255554, 0.0)),
    Vector((-0.9906824827194214, -0.13619215786457062, 0.0)),
    Vector((-0.15942765772342682, 0.987209677696228, 0.0)),
    Vector((0.9909464716911316, 0.13425801694393158, 0.0)),
    Vector((-0.15324172377586365, 0.9881886839866638, 0.0)),
    Vector((0.9928953647613525, 0.1189904436469078, 0.0)),
    Vector((-0.13903547823429108, 0.9902874231338501, 0.0)),
    Vector((-0.9907680749893188, -0.135567769408226, 0.0)),
    Vector((0.1351352035999298, -0.9908271431922913, 0.0)),
    Vector((0.9905452728271484, 0.13718578219413757, 0.0)),
    Vector((0.1205395758152008, -0.9927085041999817, 0.0)),
    Vector((-0.98747318983078, -0.1577869951725006, 0.0)),
    Vector((0.1377355456352234, -0.9904689788818359, 0.0)),
    Vector((0.9863530397415161, 0.1646445095539093, 0.0)),
    Vector((0.13414262235164642, -0.9909619688987732, 0.0)),
    Vector((-0.986351728439331, -0.16465212404727936, 0.0)),
    Vector((0.13500279188156128, -0.990845263004303, 0.0)),
    Vector((0.9938646554946899, 0.11060260236263275, 0.0)),
    Vector((0.14119887351989746, -0.9899811744689941, 0.0)),
    Vector((-0.9880797863006592, -0.15394236147403717, 0.0)),
    Vector((0.13638067245483398, -0.9906564950942993, 0.0)),
    Vector((0.9891701936721802, 0.14677315950393677, 0.0)),
    Vector((0.1336950957775116, -0.9910224676132202, 0.0)),
    Vector((-0.9886444807052612, -0.15027350187301636, 0.0)),
    Vector((0.1349405199289322, -0.9908536672592163, 0.0)),
    Vector((0.9911774396896362, 0.13254140317440033, 0.0)),
    Vector((-0.13486403226852417, 0.990864098072052, 0.0)),
    Vector((-0.9913231730461121, -0.13144713640213013, 0.0)),
    Vector((-0.13697075843811035, 0.9905750751495361, 0.0))
]
holesInfo = None
firstVertIndex = 40
numPolygonVerts = 40
faces = []

bpypolyskel.debug_outputs["skeleton"] = 1


@pytest.mark.dependency()
@pytest.mark.timeout(10)
def test_polygonize():
    global faces
    faces = bpypolyskel.polygonize(verts, firstVertIndex, numPolygonVerts, holesInfo, 0.0, 0.5, None, unitVectors)


@pytest.mark.dependency(depends=["test_polygonize"])
def test_numVertsInFace():
    for face in faces:
        assert len(face) >= 3


@pytest.mark.dependency(depends=["test_polygonize"])
def test_duplication():
    for face in faces:
        assert len(face) == len(set(face))


@pytest.mark.dependency(depends=["test_polygonize"])
def test_edgeCrossing():
    assert not bpypolyskel.check_edge_crossing(bpypolyskel.debug_outputs["skeleton"])
